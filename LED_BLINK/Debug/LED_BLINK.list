
LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001370  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800148c  0800148c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800148c  0800148c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800148c  0800148c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08001498  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001498  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039f7  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001087  00000000  00000000  00023a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00024ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  00025068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010743  00000000  00000000  00025578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f63  00000000  00000000  00035cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b224  00000000  00000000  0003ac1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012a8  00000000  00000000  00095e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001414 	.word	0x08001414

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001414 	.word	0x08001414

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <LL_RCC_HSI_Enable+0x18>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <LL_RCC_HSI_Enable+0x18>)
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	0049      	lsls	r1, r1, #1
 800033a:	430a      	orrs	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <LL_RCC_HSI_IsReady+0x24>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	401a      	ands	r2, r3
 8000356:	2380      	movs	r3, #128	; 0x80
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	429a      	cmp	r2, r3
 800035c:	d101      	bne.n	8000362 <LL_RCC_HSI_IsReady+0x1a>
 800035e:	2301      	movs	r3, #1
 8000360:	e000      	b.n	8000364 <LL_RCC_HSI_IsReady+0x1c>
 8000362:	2300      	movs	r3, #0
}
 8000364:	0018      	movs	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetSysClkSource+0x24>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	2207      	movs	r2, #7
 800037e:	4393      	bics	r3, r2
 8000380:	0019      	movs	r1, r3
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <LL_RCC_SetSysClkSource+0x24>)
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	430a      	orrs	r2, r1
 8000388:	609a      	str	r2, [r3, #8]
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <LL_RCC_GetSysClkSource+0x14>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	2238      	movs	r2, #56	; 0x38
 80003a2:	4013      	ands	r3, r2
}
 80003a4:	0018      	movs	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <LL_RCC_SetAHBPrescaler+0x28>)
 80003be:	4013      	ands	r3, r2
 80003c0:	0019      	movs	r1, r3
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	430a      	orrs	r2, r1
 80003c8:	609a      	str	r2, [r3, #8]
}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	40021000 	.word	0x40021000
 80003d8:	fffff0ff 	.word	0xfffff0ff

080003dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <LL_RCC_SetAPB1Prescaler+0x28>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	0019      	movs	r1, r3
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b002      	add	sp, #8
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	40021000 	.word	0x40021000
 8000404:	ffff8fff 	.word	0xffff8fff

08000408 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <LL_RCC_PLL_Enable+0x18>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <LL_RCC_PLL_Enable+0x18>)
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	0449      	lsls	r1, r1, #17
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000

08000424 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <LL_RCC_PLL_IsReady+0x24>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	049b      	lsls	r3, r3, #18
 8000430:	401a      	ands	r2, r3
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	049b      	lsls	r3, r3, #18
 8000436:	429a      	cmp	r2, r3
 8000438:	d101      	bne.n	800043e <LL_RCC_PLL_IsReady+0x1a>
 800043a:	2301      	movs	r3, #1
 800043c:	e000      	b.n	8000440 <LL_RCC_PLL_IsReady+0x1c>
 800043e:	2300      	movs	r3, #0
}
 8000440:	0018      	movs	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
 8000458:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000460:	4013      	ands	r3, r2
 8000462:	0019      	movs	r1, r3
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	431a      	orrs	r2, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	431a      	orrs	r2, r3
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000476:	430a      	orrs	r2, r1
 8000478:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b004      	add	sp, #16
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000
 8000488:	1fff808c 	.word	0x1fff808c

0800048c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000492:	68da      	ldr	r2, [r3, #12]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000496:	2180      	movs	r1, #128	; 0x80
 8000498:	0549      	lsls	r1, r1, #21
 800049a:	430a      	orrs	r2, r1
 800049c:	60da      	str	r2, [r3, #12]
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <LL_APB1_GRP1_EnableClock+0x28>)
 80004b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <LL_APB1_GRP1_EnableClock+0x28>)
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	430a      	orrs	r2, r1
 80004ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <LL_APB1_GRP1_EnableClock+0x28>)
 80004be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b004      	add	sp, #16
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000

080004d4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <LL_APB2_GRP1_EnableClock+0x28>)
 80004de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_APB2_GRP1_EnableClock+0x28>)
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <LL_APB2_GRP1_EnableClock+0x28>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <LL_IOP_GRP1_EnableClock+0x28>)
 800050a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	430a      	orrs	r2, r1
 8000512:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <LL_IOP_GRP1_EnableClock+0x28>)
 8000516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000

0800052c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_FLASH_SetLatency+0x24>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2207      	movs	r2, #7
 800053a:	4393      	bics	r3, r2
 800053c:	0019      	movs	r1, r3
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <LL_FLASH_SetLatency+0x24>)
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40022000 	.word	0x40022000

08000554 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <LL_FLASH_GetLatency+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2207      	movs	r2, #7
 800055e:	4013      	ands	r3, r2
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40022000 	.word	0x40022000

0800056c <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <LL_EXTI_SetEXTISource+0x48>)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2103      	movs	r1, #3
 800057c:	400b      	ands	r3, r1
 800057e:	3318      	adds	r3, #24
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	589b      	ldr	r3, [r3, r2]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	0c12      	lsrs	r2, r2, #16
 8000588:	2107      	movs	r1, #7
 800058a:	4091      	lsls	r1, r2
 800058c:	000a      	movs	r2, r1
 800058e:	43d2      	mvns	r2, r2
 8000590:	401a      	ands	r2, r3
 8000592:	0011      	movs	r1, r2
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	409a      	lsls	r2, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <LL_EXTI_SetEXTISource+0x48>)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2403      	movs	r4, #3
 80005a2:	4023      	ands	r3, r4
 80005a4:	430a      	orrs	r2, r1
 80005a6:	3318      	adds	r3, #24
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	501a      	str	r2, [r3, r0]
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b003      	add	sp, #12
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	435b      	muls	r3, r3
 80005cc:	001a      	movs	r2, r3
 80005ce:	0013      	movs	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	43db      	mvns	r3, r3
 80005d6:	400b      	ands	r3, r1
 80005d8:	001a      	movs	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	435b      	muls	r3, r3
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	434b      	muls	r3, r1
 80005e2:	431a      	orrs	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	601a      	str	r2, [r3, #0]
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b004      	add	sp, #16
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68d9      	ldr	r1, [r3, #12]
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	435b      	muls	r3, r3
 8000604:	001a      	movs	r2, r3
 8000606:	0013      	movs	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	189b      	adds	r3, r3, r2
 800060c:	43db      	mvns	r3, r3
 800060e:	400b      	ands	r3, r1
 8000610:	001a      	movs	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	435b      	muls	r3, r3
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	434b      	muls	r3, r1
 800061a:	431a      	orrs	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	60da      	str	r2, [r3, #12]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b004      	add	sp, #16
 8000626:	bd80      	pop	{r7, pc}

08000628 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff ff45 	bl	80004d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	055b      	lsls	r3, r3, #21
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ff2a 	bl	80004a8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f806 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f844 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  EcuM_0();
 800065c:	f000 fde0 	bl	8001220 <EcuM_0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x20>
	...

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff ff5f 	bl	800052c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	f7ff ff70 	bl	8000554 <LL_FLASH_GetLatency>
 8000674:	0003      	movs	r3, r0
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1fa      	bne.n	8000670 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 800067a:	f7ff fe57 	bl	800032c <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	f7ff fe62 	bl	8000348 <LL_RCC_HSI_IsReady>
 8000684:	0003      	movs	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d1fa      	bne.n	8000680 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	059b      	lsls	r3, r3, #22
 800068e:	2208      	movs	r2, #8
 8000690:	2100      	movs	r1, #0
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff feda 	bl	800044c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000698:	f7ff feb6 	bl	8000408 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 800069c:	f7ff fef6 	bl	800048c <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	f7ff febf 	bl	8000424 <LL_RCC_PLL_IsReady>
 80006a6:	0003      	movs	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d1fa      	bne.n	80006a2 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff fe7f 	bl	80003b0 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f7ff fe5c 	bl	8000370 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	f7ff fe6d 	bl	8000398 <LL_RCC_GetSysClkSource>
 80006be:	0003      	movs	r3, r0
 80006c0:	2b10      	cmp	r3, #16
 80006c2:	d1fa      	bne.n	80006ba <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe89 	bl	80003dc <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(64000000);
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SystemClock_Config+0x7c>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fcc5 	bl	800105c <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 80006d2:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <SystemClock_Config+0x7c>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fcd1 	bl	800107c <LL_SetSystemCoreClock>
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	03d09000 	.word	0x03d09000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b08b      	sub	sp, #44	; 0x2c
 80006e8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80006ea:	241c      	movs	r4, #28
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	230c      	movs	r3, #12
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f000 fe85 	bl	8001404 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2318      	movs	r3, #24
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f000 fe7e 	bl	8001404 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000708:	2004      	movs	r0, #4
 800070a:	f7ff fef9 	bl	8000500 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 800070e:	2020      	movs	r0, #32
 8000710:	f7ff fef6 	bl	8000500 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff fef3 	bl	8000500 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2120      	movs	r1, #32
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff81 	bl	8000628 <LL_GPIO_ResetOutputPin>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTC, LL_EXTI_CONFIG_LINE13);
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_GPIO_Init+0xd0>)
 8000728:	0019      	movs	r1, r3
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff1e 	bl	800056c <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0192      	lsls	r2, r2, #6
 8000738:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	721a      	strb	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	725a      	strb	r2, [r3, #9]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2202      	movs	r2, #2
 800074a:	729a      	strb	r2, [r3, #10]
  LL_EXTI_Init(&EXTI_InitStruct);
 800074c:	187b      	adds	r3, r7, r1
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f98c 	bl	8000a6c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_BTN_GPIO_Port, USER_BTN_Pin, LL_GPIO_PULL_NO);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	019b      	lsls	r3, r3, #6
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <MX_GPIO_Init+0xd4>)
 800075a:	2200      	movs	r2, #0
 800075c:	0019      	movs	r1, r3
 800075e:	f7ff ff47 	bl	80005f0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_BTN_GPIO_Port, USER_BTN_Pin, LL_GPIO_MODE_INPUT);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_GPIO_Init+0xd4>)
 8000768:	2200      	movs	r2, #0
 800076a:	0019      	movs	r1, r3
 800076c:	f7ff ff24 	bl	80005b8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2201      	movs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2202      	movs	r2, #2
 8000780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fae2 	bl	8000d60 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800079c:	2100      	movs	r1, #0
 800079e:	2007      	movs	r0, #7
 80007a0:	f7ff fd56 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f7ff fd39 	bl	800021c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00b      	add	sp, #44	; 0x2c
 80007b0:	bd90      	pop	{r4, r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	00080003 	.word	0x00080003
 80007b8:	50000800 	.word	0x50000800

080007bc <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d101      	bne.n	80007d6 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021800 	.word	0x40021800

080007e4 <LL_EXTI_ClearFallingFlag_0_31>:
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	611a      	str	r2, [r3, #16]
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021800 	.word	0x40021800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	EcuM_SysTickCallBack();
 8000824:	f000 fd12 	bl	800124c <EcuM_SysTickCallBack>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff ffc0 	bl	80007bc <LL_EXTI_IsActiveFallingFlag_0_31>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d006      	beq.n	800084e <EXTI4_15_IRQHandler+0x20>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_13);
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	019b      	lsls	r3, r3, #6
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ffcd 	bl	80007e4 <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13_FALLING */
    ButtonDrv_SysClickCallback();
 800084a:	f000 fc4b 	bl	80010e4 <ButtonDrv_SysClickCallback>
    /* USER CODE END LL_EXTI_LINE_13_FALLING */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000864:	f7ff fff6 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088e:	f000 fd95 	bl	80013bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000892:	f7ff fed5 	bl	8000640 <main>

08000896 <LoopForever>:

LoopForever:
  b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008a4:	08001494 	.word	0x08001494
  ldr r2, =_sbss
 80008a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008ac:	20000030 	.word	0x20000030

080008b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_COMP_IRQHandler>
	...

080008b4 <LL_EXTI_EnableIT_0_31>:
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008bc:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	58d2      	ldr	r2, [r2, r3]
 80008c2:	4904      	ldr	r1, [pc, #16]	; (80008d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	508b      	str	r3, [r1, r2]
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021800 	.word	0x40021800

080008d8 <LL_EXTI_EnableIT_32_63>:
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80008e0:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <LL_EXTI_EnableIT_32_63+0x20>)
 80008e2:	2390      	movs	r3, #144	; 0x90
 80008e4:	58d2      	ldr	r2, [r2, r3]
 80008e6:	4904      	ldr	r1, [pc, #16]	; (80008f8 <LL_EXTI_EnableIT_32_63+0x20>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	2290      	movs	r2, #144	; 0x90
 80008ee:	508b      	str	r3, [r1, r2]
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021800 	.word	0x40021800

080008fc <LL_EXTI_DisableIT_0_31>:
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <LL_EXTI_DisableIT_0_31+0x24>)
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	58d3      	ldr	r3, [r2, r3]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	43d2      	mvns	r2, r2
 800090e:	4904      	ldr	r1, [pc, #16]	; (8000920 <LL_EXTI_DisableIT_0_31+0x24>)
 8000910:	4013      	ands	r3, r2
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	508b      	str	r3, [r1, r2]
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021800 	.word	0x40021800

08000924 <LL_EXTI_DisableIT_32_63>:
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <LL_EXTI_DisableIT_32_63+0x24>)
 800092e:	2390      	movs	r3, #144	; 0x90
 8000930:	58d3      	ldr	r3, [r2, r3]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	43d2      	mvns	r2, r2
 8000936:	4904      	ldr	r1, [pc, #16]	; (8000948 <LL_EXTI_DisableIT_32_63+0x24>)
 8000938:	4013      	ands	r3, r2
 800093a:	2290      	movs	r2, #144	; 0x90
 800093c:	508b      	str	r3, [r1, r2]
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021800 	.word	0x40021800

0800094c <LL_EXTI_EnableEvent_0_31>:
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000954:	4a05      	ldr	r2, [pc, #20]	; (800096c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000956:	2384      	movs	r3, #132	; 0x84
 8000958:	58d2      	ldr	r2, [r2, r3]
 800095a:	4904      	ldr	r1, [pc, #16]	; (800096c <LL_EXTI_EnableEvent_0_31+0x20>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	2284      	movs	r2, #132	; 0x84
 8000962:	508b      	str	r3, [r1, r2]
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021800 	.word	0x40021800

08000970 <LL_EXTI_EnableEvent_32_63>:
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <LL_EXTI_EnableEvent_32_63+0x20>)
 800097a:	2394      	movs	r3, #148	; 0x94
 800097c:	58d2      	ldr	r2, [r2, r3]
 800097e:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	2294      	movs	r2, #148	; 0x94
 8000986:	508b      	str	r3, [r1, r2]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021800 	.word	0x40021800

08000994 <LL_EXTI_DisableEvent_0_31>:
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800099e:	2384      	movs	r3, #132	; 0x84
 80009a0:	58d3      	ldr	r3, [r2, r3]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	4904      	ldr	r1, [pc, #16]	; (80009b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	2284      	movs	r2, #132	; 0x84
 80009ac:	508b      	str	r3, [r1, r2]
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40021800 	.word	0x40021800

080009bc <LL_EXTI_DisableEvent_32_63>:
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80009c6:	2394      	movs	r3, #148	; 0x94
 80009c8:	58d3      	ldr	r3, [r2, r3]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	4904      	ldr	r1, [pc, #16]	; (80009e0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	2294      	movs	r2, #148	; 0x94
 80009d4:	508b      	str	r3, [r1, r2]
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40021800 	.word	0x40021800

080009e4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021800 	.word	0x40021800

08000a04 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a16:	400a      	ands	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	40021800 	.word	0x40021800

08000a28 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a32:	6859      	ldr	r1, [r3, #4]
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	605a      	str	r2, [r3, #4]
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021800 	.word	0x40021800

08000a48 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	605a      	str	r2, [r3, #4]
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021800 	.word	0x40021800

08000a6c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7a1b      	ldrb	r3, [r3, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d100      	bne.n	8000a82 <LL_EXTI_Init+0x16>
 8000a80:	e09a      	b.n	8000bb8 <LL_EXTI_Init+0x14c>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d061      	beq.n	8000b4e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7a5b      	ldrb	r3, [r3, #9]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d01b      	beq.n	8000aca <LL_EXTI_Init+0x5e>
 8000a92:	dc25      	bgt.n	8000ae0 <LL_EXTI_Init+0x74>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <LL_EXTI_Init+0x32>
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d00b      	beq.n	8000ab4 <LL_EXTI_Init+0x48>
 8000a9c:	e020      	b.n	8000ae0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ff76 	bl	8000994 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff01 	bl	80008b4 <LL_EXTI_EnableIT_0_31>
          break;
 8000ab2:	e018      	b.n	8000ae6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff1f 	bl	80008fc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff ff42 	bl	800094c <LL_EXTI_EnableEvent_0_31>
          break;
 8000ac8:	e00d      	b.n	8000ae6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fef0 	bl	80008b4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff37 	bl	800094c <LL_EXTI_EnableEvent_0_31>
          break;
 8000ade:	e002      	b.n	8000ae6 <LL_EXTI_Init+0x7a>
        default:
          status = 0x01u;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
          break;
 8000ae4:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7a9b      	ldrb	r3, [r3, #10]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d02f      	beq.n	8000b4e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7a9b      	ldrb	r3, [r3, #10]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d01b      	beq.n	8000b2e <LL_EXTI_Init+0xc2>
 8000af6:	dc25      	bgt.n	8000b44 <LL_EXTI_Init+0xd8>
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d002      	beq.n	8000b02 <LL_EXTI_Init+0x96>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d00b      	beq.n	8000b18 <LL_EXTI_Init+0xac>
 8000b00:	e020      	b.n	8000b44 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff ff9e 	bl	8000a48 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ff67 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000b16:	e01b      	b.n	8000b50 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ff71 	bl	8000a04 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff7e 	bl	8000a28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000b2c:	e010      	b.n	8000b50 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff56 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ff73 	bl	8000a28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000b42:	e005      	b.n	8000b50 <LL_EXTI_Init+0xe4>
          default:
            status |= 0x02u;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2202      	movs	r2, #2
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
            break;
 8000b4c:	e000      	b.n	8000b50 <LL_EXTI_Init+0xe4>
        }
      }
 8000b4e:	46c0      	nop			; (mov r8, r8)
    }
#if defined(STM32G081xx) || defined(STM32G071xx) || defined(STM32G0C1xx) || defined(STM32G0B1xx) || defined(STM32G0B0xx)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d044      	beq.n	8000be2 <LL_EXTI_Init+0x176>
    {
      switch (EXTI_InitStruct->Mode)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7a5b      	ldrb	r3, [r3, #9]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d01b      	beq.n	8000b98 <LL_EXTI_Init+0x12c>
 8000b60:	dc25      	bgt.n	8000bae <LL_EXTI_Init+0x142>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <LL_EXTI_Init+0x100>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d00b      	beq.n	8000b82 <LL_EXTI_Init+0x116>
 8000b6a:	e020      	b.n	8000bae <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff23 	bl	80009bc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff feac 	bl	80008d8 <LL_EXTI_EnableIT_32_63>
          break;
 8000b80:	e030      	b.n	8000be4 <LL_EXTI_Init+0x178>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fecc 	bl	8000924 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff feed 	bl	8000970 <LL_EXTI_EnableEvent_32_63>
          break;
 8000b96:	e025      	b.n	8000be4 <LL_EXTI_Init+0x178>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff fe9b 	bl	80008d8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff fee2 	bl	8000970 <LL_EXTI_EnableEvent_32_63>
          break;
 8000bac:	e01a      	b.n	8000be4 <LL_EXTI_Init+0x178>
        default:
          status |= 0x04u;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
          break;
 8000bb6:	e015      	b.n	8000be4 <LL_EXTI_Init+0x178>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fe9d 	bl	80008fc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fee4 	bl	8000994 <LL_EXTI_DisableEvent_0_31>
#if defined(STM32G081xx) || defined(STM32G071xx) || defined(STM32G0C1xx) || defined(STM32G0B1xx) || defined(STM32G0B0xx)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fea7 	bl	8000924 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff feee 	bl	80009bc <LL_EXTI_DisableEvent_32_63>
 8000be0:	e000      	b.n	8000be4 <LL_EXTI_Init+0x178>
    }
 8000be2:	46c0      	nop			; (mov r8, r8)
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  }

  return status;
 8000be4:	68fb      	ldr	r3, [r7, #12]
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}

08000bee <LL_GPIO_SetPinMode>:
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	435b      	muls	r3, r3
 8000c02:	001a      	movs	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	001a      	movs	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	435b      	muls	r3, r3
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	434b      	muls	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <LL_GPIO_SetPinOutputType>:
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	434b      	muls	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	605a      	str	r2, [r3, #4]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LL_GPIO_SetPinSpeed>:
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6899      	ldr	r1, [r3, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	435b      	muls	r3, r3
 8000c64:	001a      	movs	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	189b      	adds	r3, r3, r2
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	400b      	ands	r3, r1
 8000c70:	001a      	movs	r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	435b      	muls	r3, r3
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	434b      	muls	r3, r1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LL_GPIO_SetPinPull>:
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68d9      	ldr	r1, [r3, #12]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	435b      	muls	r3, r3
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	400b      	ands	r3, r1
 8000ca8:	001a      	movs	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	435b      	muls	r3, r3
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	434b      	muls	r3, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	60da      	str	r2, [r3, #12]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LL_GPIO_SetAFPin_0_7>:
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6a19      	ldr	r1, [r3, #32]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	435b      	muls	r3, r3
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	4353      	muls	r3, r2
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	435a      	muls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	400b      	ands	r3, r1
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	435b      	muls	r3, r3
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	434b      	muls	r3, r1
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	434b      	muls	r3, r1
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	434b      	muls	r3, r1
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	621a      	str	r2, [r3, #32]
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <LL_GPIO_SetAFPin_8_15>:
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	0a12      	lsrs	r2, r2, #8
 8000d1e:	4353      	muls	r3, r2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	0a12      	lsrs	r2, r2, #8
 8000d24:	4353      	muls	r3, r2
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	0a12      	lsrs	r2, r2, #8
 8000d2a:	435a      	muls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	43db      	mvns	r3, r3
 8000d34:	400b      	ands	r3, r1
 8000d36:	001a      	movs	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	0a09      	lsrs	r1, r1, #8
 8000d40:	434b      	muls	r3, r1
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	0a09      	lsrs	r1, r1, #8
 8000d46:	434b      	muls	r3, r1
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	0a09      	lsrs	r1, r1, #8
 8000d4c:	434b      	muls	r3, r1
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	434b      	muls	r3, r1
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b004      	add	sp, #16
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d6e:	e047      	b.n	8000e00 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d039      	beq.n	8000dfa <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d003      	beq.n	8000d96 <LL_GPIO_Init+0x36>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d10d      	bne.n	8000db2 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff ff56 	bl	8000c50 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff3a 	bl	8000c26 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff ff64 	bl	8000c88 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d111      	bne.n	8000dec <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d807      	bhi.n	8000dde <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff72 	bl	8000cc0 <LL_GPIO_SetAFPin_0_7>
 8000ddc:	e006      	b.n	8000dec <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff ff8d 	bl	8000d06 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fefa 	bl	8000bee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	1e13      	subs	r3, r2, #0
 8000e0a:	d1b1      	bne.n	8000d70 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <LL_RCC_GetSysClkSource>:
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <LL_RCC_GetSysClkSource+0x14>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2238      	movs	r2, #56	; 0x38
 8000e22:	4013      	ands	r3, r2
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40021000 	.word	0x40021000

08000e30 <LL_RCC_GetAHBPrescaler>:
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <LL_RCC_GetAHBPrescaler+0x14>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	23f0      	movs	r3, #240	; 0xf0
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4013      	ands	r3, r2
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <LL_RCC_GetAPB1Prescaler>:
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	23e0      	movs	r3, #224	; 0xe0
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	4013      	ands	r3, r2
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_RCC_PLL_GetN>:
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <LL_RCC_PLL_GetN+0x14>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	227f      	movs	r2, #127	; 0x7f
 8000e6c:	4013      	ands	r3, r2
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000

08000e78 <LL_RCC_PLL_GetR>:
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <LL_RCC_PLL_GetR+0x14>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0f5b      	lsrs	r3, r3, #29
 8000e82:	075b      	lsls	r3, r3, #29
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_PLL_GetMainSource>:
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <LL_RCC_PLL_GetMainSource+0x14>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_RCC_PLL_GetDivider>:
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <LL_RCC_PLL_GetDivider+0x14>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2270      	movs	r2, #112	; 0x70
 8000eb2:	4013      	ands	r3, r2
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ec8:	f000 f818 	bl	8000efc <RCC_GetSystemClockFreq>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f83e 	bl	8000f58 <RCC_GetHCLKClockFreq>
 8000edc:	0002      	movs	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f84e 	bl	8000f88 <RCC_GetPCLK1ClockFreq>
 8000eec:	0002      	movs	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000f02:	f7ff ff89 	bl	8000e18 <LL_RCC_GetSysClkSource>
 8000f06:	0003      	movs	r3, r0
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d002      	beq.n	8000f12 <RCC_GetSystemClockFreq+0x16>
 8000f0c:	2b10      	cmp	r3, #16
 8000f0e:	d003      	beq.n	8000f18 <RCC_GetSystemClockFreq+0x1c>
 8000f10:	e007      	b.n	8000f22 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <RCC_GetSystemClockFreq+0x50>)
 8000f14:	607b      	str	r3, [r7, #4]
      break;
 8000f16:	e014      	b.n	8000f42 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000f18:	f000 f84c 	bl	8000fb4 <RCC_PLL_GetFreqDomain_SYS>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	607b      	str	r3, [r7, #4]
      break;
 8000f20:	e00f      	b.n	8000f42 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <RCC_GetSystemClockFreq+0x54>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	0adb      	lsrs	r3, r3, #11
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8000f34:	6839      	ldr	r1, [r7, #0]
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <RCC_GetSystemClockFreq+0x58>)
 8000f38:	f7ff f8e4 	bl	8000104 <__udivsi3>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	607b      	str	r3, [r7, #4]
      break;
 8000f40:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	007a1200 	.word	0x007a1200
 8000f50:	40021000 	.word	0x40021000
 8000f54:	00f42400 	.word	0x00f42400

08000f58 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000f60:	f7ff ff66 	bl	8000e30 <LL_RCC_GetAHBPrescaler>
 8000f64:	0003      	movs	r3, r0
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	220f      	movs	r2, #15
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <RCC_GetHCLKClockFreq+0x2c>)
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	58d3      	ldr	r3, [r2, r3]
 8000f72:	221f      	movs	r2, #31
 8000f74:	4013      	ands	r3, r2
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	40da      	lsrs	r2, r3
 8000f7a:	0013      	movs	r3, r2
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0800142c 	.word	0x0800142c

08000f88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000f90:	f7ff ff5a 	bl	8000e48 <LL_RCC_GetAPB1Prescaler>
 8000f94:	0003      	movs	r3, r0
 8000f96:	0b1a      	lsrs	r2, r3, #12
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <RCC_GetPCLK1ClockFreq+0x28>)
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	58d3      	ldr	r3, [r2, r3]
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800146c 	.word	0x0800146c

08000fb4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000fba:	f7ff ff69 	bl	8000e90 <LL_RCC_PLL_GetMainSource>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d003      	beq.n	8000fd6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8000fce:	e005      	b.n	8000fdc <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000fd2:	607b      	str	r3, [r7, #4]
      break;
 8000fd4:	e005      	b.n	8000fe2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8000fd8:	607b      	str	r3, [r7, #4]
      break;
 8000fda:	e002      	b.n	8000fe2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000fde:	607b      	str	r3, [r7, #4]
      break;
 8000fe0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000fe2:	f7ff ff3d 	bl	8000e60 <LL_RCC_PLL_GetN>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4353      	muls	r3, r2
 8000fec:	001c      	movs	r4, r3
 8000fee:	f7ff ff5b 	bl	8000ea8 <LL_RCC_PLL_GetDivider>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f882 	bl	8000104 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	001c      	movs	r4, r3
 8001004:	f7ff ff38 	bl	8000e78 <LL_RCC_PLL_GetR>
 8001008:	0003      	movs	r3, r0
 800100a:	0f5b      	lsrs	r3, r3, #29
 800100c:	3301      	adds	r3, #1
 800100e:	0019      	movs	r1, r3
 8001010:	0020      	movs	r0, r4
 8001012:	f7ff f877 	bl	8000104 <__udivsi3>
 8001016:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b003      	add	sp, #12
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	00f42400 	.word	0x00f42400
 8001024:	007a1200 	.word	0x007a1200

08001028 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f865 	bl	8000104 <__udivsi3>
 800103a:	0003      	movs	r3, r0
 800103c:	001a      	movs	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <LL_InitTick+0x30>)
 8001040:	3a01      	subs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <LL_InitTick+0x30>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <LL_InitTick+0x30>)
 800104c:	2205      	movs	r2, #5
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	e000e010 	.word	0xe000e010

0800105c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001064:	23fa      	movs	r3, #250	; 0xfa
 8001066:	009a      	lsls	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ffdb 	bl	8001028 <LL_InitTick>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <LL_SetSystemCoreClock+0x18>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000000 	.word	0x20000000

08001098 <ButtonDrv_Init>:
#define CLICK3		(3u)

static volatile unsigned int ru32_SysClick = 0u;

void ButtonDrv_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	ButtonDrv_MainFunction();
 800109c:	f000 f804 	bl	80010a8 <ButtonDrv_MainFunction>
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <ButtonDrv_MainFunction>:

void ButtonDrv_MainFunction(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	switch(ru32_SysClick)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <ButtonDrv_MainFunction+0x38>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d00b      	beq.n	80010cc <ButtonDrv_MainFunction+0x24>
 80010b4:	d80d      	bhi.n	80010d2 <ButtonDrv_MainFunction+0x2a>
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <ButtonDrv_MainFunction+0x18>
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d003      	beq.n	80010c6 <ButtonDrv_MainFunction+0x1e>
 80010be:	e008      	b.n	80010d2 <ButtonDrv_MainFunction+0x2a>
		{
		case CLICK1:
		{
			LedDrv_MainFunction1();
 80010c0:	f000 f902 	bl	80012c8 <LedDrv_MainFunction1>
			break;
 80010c4:	e009      	b.n	80010da <ButtonDrv_MainFunction+0x32>
		}
		case CLICK2:
		{

			LedDrv_MainFunction2();
 80010c6:	f000 f929 	bl	800131c <LedDrv_MainFunction2>
			break;
 80010ca:	e006      	b.n	80010da <ButtonDrv_MainFunction+0x32>
		}
		case CLICK3:
		{
			LedDrv_MainFunction3();
 80010cc:	f000 f94e 	bl	800136c <LedDrv_MainFunction3>
			break;
 80010d0:	e003      	b.n	80010da <ButtonDrv_MainFunction+0x32>
		}
		default:
		{
			ru32_SysClick = 0;
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <ButtonDrv_MainFunction+0x38>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000020 	.word	0x20000020

080010e4 <ButtonDrv_SysClickCallback>:

void ButtonDrv_SysClickCallback(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	ru32_SysClick++;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <ButtonDrv_SysClickCallback+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <ButtonDrv_SysClickCallback+0x14>)
 80010f0:	601a      	str	r2, [r3, #0]
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000020 	.word	0x20000020

080010fc <__NVIC_SetPriority>:
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b7f      	cmp	r3, #127	; 0x7f
 8001110:	d828      	bhi.n	8001164 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	33c0      	adds	r3, #192	; 0xc0
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	589b      	ldr	r3, [r3, r2]
 8001122:	1dfa      	adds	r2, r7, #7
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	0011      	movs	r1, r2
 8001128:	2203      	movs	r2, #3
 800112a:	400a      	ands	r2, r1
 800112c:	00d2      	lsls	r2, r2, #3
 800112e:	21ff      	movs	r1, #255	; 0xff
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	43d2      	mvns	r2, r2
 8001136:	401a      	ands	r2, r3
 8001138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	401a      	ands	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	2303      	movs	r3, #3
 800114a:	4003      	ands	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	481f      	ldr	r0, [pc, #124]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	430a      	orrs	r2, r1
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	501a      	str	r2, [r3, r0]
}
 8001162:	e031      	b.n	80011c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0019      	movs	r1, r3
 800116c:	230f      	movs	r3, #15
 800116e:	400b      	ands	r3, r1
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3306      	adds	r3, #6
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001c      	movs	r4, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	4023      	ands	r3, r4
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	430a      	orrs	r2, r1
 80011be:	3306      	adds	r3, #6
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	18c3      	adds	r3, r0, r3
 80011c4:	3304      	adds	r3, #4
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d301      	bcc.n	80011f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ec:	2301      	movs	r3, #1
 80011ee:	e010      	b.n	8001212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SysTick_Config+0x44>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2103      	movs	r1, #3
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff7c 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x44>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	e000e010 	.word	0xe000e010

08001220 <EcuM_0>:

void EcuM_Init(void);
void EcuM_MainFunction(void);

void EcuM_0(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	EcuM_Init();
 8001224:	f000 f828 	bl	8001278 <EcuM_Init>
	while(1)
	{
		if (ru32_OldSysTick != ru32_SysTick)
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <EcuM_0+0x24>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <EcuM_0+0x28>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d0f9      	beq.n	8001228 <EcuM_0+0x8>
		{
			EcuM_MainFunction();
 8001234:	f000 f838 	bl	80012a8 <EcuM_MainFunction>
			ru32_OldSysTick = ru32_SysTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <EcuM_0+0x28>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <EcuM_0+0x24>)
 800123e:	601a      	str	r2, [r3, #0]
		if (ru32_OldSysTick != ru32_SysTick)
 8001240:	e7f2      	b.n	8001228 <EcuM_0+0x8>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000028 	.word	0x20000028
 8001248:	20000024 	.word	0x20000024

0800124c <EcuM_SysTickCallBack>:
		}
	}
}

void EcuM_SysTickCallBack(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	ru32_SysTick++;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <EcuM_SysTickCallBack+0x24>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <EcuM_SysTickCallBack+0x24>)
 8001258:	601a      	str	r2, [r3, #0]
	if(ru32_SysTick == 65535)
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <EcuM_SysTickCallBack+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <EcuM_SysTickCallBack+0x28>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d102      	bne.n	800126a <EcuM_SysTickCallBack+0x1e>
	{
		ru32_SysTick = 0;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <EcuM_SysTickCallBack+0x24>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
	}
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000024 	.word	0x20000024
 8001274:	0000ffff 	.word	0x0000ffff

08001278 <EcuM_Init>:

void EcuM_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fe1d 	bl	8000ec0 <LL_RCC_GetSystemClocksFreq>
	SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22fa      	movs	r2, #250	; 0xfa
 800128c:	0091      	lsls	r1, r2, #2
 800128e:	0018      	movs	r0, r3
 8001290:	f7fe ff38 	bl	8000104 <__udivsi3>
 8001294:	0003      	movs	r3, r0
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff ff9e 	bl	80011d8 <SysTick_Config>
	LedDrv_Init();
 800129c:	f000 f80b 	bl	80012b6 <LedDrv_Init>
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b004      	add	sp, #16
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <EcuM_MainFunction>:


void EcuM_MainFunction(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	ButtonDrv_Init();
 80012ac:	f7ff fef4 	bl	8001098 <ButtonDrv_Init>
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <LedDrv_Init>:
#define LED_BLINK3		(1000u/TASK_PERIOD3)

static unsigned int ru32_LedTimer = 0u;

void LedDrv_Init(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
//	LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	LED_GREEN_GPIO_Port ->BSRR = LED_GREEN_Pin;
 80012ba:	23a0      	movs	r3, #160	; 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	2220      	movs	r2, #32
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <LedDrv_MainFunction1>:

void LedDrv_MainFunction1(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	ru32_LedTimer++;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <LedDrv_MainFunction1+0x50>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <LedDrv_MainFunction1+0x50>)
 80012d6:	601a      	str	r2, [r3, #0]
	if(LED_BLINK1 <= ru32_LedTimer)
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <LedDrv_MainFunction1+0x50>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	23fa      	movs	r3, #250	; 0xfa
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d314      	bcc.n	800130e <LedDrv_MainFunction1+0x46>
	{
//		LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		uint32_t odr = READ_REG(LED_GREEN_GPIO_Port->ODR);
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	607b      	str	r3, [r7, #4]
		WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	039b      	lsls	r3, r3, #14
 80012f4:	401a      	ands	r2, r3
 80012f6:	0011      	movs	r1, r2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	2220      	movs	r2, #32
 80012fe:	401a      	ands	r2, r3
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	430a      	orrs	r2, r1
 8001306:	619a      	str	r2, [r3, #24]
		ru32_LedTimer = 0u;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <LedDrv_MainFunction1+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
	}
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	2000002c 	.word	0x2000002c

0800131c <LedDrv_MainFunction2>:

void LedDrv_MainFunction2(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	ru32_LedTimer++;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <LedDrv_MainFunction2+0x4c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <LedDrv_MainFunction2+0x4c>)
 800132a:	601a      	str	r2, [r3, #0]
	if(LED_BLINK2 <= ru32_LedTimer)
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <LedDrv_MainFunction2+0x4c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2bc7      	cmp	r3, #199	; 0xc7
 8001332:	d914      	bls.n	800135e <LedDrv_MainFunction2+0x42>
	{
		uint32_t odr = READ_REG(LED_GREEN_GPIO_Port->ODR);
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	607b      	str	r3, [r7, #4]
		WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	401a      	ands	r2, r3
 8001346:	0011      	movs	r1, r2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	43db      	mvns	r3, r3
 800134c:	2220      	movs	r2, #32
 800134e:	401a      	ands	r2, r3
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	430a      	orrs	r2, r1
 8001356:	619a      	str	r2, [r3, #24]
		ru32_LedTimer = 0u;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <LedDrv_MainFunction2+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	}
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000002c 	.word	0x2000002c

0800136c <LedDrv_MainFunction3>:

void LedDrv_MainFunction3(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	ru32_LedTimer++;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <LedDrv_MainFunction3+0x4c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <LedDrv_MainFunction3+0x4c>)
 800137a:	601a      	str	r2, [r3, #0]
	if(LED_BLINK3 <= ru32_LedTimer)
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <LedDrv_MainFunction3+0x4c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b31      	cmp	r3, #49	; 0x31
 8001382:	d914      	bls.n	80013ae <LedDrv_MainFunction3+0x42>
	{
		uint32_t odr = READ_REG(LED_GREEN_GPIO_Port->ODR);
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	607b      	str	r3, [r7, #4]
		WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	041a      	lsls	r2, r3, #16
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	401a      	ands	r2, r3
 8001396:	0011      	movs	r1, r2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	43db      	mvns	r3, r3
 800139c:	2220      	movs	r2, #32
 800139e:	401a      	ands	r2, r3
 80013a0:	23a0      	movs	r3, #160	; 0xa0
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	430a      	orrs	r2, r1
 80013a6:	619a      	str	r2, [r3, #24]
		ru32_LedTimer = 0u;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <LedDrv_MainFunction3+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	}
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	2000002c 	.word	0x2000002c

080013bc <__libc_init_array>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	2600      	movs	r6, #0
 80013c0:	4d0c      	ldr	r5, [pc, #48]	; (80013f4 <__libc_init_array+0x38>)
 80013c2:	4c0d      	ldr	r4, [pc, #52]	; (80013f8 <__libc_init_array+0x3c>)
 80013c4:	1b64      	subs	r4, r4, r5
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	42a6      	cmp	r6, r4
 80013ca:	d109      	bne.n	80013e0 <__libc_init_array+0x24>
 80013cc:	2600      	movs	r6, #0
 80013ce:	f000 f821 	bl	8001414 <_init>
 80013d2:	4d0a      	ldr	r5, [pc, #40]	; (80013fc <__libc_init_array+0x40>)
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <__libc_init_array+0x44>)
 80013d6:	1b64      	subs	r4, r4, r5
 80013d8:	10a4      	asrs	r4, r4, #2
 80013da:	42a6      	cmp	r6, r4
 80013dc:	d105      	bne.n	80013ea <__libc_init_array+0x2e>
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	00b3      	lsls	r3, r6, #2
 80013e2:	58eb      	ldr	r3, [r5, r3]
 80013e4:	4798      	blx	r3
 80013e6:	3601      	adds	r6, #1
 80013e8:	e7ee      	b.n	80013c8 <__libc_init_array+0xc>
 80013ea:	00b3      	lsls	r3, r6, #2
 80013ec:	58eb      	ldr	r3, [r5, r3]
 80013ee:	4798      	blx	r3
 80013f0:	3601      	adds	r6, #1
 80013f2:	e7f2      	b.n	80013da <__libc_init_array+0x1e>
 80013f4:	0800148c 	.word	0x0800148c
 80013f8:	0800148c 	.word	0x0800148c
 80013fc:	0800148c 	.word	0x0800148c
 8001400:	08001490 	.word	0x08001490

08001404 <memset>:
 8001404:	0003      	movs	r3, r0
 8001406:	1882      	adds	r2, r0, r2
 8001408:	4293      	cmp	r3, r2
 800140a:	d100      	bne.n	800140e <memset+0xa>
 800140c:	4770      	bx	lr
 800140e:	7019      	strb	r1, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	e7f9      	b.n	8001408 <memset+0x4>

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
