
LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000119c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012b8  080012b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012b8  080012b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012b8  080012b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000004  080012c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080012c4  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003053  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f31  00000000  00000000  0002307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00023fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000458  00000000  00000000  000244a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010519  00000000  00000000  000248f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048b1  00000000  00000000  00034e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ade3  00000000  00000000  000396c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000944a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001004  00000000  00000000  000944f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001240 	.word	0x08001240

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001240 	.word	0x08001240

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <LL_RCC_HSI_Enable+0x18>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <LL_RCC_HSI_Enable+0x18>)
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	0049      	lsls	r1, r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <LL_RCC_HSI_IsReady+0x24>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	401a      	ands	r2, r3
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	429a      	cmp	r2, r3
 8000420:	d101      	bne.n	8000426 <LL_RCC_HSI_IsReady+0x1a>
 8000422:	2301      	movs	r3, #1
 8000424:	e000      	b.n	8000428 <LL_RCC_HSI_IsReady+0x1c>
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_SetSysClkSource+0x24>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	2207      	movs	r2, #7
 8000442:	4393      	bics	r3, r2
 8000444:	0019      	movs	r1, r3
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <LL_RCC_SetSysClkSource+0x24>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	430a      	orrs	r2, r1
 800044c:	609a      	str	r2, [r3, #8]
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <LL_RCC_GetSysClkSource+0x14>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	2238      	movs	r2, #56	; 0x38
 8000466:	4013      	ands	r3, r2
}
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <LL_RCC_SetAHBPrescaler+0x24>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4a06      	ldr	r2, [pc, #24]	; (800049c <LL_RCC_SetAHBPrescaler+0x28>)
 8000482:	4013      	ands	r3, r2
 8000484:	0019      	movs	r1, r3
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <LL_RCC_SetAHBPrescaler+0x24>)
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	430a      	orrs	r2, r1
 800048c:	609a      	str	r2, [r3, #8]
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000
 800049c:	fffff0ff 	.word	0xfffff0ff

080004a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ae:	4013      	ands	r3, r2
 80004b0:	0019      	movs	r1, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	609a      	str	r2, [r3, #8]
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000
 80004c8:	ffff8fff 	.word	0xffff8fff

080004cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LL_RCC_PLL_Enable+0x18>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <LL_RCC_PLL_Enable+0x18>)
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0449      	lsls	r1, r1, #17
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_RCC_PLL_IsReady+0x24>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	049b      	lsls	r3, r3, #18
 80004f4:	401a      	ands	r2, r3
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	049b      	lsls	r3, r3, #18
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d101      	bne.n	8000502 <LL_RCC_PLL_IsReady+0x1a>
 80004fe:	2301      	movs	r3, #1
 8000500:	e000      	b.n	8000504 <LL_RCC_PLL_IsReady+0x1c>
 8000502:	2300      	movs	r3, #0
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000524:	4013      	ands	r3, r2
 8000526:	0019      	movs	r1, r3
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	431a      	orrs	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	431a      	orrs	r2, r3
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800053a:	430a      	orrs	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40021000 	.word	0x40021000
 800054c:	1fff808c 	.word	0x1fff808c

08000550 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0549      	lsls	r1, r1, #21
 800055e:	430a      	orrs	r2, r1
 8000560:	60da      	str	r2, [r3, #12]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_APB1_GRP1_EnableClock+0x28>)
 8000576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	430a      	orrs	r2, r1
 800057e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_APB1_GRP1_EnableClock+0x28>)
 8000582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80005a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4013      	ands	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <LL_IOP_GRP1_EnableClock+0x28>)
 80005ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_IOP_GRP1_EnableClock+0x28>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <LL_IOP_GRP1_EnableClock+0x28>)
 80005da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_FLASH_SetLatency+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2207      	movs	r2, #7
 80005fe:	4393      	bics	r3, r2
 8000600:	0019      	movs	r1, r3
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <LL_FLASH_SetLatency+0x24>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40022000 	.word	0x40022000

08000618 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <LL_FLASH_GetLatency+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2207      	movs	r2, #7
 8000622:	4013      	ands	r3, r2
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40022000 	.word	0x40022000

08000630 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ffa3 	bl	8000598 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	055b      	lsls	r3, r3, #21
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff88 	bl	800056c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f806 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f844 	bl	80006ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  EcuM_0();
 8000664:	f000 fcd6 	bl	8001014 <EcuM_0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x20>
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff ffbd 	bl	80005f0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	f7ff ffce 	bl	8000618 <LL_FLASH_GetLatency>
 800067c:	0003      	movs	r3, r0
 800067e:	2b02      	cmp	r3, #2
 8000680:	d1fa      	bne.n	8000678 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000682:	f7ff feb5 	bl	80003f0 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	f7ff fec0 	bl	800040c <LL_RCC_HSI_IsReady>
 800068c:	0003      	movs	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d1fa      	bne.n	8000688 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	059b      	lsls	r3, r3, #22
 8000696:	2208      	movs	r2, #8
 8000698:	2100      	movs	r1, #0
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ff38 	bl	8000510 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80006a0:	f7ff ff14 	bl	80004cc <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 80006a4:	f7ff ff54 	bl	8000550 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	f7ff ff1d 	bl	80004e8 <LL_RCC_PLL_IsReady>
 80006ae:	0003      	movs	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d1fa      	bne.n	80006aa <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fedd 	bl	8000474 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff feba 	bl	8000434 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	f7ff fecb 	bl	800045c <LL_RCC_GetSysClkSource>
 80006c6:	0003      	movs	r3, r0
 80006c8:	2b10      	cmp	r3, #16
 80006ca:	d1fa      	bne.n	80006c2 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fee7 	bl	80004a0 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(64000000);
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SystemClock_Config+0x7c>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 faf7 	bl	8000cc8 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 80006da:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <SystemClock_Config+0x7c>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fb03 	bl	8000ce8 <LL_SetSystemCoreClock>
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	03d09000 	.word	0x03d09000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2318      	movs	r3, #24
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f000 fd98 	bl	8001230 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff ff5f 	bl	80005c4 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000706:	2020      	movs	r0, #32
 8000708:	f7ff ff5c 	bl	80005c4 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff59 	bl	80005c4 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2102      	movs	r1, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff89 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800071e:	23a0      	movs	r3, #160	; 0xa0
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2120      	movs	r1, #32
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff83 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800072a:	003b      	movs	r3, r7
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0192      	lsls	r2, r2, #6
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800073e:	003b      	movs	r3, r7
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <MX_GPIO_Init+0xe0>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 f941 	bl	80009cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 800074a:	003b      	movs	r3, r7
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 800075c:	003a      	movs	r2, r7
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f000 f931 	bl	80009cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800076a:	003b      	movs	r3, r7
 800076c:	2202      	movs	r2, #2
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000770:	003b      	movs	r3, r7
 8000772:	2201      	movs	r2, #1
 8000774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000776:	003b      	movs	r3, r7
 8000778:	2202      	movs	r2, #2
 800077a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000782:	003b      	movs	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000788:	003a      	movs	r2, r7
 800078a:	23a0      	movs	r3, #160	; 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 f91b 	bl	80009cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000796:	003b      	movs	r3, r7
 8000798:	2220      	movs	r2, #32
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800079c:	003b      	movs	r3, r7
 800079e:	2201      	movs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2202      	movs	r2, #2
 80007a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80007b4:	003a      	movs	r2, r7
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 f905 	bl	80009cc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b006      	add	sp, #24
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	50000800 	.word	0x50000800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	EcuM_SysTickCallBack();
 80007f4:	f000 fc28 	bl	8001048 <EcuM_SysTickCallBack>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800080c:	f7ff fff7 	bl	80007fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000836:	f000 fcd7 	bl	80011e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800083a:	f7ff ff05 	bl	8000648 <main>

0800083e <LoopForever>:

LoopForever:
  b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800084c:	080012c0 	.word	0x080012c0
  ldr r2, =_sbss
 8000850:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000854:	20000050 	.word	0x20000050

08000858 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_COMP_IRQHandler>

0800085a <LL_GPIO_SetPinMode>:
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	435b      	muls	r3, r3
 800086e:	001a      	movs	r2, r3
 8000870:	0013      	movs	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	189b      	adds	r3, r3, r2
 8000876:	43db      	mvns	r3, r3
 8000878:	400b      	ands	r3, r1
 800087a:	001a      	movs	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	435b      	muls	r3, r3
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	434b      	muls	r3, r1
 8000884:	431a      	orrs	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}

08000892 <LL_GPIO_SetPinOutputType>:
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	434b      	muls	r3, r1
 80008ae:	431a      	orrs	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	605a      	str	r2, [r3, #4]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b004      	add	sp, #16
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LL_GPIO_SetPinSpeed>:
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6899      	ldr	r1, [r3, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	435b      	muls	r3, r3
 80008d0:	001a      	movs	r2, r3
 80008d2:	0013      	movs	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	43db      	mvns	r3, r3
 80008da:	400b      	ands	r3, r1
 80008dc:	001a      	movs	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	435b      	muls	r3, r3
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	434b      	muls	r3, r1
 80008e6:	431a      	orrs	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	609a      	str	r2, [r3, #8]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b004      	add	sp, #16
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LL_GPIO_SetPinPull>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	435b      	muls	r3, r3
 8000908:	001a      	movs	r2, r3
 800090a:	0013      	movs	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	189b      	adds	r3, r3, r2
 8000910:	43db      	mvns	r3, r3
 8000912:	400b      	ands	r3, r1
 8000914:	001a      	movs	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	435b      	muls	r3, r3
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	434b      	muls	r3, r1
 800091e:	431a      	orrs	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	60da      	str	r2, [r3, #12]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b004      	add	sp, #16
 800092a:	bd80      	pop	{r7, pc}

0800092c <LL_GPIO_SetAFPin_0_7>:
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6a19      	ldr	r1, [r3, #32]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	435b      	muls	r3, r3
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	4353      	muls	r3, r2
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	435a      	muls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	43db      	mvns	r3, r3
 8000950:	400b      	ands	r3, r1
 8000952:	001a      	movs	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	435b      	muls	r3, r3
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	434b      	muls	r3, r1
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	434b      	muls	r3, r1
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	434b      	muls	r3, r1
 8000964:	431a      	orrs	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	621a      	str	r2, [r3, #32]
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}

08000972 <LL_GPIO_SetAFPin_8_15>:
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	0a12      	lsrs	r2, r2, #8
 800098a:	4353      	muls	r3, r2
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	0a12      	lsrs	r2, r2, #8
 8000990:	4353      	muls	r3, r2
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	0a12      	lsrs	r2, r2, #8
 8000996:	435a      	muls	r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	43db      	mvns	r3, r3
 80009a0:	400b      	ands	r3, r1
 80009a2:	001a      	movs	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	0a09      	lsrs	r1, r1, #8
 80009ac:	434b      	muls	r3, r1
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	0a09      	lsrs	r1, r1, #8
 80009b2:	434b      	muls	r3, r1
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	0a09      	lsrs	r1, r1, #8
 80009b8:	434b      	muls	r3, r1
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	434b      	muls	r3, r1
 80009be:	431a      	orrs	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b004      	add	sp, #16
 80009ca:	bd80      	pop	{r7, pc}

080009cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80009da:	e047      	b.n	8000a6c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4091      	lsls	r1, r2
 80009e6:	000a      	movs	r2, r1
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d039      	beq.n	8000a66 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d003      	beq.n	8000a02 <LL_GPIO_Init+0x36>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d10d      	bne.n	8000a1e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff56 	bl	80008bc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff3a 	bl	8000892 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	691a      	ldr	r2, [r3, #16]
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff64 	bl	80008f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d111      	bne.n	8000a58 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2bff      	cmp	r3, #255	; 0xff
 8000a38:	d807      	bhi.n	8000a4a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff ff72 	bl	800092c <LL_GPIO_SetAFPin_0_7>
 8000a48:	e006      	b.n	8000a58 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff8d 	bl	8000972 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fefa 	bl	800085a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	40da      	lsrs	r2, r3
 8000a74:	1e13      	subs	r3, r2, #0
 8000a76:	d1b1      	bne.n	80009dc <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <LL_RCC_GetSysClkSource>:
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <LL_RCC_GetSysClkSource+0x14>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2238      	movs	r2, #56	; 0x38
 8000a8e:	4013      	ands	r3, r2
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40021000 	.word	0x40021000

08000a9c <LL_RCC_GetAHBPrescaler>:
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <LL_RCC_GetAHBPrescaler+0x14>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	23f0      	movs	r3, #240	; 0xf0
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4013      	ands	r3, r2
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <LL_RCC_GetAPB1Prescaler>:
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	23e0      	movs	r3, #224	; 0xe0
 8000abe:	01db      	lsls	r3, r3, #7
 8000ac0:	4013      	ands	r3, r2
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_PLL_GetN>:
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <LL_RCC_PLL_GetN+0x14>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	227f      	movs	r2, #127	; 0x7f
 8000ad8:	4013      	ands	r3, r2
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_RCC_PLL_GetR>:
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <LL_RCC_PLL_GetR+0x14>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0f5b      	lsrs	r3, r3, #29
 8000aee:	075b      	lsls	r3, r3, #29
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <LL_RCC_PLL_GetMainSource>:
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <LL_RCC_PLL_GetMainSource+0x14>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4013      	ands	r3, r2
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000

08000b14 <LL_RCC_PLL_GetDivider>:
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <LL_RCC_PLL_GetDivider+0x14>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2270      	movs	r2, #112	; 0x70
 8000b1e:	4013      	ands	r3, r2
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40021000 	.word	0x40021000

08000b2c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b34:	f000 f818 	bl	8000b68 <RCC_GetSystemClockFreq>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f83e 	bl	8000bc4 <RCC_GetHCLKClockFreq>
 8000b48:	0002      	movs	r2, r0
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f84e 	bl	8000bf4 <RCC_GetPCLK1ClockFreq>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b6e:	f7ff ff89 	bl	8000a84 <LL_RCC_GetSysClkSource>
 8000b72:	0003      	movs	r3, r0
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d002      	beq.n	8000b7e <RCC_GetSystemClockFreq+0x16>
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d003      	beq.n	8000b84 <RCC_GetSystemClockFreq+0x1c>
 8000b7c:	e007      	b.n	8000b8e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <RCC_GetSystemClockFreq+0x50>)
 8000b80:	607b      	str	r3, [r7, #4]
      break;
 8000b82:	e014      	b.n	8000bae <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b84:	f000 f84c 	bl	8000c20 <RCC_PLL_GetFreqDomain_SYS>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	607b      	str	r3, [r7, #4]
      break;
 8000b8c:	e00f      	b.n	8000bae <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <RCC_GetSystemClockFreq+0x54>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0adb      	lsrs	r3, r3, #11
 8000b94:	2207      	movs	r2, #7
 8000b96:	4013      	ands	r3, r2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <RCC_GetSystemClockFreq+0x58>)
 8000ba4:	f7ff faae 	bl	8000104 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	607b      	str	r3, [r7, #4]
      break;
 8000bac:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	007a1200 	.word	0x007a1200
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	00f42400 	.word	0x00f42400

08000bc4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000bcc:	f7ff ff66 	bl	8000a9c <LL_RCC_GetAHBPrescaler>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <RCC_GetHCLKClockFreq+0x2c>)
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	58d3      	ldr	r3, [r2, r3]
 8000bde:	221f      	movs	r2, #31
 8000be0:	4013      	ands	r3, r2
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	40da      	lsrs	r2, r3
 8000be6:	0013      	movs	r3, r2
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08001258 	.word	0x08001258

08000bf4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000bfc:	f7ff ff5a 	bl	8000ab4 <LL_RCC_GetAPB1Prescaler>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0b1a      	lsrs	r2, r3, #12
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <RCC_GetPCLK1ClockFreq+0x28>)
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	58d3      	ldr	r3, [r2, r3]
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	40da      	lsrs	r2, r3
 8000c12:	0013      	movs	r3, r2
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08001298 	.word	0x08001298

08000c20 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000c26:	f7ff ff69 	bl	8000afc <LL_RCC_PLL_GetMainSource>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d003      	beq.n	8000c3c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d003      	beq.n	8000c42 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8000c3a:	e005      	b.n	8000c48 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000c3e:	607b      	str	r3, [r7, #4]
      break;
 8000c40:	e005      	b.n	8000c4e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8000c44:	607b      	str	r3, [r7, #4]
      break;
 8000c46:	e002      	b.n	8000c4e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000c4a:	607b      	str	r3, [r7, #4]
      break;
 8000c4c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000c4e:	f7ff ff3d 	bl	8000acc <LL_RCC_PLL_GetN>
 8000c52:	0002      	movs	r2, r0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4353      	muls	r3, r2
 8000c58:	001c      	movs	r4, r3
 8000c5a:	f7ff ff5b 	bl	8000b14 <LL_RCC_PLL_GetDivider>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	3301      	adds	r3, #1
 8000c64:	0019      	movs	r1, r3
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fa4c 	bl	8000104 <__udivsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	001c      	movs	r4, r3
 8000c70:	f7ff ff38 	bl	8000ae4 <LL_RCC_PLL_GetR>
 8000c74:	0003      	movs	r3, r0
 8000c76:	0f5b      	lsrs	r3, r3, #29
 8000c78:	3301      	adds	r3, #1
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	0020      	movs	r0, r4
 8000c7e:	f7ff fa41 	bl	8000104 <__udivsi3>
 8000c82:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	00f42400 	.word	0x00f42400
 8000c90:	007a1200 	.word	0x007a1200

08000c94 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fa2f 	bl	8000104 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	001a      	movs	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LL_InitTick+0x30>)
 8000cac:	3a01      	subs	r2, #1
 8000cae:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <LL_InitTick+0x30>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <LL_InitTick+0x30>)
 8000cb8:	2205      	movs	r2, #5
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000cd0:	23fa      	movs	r3, #250	; 0xfa
 8000cd2:	009a      	lsls	r2, r3, #2
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ffdb 	bl	8000c94 <LL_InitTick>
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <LL_SetSystemCoreClock+0x18>)
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000000 	.word	0x20000000

08000d04 <LL_GPIO_IsInputPinSet>:
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4013      	ands	r3, r2
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d101      	bne.n	8000d20 <LL_GPIO_IsInputPinSet+0x1c>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <LL_GPIO_IsInputPinSet+0x1e>
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <ButtonDrv_Init>:

ButtonConfig buttonConfig;


void ButtonDrv_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	buttonConfig.u16IdBtn = 1;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <ButtonDrv_Init+0x24>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	801a      	strh	r2, [r3, #0]
	buttonConfig.Port = USER_BTN_GPIO_Port;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <ButtonDrv_Init+0x24>)
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <ButtonDrv_Init+0x28>)
 8000d3a:	605a      	str	r2, [r3, #4]
	buttonConfig.Pin = USER_BTN_Pin;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <ButtonDrv_Init+0x24>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	0192      	lsls	r2, r2, #6
 8000d42:	609a      	str	r2, [r3, #8]

	ru32_SysClickBtn = 0;
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <ButtonDrv_Init+0x2c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000002c 	.word	0x2000002c
 8000d54:	50000800 	.word	0x50000800
 8000d58:	20000020 	.word	0x20000020

08000d5c <SetPeriod>:


void SetPeriod(uint16_t StateBtn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	0002      	movs	r2, r0
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	801a      	strh	r2, [r3, #0]
	if (ru16_StateBtn == SET)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <SetPeriod+0x5c>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10c      	bne.n	8000d8a <SetPeriod+0x2e>
	{
		ChangeButtonVallue(buttonConfig.u16IdBtn, ru32_SysClickBtn);
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <SetPeriod+0x60>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <SetPeriod+0x64>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	f000 f83d 	bl	8000dfc <ChangeButtonVallue>
		contor = 1;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <SetPeriod+0x68>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
			ru32_SysClickBtn = 0;
			contor = 0;
		}
		ru32_SysClickBtn++;
	}
}
 8000d88:	e012      	b.n	8000db0 <SetPeriod+0x54>
	else if (ru16_StateBtn == RESET)
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SetPeriod+0x5c>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10e      	bne.n	8000db0 <SetPeriod+0x54>
		if (contor == 1) {
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <SetPeriod+0x68>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d105      	bne.n	8000da6 <SetPeriod+0x4a>
			ru32_SysClickBtn = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <SetPeriod+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
			contor = 0;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SetPeriod+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
		ru32_SysClickBtn++;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SetPeriod+0x64>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SetPeriod+0x64>)
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000024 	.word	0x20000024
 8000dbc:	2000002c 	.word	0x2000002c
 8000dc0:	20000020 	.word	0x20000020
 8000dc4:	20000028 	.word	0x20000028

08000dc8 <ButtonDrv_MainFunction>:

void ButtonDrv_MainFunction()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	ru16_StateBtn = LL_GPIO_IsInputPinSet(buttonConfig.Port, buttonConfig.Pin);
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <ButtonDrv_MainFunction+0x2c>)
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <ButtonDrv_MainFunction+0x2c>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	f7ff ff94 	bl	8000d04 <LL_GPIO_IsInputPinSet>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <ButtonDrv_MainFunction+0x30>)
 8000de2:	801a      	strh	r2, [r3, #0]

	SetPeriod(ru16_StateBtn);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <ButtonDrv_MainFunction+0x30>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ffb7 	bl	8000d5c <SetPeriod>
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	20000024 	.word	0x20000024

08000dfc <ChangeButtonVallue>:

void ChangeButtonVallue(uint16_t u16IdBtn, uint32_t u32Tick)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	0002      	movs	r2, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	1dbb      	adds	r3, r7, #6
 8000e08:	801a      	strh	r2, [r3, #0]
	if (1 <= u32Tick && u32Tick <= 500)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d011      	beq.n	8000e34 <ChangeButtonVallue+0x38>
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	23fa      	movs	r3, #250	; 0xfa
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d80c      	bhi.n	8000e34 <ChangeButtonVallue+0x38>
	{
		u16BtnSetPeriod = 1;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(ButtonON, u16IdBtn, u16BtnSetPeriod);
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	8819      	ldrh	r1, [r3, #0]
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f94d 	bl	80010cc <f_ConfigValueSet>
 8000e32:	e053      	b.n	8000edc <ChangeButtonVallue+0xe0>
	}
	else if (500 <= u32Tick && u32Tick <= 1000)
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	23fa      	movs	r3, #250	; 0xfa
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d311      	bcc.n	8000e62 <ChangeButtonVallue+0x66>
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	23fa      	movs	r3, #250	; 0xfa
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d80c      	bhi.n	8000e62 <ChangeButtonVallue+0x66>
	{
		u16BtnSetPeriod = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(ButtonON, u16IdBtn, u16BtnSetPeriod);
 8000e4e:	1dbb      	adds	r3, r7, #6
 8000e50:	8819      	ldrh	r1, [r3, #0]
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 f936 	bl	80010cc <f_ConfigValueSet>
 8000e60:	e03c      	b.n	8000edc <ChangeButtonVallue+0xe0>
	}
	else if (1000 <= u32Tick && u32Tick <= 2000)
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	23fa      	movs	r3, #250	; 0xfa
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d311      	bcc.n	8000e90 <ChangeButtonVallue+0x94>
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	23fa      	movs	r3, #250	; 0xfa
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d80c      	bhi.n	8000e90 <ChangeButtonVallue+0x94>
	{
		u16BtnSetPeriod = 5;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e78:	2205      	movs	r2, #5
 8000e7a:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(ButtonON, u16IdBtn, u16BtnSetPeriod);
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	8819      	ldrh	r1, [r3, #0]
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	001a      	movs	r2, r3
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 f91f 	bl	80010cc <f_ConfigValueSet>
 8000e8e:	e025      	b.n	8000edc <ChangeButtonVallue+0xe0>
	}

	else if (2000 <= u32Tick && u32Tick <= 3000)
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	23fa      	movs	r3, #250	; 0xfa
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d310      	bcc.n	8000ebc <ChangeButtonVallue+0xc0>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <ChangeButtonVallue+0xec>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d80c      	bhi.n	8000ebc <ChangeButtonVallue+0xc0>
	{
		u16BtnSetPeriod = 10;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(ButtonON, u16IdBtn, u16BtnSetPeriod);
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	8819      	ldrh	r1, [r3, #0]
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 f909 	bl	80010cc <f_ConfigValueSet>
 8000eba:	e00f      	b.n	8000edc <ChangeButtonVallue+0xe0>
	}
	else
	{
		ru32_SysClickBtn = 0;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <ChangeButtonVallue+0xf0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
		u16BtnSetPeriod = 0;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(ButtonOFF, u16IdBtn, u16BtnSetPeriod);
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	8819      	ldrh	r1, [r3, #0]
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <ChangeButtonVallue+0xe8>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f8f9 	bl	80010cc <f_ConfigValueSet>
	}
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000026 	.word	0x20000026
 8000ee8:	00000bb8 	.word	0x00000bb8
 8000eec:	20000020 	.word	0x20000020

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d828      	bhi.n	8000f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <__NVIC_SetPriority+0xd4>)
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	33c0      	adds	r3, #192	; 0xc0
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	589b      	ldr	r3, [r3, r2]
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	400a      	ands	r2, r1
 8000f20:	00d2      	lsls	r2, r2, #3
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	4091      	lsls	r1, r2
 8000f26:	000a      	movs	r2, r1
 8000f28:	43d2      	mvns	r2, r2
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	019b      	lsls	r3, r3, #6
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	401a      	ands	r2, r3
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	4003      	ands	r3, r0
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <__NVIC_SetPriority+0xd4>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	33c0      	adds	r3, #192	; 0xc0
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f56:	e031      	b.n	8000fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <__NVIC_SetPriority+0xd8>)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0019      	movs	r1, r3
 8000f60:	230f      	movs	r3, #15
 8000f62:	400b      	ands	r3, r1
 8000f64:	3b08      	subs	r3, #8
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3306      	adds	r3, #6
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	18d3      	adds	r3, r2, r3
 8000f6e:	3304      	adds	r3, #4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1dfa      	adds	r2, r7, #7
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	0011      	movs	r1, r2
 8000f78:	2203      	movs	r2, #3
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	21ff      	movs	r1, #255	; 0xff
 8000f80:	4091      	lsls	r1, r2
 8000f82:	000a      	movs	r2, r1
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	401a      	ands	r2, r3
 8000f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	22ff      	movs	r2, #255	; 0xff
 8000f90:	401a      	ands	r2, r3
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	0018      	movs	r0, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4003      	ands	r3, r0
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <__NVIC_SetPriority+0xd8>)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001c      	movs	r4, r3
 8000fa8:	230f      	movs	r3, #15
 8000faa:	4023      	ands	r3, r4
 8000fac:	3b08      	subs	r3, #8
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	3306      	adds	r3, #6
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	18c3      	adds	r3, r0, r3
 8000fb8:	3304      	adds	r3, #4
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	045b      	lsls	r3, r3, #17
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d301      	bcc.n	8000fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e010      	b.n	8001006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SysTick_Config+0x44>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	3a01      	subs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff ff7c 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x44>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x44>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	e000e010 	.word	0xe000e010

08001014 <EcuM_0>:

void EcuM_Init(void);
void EcuM_MainFunction(void);

void EcuM_0(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	EcuM_Init();
 8001018:	f000 f82c 	bl	8001074 <EcuM_Init>
	ButtonDrv_Init();
 800101c:	f7ff fe86 	bl	8000d2c <ButtonDrv_Init>
	LedDrv_Init();
 8001020:	f000 f847 	bl	80010b2 <LedDrv_Init>
	while(1)
	{
		if (ru32_OldSysTick != ru32_SysTick)
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <EcuM_0+0x2c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <EcuM_0+0x30>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d0f9      	beq.n	8001024 <EcuM_0+0x10>
		{
			EcuM_MainFunction();
 8001030:	f000 f836 	bl	80010a0 <EcuM_MainFunction>
			ru32_OldSysTick = ru32_SysTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <EcuM_0+0x30>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b01      	ldr	r3, [pc, #4]	; (8001040 <EcuM_0+0x2c>)
 800103a:	601a      	str	r2, [r3, #0]
		if (ru32_OldSysTick != ru32_SysTick)
 800103c:	e7f2      	b.n	8001024 <EcuM_0+0x10>
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	2000003c 	.word	0x2000003c
 8001044:	20000038 	.word	0x20000038

08001048 <EcuM_SysTickCallBack>:
		}
	}
}

void EcuM_SysTickCallBack(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	ru32_SysTick++;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <EcuM_SysTickCallBack+0x24>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <EcuM_SysTickCallBack+0x24>)
 8001054:	601a      	str	r2, [r3, #0]
	if(ru32_SysTick == 10000)
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <EcuM_SysTickCallBack+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <EcuM_SysTickCallBack+0x28>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d102      	bne.n	8001066 <EcuM_SysTickCallBack+0x1e>
	{
		ru32_SysTick = 0;
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <EcuM_SysTickCallBack+0x24>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	}
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000038 	.word	0x20000038
 8001070:	00002710 	.word	0x00002710

08001074 <EcuM_Init>:

void EcuM_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff fd55 	bl	8000b2c <LL_RCC_GetSystemClocksFreq>
	SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	22fa      	movs	r2, #250	; 0xfa
 8001088:	0091      	lsls	r1, r2, #2
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff f83a 	bl	8000104 <__udivsi3>
 8001090:	0003      	movs	r3, r0
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff ff9a 	bl	8000fcc <SysTick_Config>
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <EcuM_MainFunction>:


void EcuM_MainFunction(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	ButtonDrv_MainFunction();
 80010a4:	f7ff fe90 	bl	8000dc8 <ButtonDrv_MainFunction>
	LedDrv_MainFunction();
 80010a8:	f000 f828 	bl	80010fc <LedDrv_MainFunction>
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LedDrv_Init>:


LedConfig ledConfig;

void LedDrv_Init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
	LED_GREEN_GPIO_Port ->BRR = LED_GREEN_Pin;
 80010b6:	23a0      	movs	r3, #160	; 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	2220      	movs	r2, #32
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
	LED_RED_GPIO_Port ->BRR = LED_RED_Pin;
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	2202      	movs	r2, #2
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28

}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <f_ConfigValueSet>:

void f_ConfigValueSet(unsigned int u16Sts,unsigned int u16Id, unsigned int u16Period)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	ledConfig.u16LedId = u16Id;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <f_ConfigValueSet+0x2c>)
 80010de:	805a      	strh	r2, [r3, #2]
	ledConfig.u16LedSts = u16Sts;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <f_ConfigValueSet+0x2c>)
 80010e6:	801a      	strh	r2, [r3, #0]
	ledConfig.u16LedPeriod = u16Period;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <f_ConfigValueSet+0x2c>)
 80010ee:	809a      	strh	r2, [r3, #4]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000048 	.word	0x20000048

080010fc <LedDrv_MainFunction>:

void LedDrv_MainFunction(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	if(ledConfig.u16LedSts != 0u)
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <LedDrv_MainFunction+0xe0>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d05b      	beq.n	80011c2 <LedDrv_MainFunction+0xc6>
	{
		if (ledConfig.u16LedId == 2)
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <LedDrv_MainFunction+0xe0>)
 800110c:	885b      	ldrh	r3, [r3, #2]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d129      	bne.n	8001166 <LedDrv_MainFunction+0x6a>
		{
			uLedBlink = 1000 / ledConfig.u16LedPeriod;
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <LedDrv_MainFunction+0xe0>)
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	0019      	movs	r1, r3
 8001118:	23fa      	movs	r3, #250	; 0xfa
 800111a:	0098      	lsls	r0, r3, #2
 800111c:	f7ff f87c 	bl	8000218 <__divsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	001a      	movs	r2, r3
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <LedDrv_MainFunction+0xe4>)
 8001126:	601a      	str	r2, [r3, #0]
			if(uLedBlink <= ru32_LedTimer++)
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c59      	adds	r1, r3, #1
 800112e:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 8001130:	6011      	str	r1, [r2, #0]
 8001132:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <LedDrv_MainFunction+0xe4>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4293      	cmp	r3, r2
 8001138:	d34b      	bcc.n	80011d2 <LedDrv_MainFunction+0xd6>
			{
				uint32_t odr = READ_REG(LED_RED_GPIO_Port->ODR);
 800113a:	23a0      	movs	r3, #160	; 0xa0
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	603b      	str	r3, [r7, #0]
				WRITE_REG(LED_RED_GPIO_Port->BSRR, ((odr & LED_RED_Pin) << 16u) | (~odr & LED_RED_Pin));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	401a      	ands	r2, r3
 800114c:	0011      	movs	r1, r2
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	43db      	mvns	r3, r3
 8001152:	2202      	movs	r2, #2
 8001154:	401a      	ands	r2, r3
 8001156:	23a0      	movs	r3, #160	; 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	430a      	orrs	r2, r1
 800115c:	619a      	str	r2, [r3, #24]
				ru32_LedTimer = 0u;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
	else
	{
		LED_GREEN_GPIO_Port ->BRR = LED_GREEN_Pin;
		LED_RED_GPIO_Port ->BRR = LED_RED_Pin;
	}
}
 8001164:	e035      	b.n	80011d2 <LedDrv_MainFunction+0xd6>
		else if (ledConfig.u16LedId == 1)
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <LedDrv_MainFunction+0xe0>)
 8001168:	885b      	ldrh	r3, [r3, #2]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d131      	bne.n	80011d2 <LedDrv_MainFunction+0xd6>
			uLedBlink = 1000 / ledConfig.u16LedPeriod;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <LedDrv_MainFunction+0xe0>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	0019      	movs	r1, r3
 8001174:	23fa      	movs	r3, #250	; 0xfa
 8001176:	0098      	lsls	r0, r3, #2
 8001178:	f7ff f84e 	bl	8000218 <__divsi3>
 800117c:	0003      	movs	r3, r0
 800117e:	001a      	movs	r2, r3
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <LedDrv_MainFunction+0xe4>)
 8001182:	601a      	str	r2, [r3, #0]
			if(uLedBlink <= ru32_LedTimer++)
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1c59      	adds	r1, r3, #1
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 800118c:	6011      	str	r1, [r2, #0]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <LedDrv_MainFunction+0xe4>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d31d      	bcc.n	80011d2 <LedDrv_MainFunction+0xd6>
				uint32_t odr = READ_REG(LED_GREEN_GPIO_Port->ODR);
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	607b      	str	r3, [r7, #4]
				WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	039b      	lsls	r3, r3, #14
 80011a6:	401a      	ands	r2, r3
 80011a8:	0011      	movs	r1, r2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	2220      	movs	r2, #32
 80011b0:	401a      	ands	r2, r3
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	430a      	orrs	r2, r1
 80011b8:	619a      	str	r2, [r3, #24]
				ru32_LedTimer = 0u;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <LedDrv_MainFunction+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	e007      	b.n	80011d2 <LedDrv_MainFunction+0xd6>
		LED_GREEN_GPIO_Port ->BRR = LED_GREEN_Pin;
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2220      	movs	r2, #32
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
		LED_RED_GPIO_Port ->BRR = LED_RED_Pin;
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2202      	movs	r2, #2
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000048 	.word	0x20000048
 80011e0:	20000044 	.word	0x20000044
 80011e4:	20000040 	.word	0x20000040

080011e8 <__libc_init_array>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	2600      	movs	r6, #0
 80011ec:	4d0c      	ldr	r5, [pc, #48]	; (8001220 <__libc_init_array+0x38>)
 80011ee:	4c0d      	ldr	r4, [pc, #52]	; (8001224 <__libc_init_array+0x3c>)
 80011f0:	1b64      	subs	r4, r4, r5
 80011f2:	10a4      	asrs	r4, r4, #2
 80011f4:	42a6      	cmp	r6, r4
 80011f6:	d109      	bne.n	800120c <__libc_init_array+0x24>
 80011f8:	2600      	movs	r6, #0
 80011fa:	f000 f821 	bl	8001240 <_init>
 80011fe:	4d0a      	ldr	r5, [pc, #40]	; (8001228 <__libc_init_array+0x40>)
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <__libc_init_array+0x44>)
 8001202:	1b64      	subs	r4, r4, r5
 8001204:	10a4      	asrs	r4, r4, #2
 8001206:	42a6      	cmp	r6, r4
 8001208:	d105      	bne.n	8001216 <__libc_init_array+0x2e>
 800120a:	bd70      	pop	{r4, r5, r6, pc}
 800120c:	00b3      	lsls	r3, r6, #2
 800120e:	58eb      	ldr	r3, [r5, r3]
 8001210:	4798      	blx	r3
 8001212:	3601      	adds	r6, #1
 8001214:	e7ee      	b.n	80011f4 <__libc_init_array+0xc>
 8001216:	00b3      	lsls	r3, r6, #2
 8001218:	58eb      	ldr	r3, [r5, r3]
 800121a:	4798      	blx	r3
 800121c:	3601      	adds	r6, #1
 800121e:	e7f2      	b.n	8001206 <__libc_init_array+0x1e>
 8001220:	080012b8 	.word	0x080012b8
 8001224:	080012b8 	.word	0x080012b8
 8001228:	080012b8 	.word	0x080012b8
 800122c:	080012bc 	.word	0x080012bc

08001230 <memset>:
 8001230:	0003      	movs	r3, r0
 8001232:	1882      	adds	r2, r0, r2
 8001234:	4293      	cmp	r3, r2
 8001236:	d100      	bne.n	800123a <memset+0xa>
 8001238:	4770      	bx	lr
 800123a:	7019      	strb	r1, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	e7f9      	b.n	8001234 <memset+0x4>

08001240 <_init>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001246:	bc08      	pop	{r3}
 8001248:	469e      	mov	lr, r3
 800124a:	4770      	bx	lr

0800124c <_fini>:
 800124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001252:	bc08      	pop	{r3}
 8001254:	469e      	mov	lr, r3
 8001256:	4770      	bx	lr
