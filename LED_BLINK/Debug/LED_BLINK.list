
LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e28  08003e28  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e28  08003e28  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e28  08003e28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08003ea0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003ea0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b52  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c8  00000000  00000000  00029bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b81a  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2fa  00000000  00000000  0004916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a234f  00000000  00000000  00058464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa7b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dbc  00000000  00000000  000fa804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d2c 	.word	0x08003d2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003d2c 	.word	0x08003d2c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b7f      	cmp	r3, #127	; 0x7f
 8000416:	d809      	bhi.n	800042c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	001a      	movs	r2, r3
 800041e:	231f      	movs	r3, #31
 8000420:	401a      	ands	r2, r3
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <__NVIC_EnableIRQ+0x30>)
 8000424:	2101      	movs	r1, #1
 8000426:	4091      	lsls	r1, r2
 8000428:	000a      	movs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}
 8000434:	e000e100 	.word	0xe000e100

08000438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b7f      	cmp	r3, #127	; 0x7f
 800044c:	d828      	bhi.n	80004a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800044e:	4a2f      	ldr	r2, [pc, #188]	; (800050c <__NVIC_SetPriority+0xd4>)
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	089b      	lsrs	r3, r3, #2
 8000458:	33c0      	adds	r3, #192	; 0xc0
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	589b      	ldr	r3, [r3, r2]
 800045e:	1dfa      	adds	r2, r7, #7
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	0011      	movs	r1, r2
 8000464:	2203      	movs	r2, #3
 8000466:	400a      	ands	r2, r1
 8000468:	00d2      	lsls	r2, r2, #3
 800046a:	21ff      	movs	r1, #255	; 0xff
 800046c:	4091      	lsls	r1, r2
 800046e:	000a      	movs	r2, r1
 8000470:	43d2      	mvns	r2, r2
 8000472:	401a      	ands	r2, r3
 8000474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	019b      	lsls	r3, r3, #6
 800047a:	22ff      	movs	r2, #255	; 0xff
 800047c:	401a      	ands	r2, r3
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	0018      	movs	r0, r3
 8000484:	2303      	movs	r3, #3
 8000486:	4003      	ands	r3, r0
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048c:	481f      	ldr	r0, [pc, #124]	; (800050c <__NVIC_SetPriority+0xd4>)
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b25b      	sxtb	r3, r3
 8000494:	089b      	lsrs	r3, r3, #2
 8000496:	430a      	orrs	r2, r1
 8000498:	33c0      	adds	r3, #192	; 0xc0
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800049e:	e031      	b.n	8000504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <__NVIC_SetPriority+0xd8>)
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	0019      	movs	r1, r3
 80004a8:	230f      	movs	r3, #15
 80004aa:	400b      	ands	r3, r1
 80004ac:	3b08      	subs	r3, #8
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	3306      	adds	r3, #6
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	18d3      	adds	r3, r2, r3
 80004b6:	3304      	adds	r3, #4
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	1dfa      	adds	r2, r7, #7
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	0011      	movs	r1, r2
 80004c0:	2203      	movs	r2, #3
 80004c2:	400a      	ands	r2, r1
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	21ff      	movs	r1, #255	; 0xff
 80004c8:	4091      	lsls	r1, r2
 80004ca:	000a      	movs	r2, r1
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	401a      	ands	r2, r3
 80004d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	019b      	lsls	r3, r3, #6
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	401a      	ands	r2, r3
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	0018      	movs	r0, r3
 80004e0:	2303      	movs	r3, #3
 80004e2:	4003      	ands	r3, r0
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <__NVIC_SetPriority+0xd8>)
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	001c      	movs	r4, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4023      	ands	r3, r4
 80004f4:	3b08      	subs	r3, #8
 80004f6:	089b      	lsrs	r3, r3, #2
 80004f8:	430a      	orrs	r2, r1
 80004fa:	3306      	adds	r3, #6
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	18c3      	adds	r3, r0, r3
 8000500:	3304      	adds	r3, #4
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b003      	add	sp, #12
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_HSI_Enable+0x18>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <LL_RCC_HSI_Enable+0x18>)
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0049      	lsls	r1, r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <LL_RCC_HSI_IsReady+0x24>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	401a      	ands	r2, r3
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	429a      	cmp	r2, r3
 8000544:	d101      	bne.n	800054a <LL_RCC_HSI_IsReady+0x1a>
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <LL_RCC_HSI_IsReady+0x1c>
 800054a:	2300      	movs	r3, #0
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_SetSysClkSource+0x24>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	2207      	movs	r2, #7
 8000566:	4393      	bics	r3, r2
 8000568:	0019      	movs	r1, r3
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_RCC_SetSysClkSource+0x24>)
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	430a      	orrs	r2, r1
 8000570:	609a      	str	r2, [r3, #8]
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <LL_RCC_GetSysClkSource+0x14>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	2238      	movs	r2, #56	; 0x38
 800058a:	4013      	ands	r3, r2
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAHBPrescaler+0x24>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <LL_RCC_SetAHBPrescaler+0x28>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	0019      	movs	r1, r3
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_SetAHBPrescaler+0x24>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	609a      	str	r2, [r3, #8]
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000
 80005c0:	fffff0ff 	.word	0xfffff0ff

080005c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <LL_RCC_SetAPB1Prescaler+0x28>)
 80005d2:	4013      	ands	r3, r2
 80005d4:	0019      	movs	r1, r3
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	609a      	str	r2, [r3, #8]
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000
 80005ec:	ffff8fff 	.word	0xffff8fff

080005f0 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_RCC_SetUSARTClockSource+0x2c>)
 80005fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	0c12      	lsrs	r2, r2, #16
 8000600:	43d2      	mvns	r2, r2
 8000602:	401a      	ands	r2, r3
 8000604:	0011      	movs	r1, r2
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c1a      	lsrs	r2, r3, #16
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <LL_RCC_SetUSARTClockSource+0x2c>)
 800060e:	430a      	orrs	r2, r1
 8000610:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <LL_RCC_PLL_Enable+0x18>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <LL_RCC_PLL_Enable+0x18>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0449      	lsls	r1, r1, #17
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <LL_RCC_PLL_IsReady+0x24>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	049b      	lsls	r3, r3, #18
 8000648:	401a      	ands	r2, r3
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	049b      	lsls	r3, r3, #18
 800064e:	429a      	cmp	r2, r3
 8000650:	d101      	bne.n	8000656 <LL_RCC_PLL_IsReady+0x1a>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <LL_RCC_PLL_IsReady+0x1c>
 8000656:	2300      	movs	r3, #0
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000678:	4013      	ands	r3, r2
 800067a:	0019      	movs	r1, r3
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	431a      	orrs	r2, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	431a      	orrs	r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000
 80006a0:	1fff808c 	.word	0x1fff808c

080006a4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80006aa:	68da      	ldr	r2, [r3, #12]
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0549      	lsls	r1, r1, #21
 80006b2:	430a      	orrs	r2, r1
 80006b4:	60da      	str	r2, [r3, #12]
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80006ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <LL_IOP_GRP1_EnableClock+0x28>)
 80006f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <LL_IOP_GRP1_EnableClock+0x28>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_IOP_GRP1_EnableClock+0x28>)
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <LL_FLASH_SetLatency+0x24>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2207      	movs	r2, #7
 8000726:	4393      	bics	r3, r2
 8000728:	0019      	movs	r1, r3
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <LL_FLASH_SetLatency+0x24>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40022000 	.word	0x40022000

08000740 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <LL_FLASH_GetLatency+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2207      	movs	r2, #7
 800074a:	4013      	ands	r3, r2
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40022000 	.word	0x40022000

08000758 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2201      	movs	r2, #1
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}

08000774 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <LL_USART_DisableFIFO+0x1c>)
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	dfffffff 	.word	0xdfffffff

08000794 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800079e:	f3ef 8310 	mrs	r3, PRIMASK
 80007a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80007a4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f383 8810 	msr	PRIMASK, r3
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	075b      	lsls	r3, r3, #29
 80007c0:	431a      	orrs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	f383 8810 	msr	PRIMASK, r3
}
 80007d0:	46c0      	nop			; (mov r8, r8)
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b006      	add	sp, #24
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80007e6:	f3ef 8310 	mrs	r3, PRIMASK
 80007ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80007ec:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	2301      	movs	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f383 8810 	msr	PRIMASK, r3
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a08      	ldr	r2, [pc, #32]	; (8000824 <LL_USART_SetRXFIFOThreshold+0x48>)
 8000802:	401a      	ands	r2, r3
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	065b      	lsls	r3, r3, #25
 8000808:	431a      	orrs	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	f383 8810 	msr	PRIMASK, r3
}
 8000818:	46c0      	nop			; (mov r8, r8)
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b006      	add	sp, #24
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	f1ffffff 	.word	0xf1ffffff

08000828 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <LL_USART_ConfigAsyncMode+0x2c>)
 8000836:	401a      	ands	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	222a      	movs	r2, #42	; 0x2a
 8000842:	4393      	bics	r3, r2
 8000844:	001a      	movs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	609a      	str	r2, [r3, #8]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	ffffb7ff 	.word	0xffffb7ff

08000858 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	69da      	ldr	r2, [r3, #28]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	401a      	ands	r2, r3
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	039b      	lsls	r3, r3, #14
 800086e:	429a      	cmp	r2, r3
 8000870:	d101      	bne.n	8000876 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}

08000880 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69da      	ldr	r2, [r3, #28]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	03db      	lsls	r3, r3, #15
 8000890:	401a      	ands	r2, r3
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	03db      	lsls	r3, r3, #15
 8000896:	429a      	cmp	r2, r3
 8000898:	d101      	bne.n	800089e <LL_USART_IsActiveFlag_REACK+0x1e>
 800089a:	2301      	movs	r3, #1
 800089c:	e000      	b.n	80008a0 <LL_USART_IsActiveFlag_REACK+0x20>
 800089e:	2300      	movs	r3, #0
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fab2 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f80a 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f958 	bl	8000b80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008d0:	f000 f8b4 	bl	8000a3c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80008d4:	f000 f848 	bl	8000968 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  EcuM_0();
 80008d8:	f001 ff86 	bl	80027e8 <EcuM_0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x1c>
	...

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff ff17 	bl	8000718 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	f7ff ff28 	bl	8000740 <LL_FLASH_GetLatency>
 80008f0:	0003      	movs	r3, r0
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d1fa      	bne.n	80008ec <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80008f6:	f7ff fe0d 	bl	8000514 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	f7ff fe18 	bl	8000530 <LL_RCC_HSI_IsReady>
 8000900:	0003      	movs	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1fa      	bne.n	80008fc <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	059b      	lsls	r3, r3, #22
 800090a:	2208      	movs	r2, #8
 800090c:	2100      	movs	r1, #0
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff fea8 	bl	8000664 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000914:	f7ff fe84 	bl	8000620 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000918:	f7ff fec4 	bl	80006a4 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	f7ff fe8d 	bl	800063c <LL_RCC_PLL_IsReady>
 8000922:	0003      	movs	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d1fa      	bne.n	800091e <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fe35 	bl	8000598 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe12 	bl	8000558 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	f7ff fe23 	bl	8000580 <LL_RCC_GetSysClkSource>
 800093a:	0003      	movs	r3, r0
 800093c:	2b10      	cmp	r3, #16
 800093e:	d1fa      	bne.n	8000936 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe3f 	bl	80005c4 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SystemClock_Config+0x84>)
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fd97 	bl	800247c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fa8c 	bl	8000e6c <HAL_InitTick>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000958:	f000 f974 	bl	8000c44 <Error_Handler>
  }
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	03d09000 	.word	0x03d09000

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	0018      	movs	r0, r3
 8000972:	230c      	movs	r3, #12
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fd66 	bl	8003448 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_ADC1_Init+0xd0>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	05d2      	lsls	r2, r2, #23
 8000988:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800099e:	2204      	movs	r2, #4
 80009a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009d0:	222c      	movs	r2, #44	; 0x2c
 80009d2:	2100      	movs	r1, #0
 80009d4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009ea:	223c      	movs	r2, #60	; 0x3c
 80009ec:	2100      	movs	r1, #0
 80009ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fb91 	bl	8001120 <HAL_ADC_Init>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a02:	f000 f91f 	bl	8000c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	1d3a      	adds	r2, r7, #4
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd26 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000a28:	f000 f90c 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b004      	add	sp, #16
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000008c 	.word	0x2000008c
 8000a38:	40012400 	.word	0x40012400

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08f      	sub	sp, #60	; 0x3c
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a42:	2418      	movs	r4, #24
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2320      	movs	r3, #32
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f002 fcfb 	bl	8003448 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	003b      	movs	r3, r7
 8000a54:	0018      	movs	r0, r3
 8000a56:	2318      	movs	r3, #24
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fcf4 	bl	8003448 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000a60:	23c0      	movs	r3, #192	; 0xc0
 8000a62:	029b      	lsls	r3, r3, #10
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fdc3 	bl	80005f0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	01db      	lsls	r3, r3, #7
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fe26 	bl	80006c0 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000a74:	2004      	movs	r0, #4
 8000a76:	f7ff fe39 	bl	80006ec <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2210      	movs	r2, #16
 8000a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2202      	movs	r2, #2
 8000a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	4a35      	ldr	r2, [pc, #212]	; (8000b78 <MX_USART1_UART_Init+0x13c>)
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	f001 f98c 	bl	8001dc2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2220      	movs	r2, #32
 8000aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2201      	movs	r2, #1
 8000acc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	003b      	movs	r3, r7
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <MX_USART1_UART_Init+0x13c>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f001 f974 	bl	8001dc2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	201b      	movs	r0, #27
 8000ade:	f7ff fcab 	bl	8000438 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000ae2:	201b      	movs	r0, #27
 8000ae4:	f7ff fc8e 	bl	8000404 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	22e1      	movs	r2, #225	; 0xe1
 8000af2:	0252      	lsls	r2, r2, #9
 8000af4:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f001 fc1c 	bl	8002360 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fe31 	bl	8000794 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fe50 	bl	80007dc <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fe18 	bl	8000774 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe6e 	bl	8000828 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fe02 	bl	8000758 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe7d 	bl	8000858 <LL_USART_IsActiveFlag_TEACK>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d0f9      	beq.n	8000b56 <MX_USART1_UART_Init+0x11a>
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART1_UART_Init+0x140>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fe8b 	bl	8000880 <LL_USART_IsActiveFlag_REACK>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d0f3      	beq.n	8000b56 <MX_USART1_UART_Init+0x11a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b00f      	add	sp, #60	; 0x3c
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	50000800 	.word	0x50000800
 8000b7c:	40013800 	.word	0x40013800

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	003b      	movs	r3, r7
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2318      	movs	r3, #24
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fc5a 	bl	8003448 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000b94:	2004      	movs	r0, #4
 8000b96:	f7ff fda9 	bl	80006ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000b9a:	2020      	movs	r0, #32
 8000b9c:	f7ff fda6 	bl	80006ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff fda3 	bl	80006ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2102      	movs	r1, #2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fe7b 	bl	80008a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fe75 	bl	80008a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0192      	lsls	r2, r2, #6
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <MX_GPIO_Init+0xc0>)
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	0010      	movs	r0, r2
 8000bda:	f001 f8f2 	bl	8001dc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2202      	movs	r2, #2
 8000be2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2201      	movs	r2, #1
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2202      	movs	r2, #2
 8000bee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 f8dc 	bl	8001dc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2201      	movs	r2, #1
 8000c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c16:	003b      	movs	r3, r7
 8000c18:	2202      	movs	r2, #2
 8000c1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c22:	003b      	movs	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c28:	003a      	movs	r2, r7
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 f8c6 	bl	8001dc2 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b006      	add	sp, #24
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	50000800 	.word	0x50000800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x44>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0549      	lsls	r1, r1, #21
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_MspInit+0x44>)
 8000c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	055b      	lsls	r3, r3, #21
 8000c84:	4013      	ands	r3, r2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	2414      	movs	r4, #20
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	2314      	movs	r3, #20
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f002 fbcc 	bl	8003448 <memset>
  if(hadc->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_ADC_MspInit+0x80>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d129      	bne.n	8000d0e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0349      	lsls	r1, r1, #13
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	035b      	lsls	r3, r3, #13
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_ADC_MspInit+0x84>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	193a      	adds	r2, r7, r4
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fe3d 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b00b      	add	sp, #44	; 0x2c
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	EcuM_SysTickCallBack();
 8000d44:	f001 fd70 	bl	8002828 <EcuM_SysTickCallBack>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f8da 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_SysCallBack();
 8000d56:	f002 f915 	bl	8002f84 <USART_SysCallBack>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f002 fb30 	bl	80033f4 <__errno>
 8000d94:	0003      	movs	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	18d2      	adds	r2, r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b006      	add	sp, #24
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20009000 	.word	0x20009000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	200000f0 	.word	0x200000f0
 8000dc8:	200001e8 	.word	0x200001e8

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ddc:	f7ff fff6 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e06:	f002 fafb 	bl	8003400 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e0a:	f7ff fd59 	bl	80008c0 <main>

08000e0e <LoopForever>:

LoopForever:
  b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   r0, =_estack
 8000e10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e1c:	08003e30 	.word	0x08003e30
  ldr r2, =_sbss
 8000e20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e24:	200001e8 	.word	0x200001e8

08000e28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_COMP_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x3c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Init+0x3c>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0049      	lsls	r1, r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 f810 	bl	8000e6c <HAL_InitTick>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e001      	b.n	8000e5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fefa 	bl	8000c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_InitTick+0x88>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d02b      	beq.n	8000edc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0x8c>)
 8000e86:	681c      	ldr	r4, [r3, #0]
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_InitTick+0x88>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	23fa      	movs	r3, #250	; 0xfa
 8000e90:	0098      	lsls	r0, r3, #2
 8000e92:	f7ff f941 	bl	8000118 <__udivsi3>
 8000e96:	0003      	movs	r3, r0
 8000e98:	0019      	movs	r1, r3
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff f93c 	bl	8000118 <__udivsi3>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fd63 	bl	800196e <HAL_SYSTICK_Config>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d112      	bne.n	8000ed2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80a      	bhi.n	8000ec8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fd42 	bl	8001944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_InitTick+0x90>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e00d      	b.n	8000ee4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e008      	b.n	8000ee4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e003      	b.n	8000ee4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b005      	add	sp, #20
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	18d2      	adds	r2, r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200000f4 	.word	0x200000f4

08000f24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f34:	401a      	ands	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	fe3fffff 	.word	0xfe3fffff

08000f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	23e0      	movs	r3, #224	; 0xe0
 8000f5a:	045b      	lsls	r3, r3, #17
 8000f5c:	4013      	ands	r3, r2
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	2104      	movs	r1, #4
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	000a      	movs	r2, r1
 8000f82:	43d2      	mvns	r2, r2
 8000f84:	401a      	ands	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4099      	lsls	r1, r3
 8000f90:	000b      	movs	r3, r1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b004      	add	sp, #16
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	4091      	lsls	r1, r2
 8000fb8:	000a      	movs	r2, r1
 8000fba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	0013      	movs	r3, r2
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	211f      	movs	r1, #31
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	4091      	lsls	r1, r2
 8000fe8:	000a      	movs	r2, r1
 8000fea:	43d2      	mvns	r2, r2
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0e9b      	lsrs	r3, r3, #26
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	201f      	movs	r0, #31
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	4099      	lsls	r1, r3
 8000ffe:	000b      	movs	r3, r1
 8001000:	431a      	orrs	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	035b      	lsls	r3, r3, #13
 8001020:	0b5b      	lsrs	r3, r3, #13
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	0352      	lsls	r2, r2, #13
 8001042:	0b52      	lsrs	r2, r2, #13
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	0212      	lsls	r2, r2, #8
 8001068:	43d2      	mvns	r2, r2
 800106a:	401a      	ands	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	400b      	ands	r3, r1
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001076:	400b      	ands	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b004      	add	sp, #16
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	07ffff00 	.word	0x07ffff00

0800108c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800109a:	4013      	ands	r3, r2
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0552      	lsls	r2, r2, #21
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	6fffffe8 	.word	0x6fffffe8

080010b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	401a      	ands	r2, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	055b      	lsls	r3, r3, #21
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <LL_ADC_IsEnabled+0x18>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <LL_ADC_IsEnabled+0x1a>
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
 800110e:	2b04      	cmp	r3, #4
 8001110:	d101      	bne.n	8001116 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	231f      	movs	r3, #31
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e17f      	b.n	8001446 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10a      	bne.n	8001164 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fda1 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2254      	movs	r2, #84	; 0x54
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ffa3 	bl	80010b4 <LL_ADC_IsInternalRegulatorEnabled>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d115      	bne.n	800119e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff ff88 	bl	800108c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800117c:	4bb4      	ldr	r3, [pc, #720]	; (8001450 <HAL_ADC_Init+0x330>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	49b4      	ldr	r1, [pc, #720]	; (8001454 <HAL_ADC_Init+0x334>)
 8001182:	0018      	movs	r0, r3
 8001184:	f7fe ffc8 	bl	8000118 <__udivsi3>
 8001188:	0003      	movs	r3, r0
 800118a:	3301      	adds	r3, #1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001190:	e002      	b.n	8001198 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3b01      	subs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff86 	bl	80010b4 <LL_ADC_IsInternalRegulatorEnabled>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d10f      	bne.n	80011cc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	2210      	movs	r2, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2201      	movs	r2, #1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011c4:	231f      	movs	r3, #31
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff94 	bl	80010fe <LL_ADC_REG_IsConversionOngoing>
 80011d6:	0003      	movs	r3, r0
 80011d8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	2210      	movs	r2, #16
 80011e0:	4013      	ands	r3, r2
 80011e2:	d000      	beq.n	80011e6 <HAL_ADC_Init+0xc6>
 80011e4:	e122      	b.n	800142c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d000      	beq.n	80011ee <HAL_ADC_Init+0xce>
 80011ec:	e11e      	b.n	800142c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a99      	ldr	r2, [pc, #612]	; (8001458 <HAL_ADC_Init+0x338>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	2202      	movs	r2, #2
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ff6a 	bl	80010dc <LL_ADC_IsEnabled>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d000      	beq.n	800120e <HAL_ADC_Init+0xee>
 800120c:	e0ad      	b.n	800136a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e1b      	ldrb	r3, [r3, #24]
 8001216:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001218:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001220:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e9b      	ldrb	r3, [r3, #26]
 8001226:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001228:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <HAL_ADC_Init+0x118>
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	e000      	b.n	800123a <HAL_ADC_Init+0x11a>
 8001238:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800123a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001240:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da04      	bge.n	8001254 <HAL_ADC_Init+0x134>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	e001      	b.n	8001258 <HAL_ADC_Init+0x138>
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001258:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	212c      	movs	r1, #44	; 0x2c
 800125e:	5c5b      	ldrb	r3, [r3, r1]
 8001260:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001262:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	5c9b      	ldrb	r3, [r3, r2]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d115      	bne.n	80012a0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e9b      	ldrb	r3, [r3, #26]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	0252      	lsls	r2, r2, #9
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	e00b      	b.n	80012a0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	2220      	movs	r2, #32
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2201      	movs	r2, #1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ac:	23e0      	movs	r3, #224	; 0xe0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_ADC_Init+0x33c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0f9b      	lsrs	r3, r3, #30
 80012da:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	223c      	movs	r2, #60	; 0x3c
 80012ec:	5c9b      	ldrb	r3, [r3, r2]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d111      	bne.n	8001316 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0f9b      	lsrs	r3, r3, #30
 80012f8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001304:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800130a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4313      	orrs	r3, r2
 8001310:	2201      	movs	r2, #1
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_ADC_Init+0x340>)
 800131e:	4013      	ands	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	430a      	orrs	r2, r1
 800132a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	061b      	lsls	r3, r3, #24
 8001334:	429a      	cmp	r2, r3
 8001336:	d018      	beq.n	800136a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	429a      	cmp	r2, r3
 8001342:	d012      	beq.n	800136a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	061b      	lsls	r3, r3, #24
 800134c:	429a      	cmp	r2, r3
 800134e:	d00c      	beq.n	800136a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001350:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_ADC_Init+0x344>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a44      	ldr	r2, [pc, #272]	; (8001468 <HAL_ADC_Init+0x348>)
 8001356:	4013      	ands	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	039b      	lsls	r3, r3, #14
 8001362:	401a      	ands	r2, r3
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <HAL_ADC_Init+0x344>)
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	001a      	movs	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f7ff fdf6 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	493a      	ldr	r1, [pc, #232]	; (800146c <HAL_ADC_Init+0x34c>)
 8001384:	001a      	movs	r2, r3
 8001386:	f7ff fdee 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2110      	movs	r1, #16
 800139e:	4249      	negs	r1, r1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
 80013a4:	e018      	b.n	80013d8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	039b      	lsls	r3, r3, #14
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d112      	bne.n	80013d8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	3b01      	subs	r3, #1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	221c      	movs	r2, #28
 80013c2:	4013      	ands	r3, r2
 80013c4:	2210      	movs	r2, #16
 80013c6:	4252      	negs	r2, r2
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0011      	movs	r1, r2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff fdde 	bl	8000fa0 <LL_ADC_GetSamplingTimeCommonChannels>
 80013e4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d10b      	bne.n	8001406 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	2203      	movs	r2, #3
 80013fa:	4393      	bics	r3, r2
 80013fc:	2201      	movs	r2, #1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001404:	e01c      	b.n	8001440 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	2212      	movs	r2, #18
 800140c:	4393      	bics	r3, r2
 800140e:	2210      	movs	r2, #16
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2201      	movs	r2, #1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800142a:	e009      	b.n	8001440 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	2210      	movs	r2, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001438:	231f      	movs	r3, #31
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001440:	231f      	movs	r3, #31
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	781b      	ldrb	r3, [r3, #0]
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b008      	add	sp, #32
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000000 	.word	0x20000000
 8001454:	00030d40 	.word	0x00030d40
 8001458:	fffffefd 	.word	0xfffffefd
 800145c:	fffe0201 	.word	0xfffe0201
 8001460:	1ffffc02 	.word	0x1ffffc02
 8001464:	40012708 	.word	0x40012708
 8001468:	ffc3ffff 	.word	0xffc3ffff
 800146c:	07ffff04 	.word	0x07ffff04

08001470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2317      	movs	r3, #23
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2254      	movs	r2, #84	; 0x54
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x24>
 8001490:	2302      	movs	r3, #2
 8001492:	e1c0      	b.n	8001816 <HAL_ADC_ConfigChannel+0x3a6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2254      	movs	r2, #84	; 0x54
 8001498:	2101      	movs	r1, #1
 800149a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fe2c 	bl	80010fe <LL_ADC_REG_IsConversionOngoing>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d000      	beq.n	80014ac <HAL_ADC_ConfigChannel+0x3c>
 80014aa:	e1a3      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d100      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x46>
 80014b4:	e143      	b.n	800173e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	061b      	lsls	r3, r3, #24
 80014be:	429a      	cmp	r2, r3
 80014c0:	d004      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014c6:	4ac1      	ldr	r2, [pc, #772]	; (80017cc <HAL_ADC_ConfigChannel+0x35c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d108      	bne.n	80014de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f7ff fd99 	bl	800100e <LL_ADC_REG_SetSequencerChAdd>
 80014dc:	e0c9      	b.n	8001672 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	211f      	movs	r1, #31
 80014e8:	400b      	ands	r3, r1
 80014ea:	210f      	movs	r1, #15
 80014ec:	4099      	lsls	r1, r3
 80014ee:	000b      	movs	r3, r1
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	035b      	lsls	r3, r3, #13
 80014fc:	0b5b      	lsrs	r3, r3, #13
 80014fe:	d105      	bne.n	800150c <HAL_ADC_ConfigChannel+0x9c>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0e9b      	lsrs	r3, r3, #26
 8001506:	221f      	movs	r2, #31
 8001508:	4013      	ands	r3, r2
 800150a:	e098      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xa8>
 8001516:	e091      	b.n	800163c <HAL_ADC_ConfigChannel+0x1cc>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d000      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xb4>
 8001522:	e089      	b.n	8001638 <HAL_ADC_ConfigChannel+0x1c8>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d000      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xc0>
 800152e:	e081      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1c4>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2208      	movs	r2, #8
 8001536:	4013      	ands	r3, r2
 8001538:	d000      	beq.n	800153c <HAL_ADC_ConfigChannel+0xcc>
 800153a:	e079      	b.n	8001630 <HAL_ADC_ConfigChannel+0x1c0>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2210      	movs	r2, #16
 8001542:	4013      	ands	r3, r2
 8001544:	d000      	beq.n	8001548 <HAL_ADC_ConfigChannel+0xd8>
 8001546:	e071      	b.n	800162c <HAL_ADC_ConfigChannel+0x1bc>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2220      	movs	r2, #32
 800154e:	4013      	ands	r3, r2
 8001550:	d000      	beq.n	8001554 <HAL_ADC_ConfigChannel+0xe4>
 8001552:	e069      	b.n	8001628 <HAL_ADC_ConfigChannel+0x1b8>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2240      	movs	r2, #64	; 0x40
 800155a:	4013      	ands	r3, r2
 800155c:	d000      	beq.n	8001560 <HAL_ADC_ConfigChannel+0xf0>
 800155e:	e061      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1b4>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	4013      	ands	r3, r2
 8001568:	d000      	beq.n	800156c <HAL_ADC_ConfigChannel+0xfc>
 800156a:	e059      	b.n	8001620 <HAL_ADC_ConfigChannel+0x1b0>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d151      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1ac>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d149      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1a8>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4013      	ands	r3, r2
 800158e:	d141      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1a4>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d139      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1a0>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	015b      	lsls	r3, r3, #5
 80015a4:	4013      	ands	r3, r2
 80015a6:	d131      	bne.n	800160c <HAL_ADC_ConfigChannel+0x19c>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	4013      	ands	r3, r2
 80015b2:	d129      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x198>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4013      	ands	r3, r2
 80015be:	d121      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x194>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	d119      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x190>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	4013      	ands	r3, r2
 80015d6:	d111      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x18c>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x188>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	02db      	lsls	r3, r3, #11
 80015ec:	4013      	ands	r3, r2
 80015ee:	d001      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x184>
 80015f0:	2312      	movs	r3, #18
 80015f2:	e024      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	2300      	movs	r3, #0
 80015f6:	e022      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	2311      	movs	r3, #17
 80015fa:	e020      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 80015fc:	2310      	movs	r3, #16
 80015fe:	e01e      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001600:	230f      	movs	r3, #15
 8001602:	e01c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001604:	230e      	movs	r3, #14
 8001606:	e01a      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001608:	230d      	movs	r3, #13
 800160a:	e018      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 800160c:	230c      	movs	r3, #12
 800160e:	e016      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	230b      	movs	r3, #11
 8001612:	e014      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	230a      	movs	r3, #10
 8001616:	e012      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001618:	2309      	movs	r3, #9
 800161a:	e010      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 800161c:	2308      	movs	r3, #8
 800161e:	e00e      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001620:	2307      	movs	r3, #7
 8001622:	e00c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001624:	2306      	movs	r3, #6
 8001626:	e00a      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001628:	2305      	movs	r3, #5
 800162a:	e008      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 800162c:	2304      	movs	r3, #4
 800162e:	e006      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001630:	2303      	movs	r3, #3
 8001632:	e004      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_ADC_ConfigChannel+0x1ce>
 800163c:	2300      	movs	r3, #0
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	6852      	ldr	r2, [r2, #4]
 8001642:	201f      	movs	r0, #31
 8001644:	4002      	ands	r2, r0
 8001646:	4093      	lsls	r3, r2
 8001648:	000a      	movs	r2, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	d808      	bhi.n	8001672 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	f7ff fcae 	bl	8000fce <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	001a      	movs	r2, r3
 8001680:	f7ff fce8 	bl	8001054 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db00      	blt.n	800168e <HAL_ADC_ConfigChannel+0x21e>
 800168c:	e0bc      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fc5b 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_ADC_ConfigChannel+0x364>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d122      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ac:	d11d      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 80016b8:	0019      	movs	r1, r3
 80016ba:	0010      	movs	r0, r2
 80016bc:	f7ff fc32 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <HAL_ADC_ConfigChannel+0x368>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4945      	ldr	r1, [pc, #276]	; (80017dc <HAL_ADC_ConfigChannel+0x36c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd26 	bl	8000118 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	0013      	movs	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016da:	e002      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3b01      	subs	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e8:	e08e      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a3c      	ldr	r2, [pc, #240]	; (80017e0 <HAL_ADC_ConfigChannel+0x370>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10e      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	045b      	lsls	r3, r3, #17
 80016fa:	4013      	ands	r3, r2
 80016fc:	d109      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	0452      	lsls	r2, r2, #17
 8001704:	4313      	orrs	r3, r2
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 8001708:	0019      	movs	r1, r3
 800170a:	0010      	movs	r0, r2
 800170c:	f7ff fc0a 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
 8001710:	e07a      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <HAL_ADC_ConfigChannel+0x374>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d000      	beq.n	800171e <HAL_ADC_ConfigChannel+0x2ae>
 800171c:	e074      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	03db      	lsls	r3, r3, #15
 8001724:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001726:	d000      	beq.n	800172a <HAL_ADC_ConfigChannel+0x2ba>
 8001728:	e06e      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	03d2      	lsls	r2, r2, #15
 8001730:	4313      	orrs	r3, r2
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f7ff fbf4 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
 800173c:	e064      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	429a      	cmp	r2, r3
 8001748:	d004      	beq.n	8001754 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_ADC_ConfigChannel+0x35c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d107      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0019      	movs	r1, r3
 800175e:	0010      	movs	r0, r2
 8001760:	f7ff fc66 	bl	8001030 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da4d      	bge.n	8001808 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff fbec 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_ADC_ConfigChannel+0x364>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d108      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_ADC_ConfigChannel+0x378>)
 8001786:	4013      	ands	r3, r2
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 800178a:	0019      	movs	r1, r3
 800178c:	0010      	movs	r0, r2
 800178e:	f7ff fbc9 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
 8001792:	e039      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x370>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d108      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_ADC_ConfigChannel+0x37c>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 80017a6:	0019      	movs	r1, r3
 80017a8:	0010      	movs	r0, r2
 80017aa:	f7ff fbbb 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
 80017ae:	e02b      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <HAL_ADC_ConfigChannel+0x374>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d126      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_ADC_ConfigChannel+0x380>)
 80017be:	4013      	ands	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_ADC_ConfigChannel+0x360>)
 80017c2:	0019      	movs	r1, r3
 80017c4:	0010      	movs	r0, r2
 80017c6:	f7ff fbad 	bl	8000f24 <LL_ADC_SetCommonPathInternalCh>
 80017ca:	e01d      	b.n	8001808 <HAL_ADC_ConfigChannel+0x398>
 80017cc:	80000004 	.word	0x80000004
 80017d0:	40012708 	.word	0x40012708
 80017d4:	b0001000 	.word	0xb0001000
 80017d8:	20000000 	.word	0x20000000
 80017dc:	00030d40 	.word	0x00030d40
 80017e0:	b8004000 	.word	0xb8004000
 80017e4:	b4002000 	.word	0xb4002000
 80017e8:	ff7fffff 	.word	0xff7fffff
 80017ec:	feffffff 	.word	0xfeffffff
 80017f0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	2220      	movs	r2, #32
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001800:	2317      	movs	r3, #23
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2254      	movs	r2, #84	; 0x54
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001810:	2317      	movs	r3, #23
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b006      	add	sp, #24
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)

08001820 <__NVIC_SetPriority>:
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	0002      	movs	r2, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b7f      	cmp	r3, #127	; 0x7f
 8001834:	d828      	bhi.n	8001888 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <__NVIC_SetPriority+0xd4>)
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	33c0      	adds	r3, #192	; 0xc0
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	589b      	ldr	r3, [r3, r2]
 8001846:	1dfa      	adds	r2, r7, #7
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	0011      	movs	r1, r2
 800184c:	2203      	movs	r2, #3
 800184e:	400a      	ands	r2, r1
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	21ff      	movs	r1, #255	; 0xff
 8001854:	4091      	lsls	r1, r2
 8001856:	000a      	movs	r2, r1
 8001858:	43d2      	mvns	r2, r2
 800185a:	401a      	ands	r2, r3
 800185c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	401a      	ands	r2, r3
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	0018      	movs	r0, r3
 800186c:	2303      	movs	r3, #3
 800186e:	4003      	ands	r3, r0
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <__NVIC_SetPriority+0xd4>)
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	430a      	orrs	r2, r1
 8001880:	33c0      	adds	r3, #192	; 0xc0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	501a      	str	r2, [r3, r0]
}
 8001886:	e031      	b.n	80018ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <__NVIC_SetPriority+0xd8>)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	0019      	movs	r1, r3
 8001890:	230f      	movs	r3, #15
 8001892:	400b      	ands	r3, r1
 8001894:	3b08      	subs	r3, #8
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3306      	adds	r3, #6
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	3304      	adds	r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1dfa      	adds	r2, r7, #7
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	0011      	movs	r1, r2
 80018a8:	2203      	movs	r2, #3
 80018aa:	400a      	ands	r2, r1
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	21ff      	movs	r1, #255	; 0xff
 80018b0:	4091      	lsls	r1, r2
 80018b2:	000a      	movs	r2, r1
 80018b4:	43d2      	mvns	r2, r2
 80018b6:	401a      	ands	r2, r3
 80018b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	401a      	ands	r2, r3
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	2303      	movs	r3, #3
 80018ca:	4003      	ands	r3, r0
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <__NVIC_SetPriority+0xd8>)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	001c      	movs	r4, r3
 80018d8:	230f      	movs	r3, #15
 80018da:	4023      	ands	r3, r4
 80018dc:	3b08      	subs	r3, #8
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	430a      	orrs	r2, r1
 80018e2:	3306      	adds	r3, #6
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	18c3      	adds	r3, r0, r3
 80018e8:	3304      	adds	r3, #4
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b003      	add	sp, #12
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	1e5a      	subs	r2, r3, #1
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	045b      	lsls	r3, r3, #17
 800190c:	429a      	cmp	r2, r3
 800190e:	d301      	bcc.n	8001914 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001910:	2301      	movs	r3, #1
 8001912:	e010      	b.n	8001936 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <SysTick_Config+0x44>)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	3a01      	subs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191c:	2301      	movs	r3, #1
 800191e:	425b      	negs	r3, r3
 8001920:	2103      	movs	r1, #3
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff ff7c 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x44>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x44>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	210f      	movs	r1, #15
 8001950:	187b      	adds	r3, r7, r1
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	187b      	adds	r3, r7, r1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b25b      	sxtb	r3, r3
 800195e:	0011      	movs	r1, r2
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff ffbf 	bl	80018fc <SysTick_Config>
 800197e:	0003      	movs	r3, r0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e147      	b.n	8001c28 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4091      	lsls	r1, r2
 80019a2:	000a      	movs	r2, r1
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <HAL_GPIO_Init+0x28>
 80019ae:	e138      	b.n	8001c22 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d005      	beq.n	80019c8 <HAL_GPIO_Init+0x40>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d130      	bne.n	8001a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	409a      	lsls	r2, r3
 80019d6:	0013      	movs	r3, r2
 80019d8:	43da      	mvns	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fe:	2201      	movs	r2, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	43da      	mvns	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	2201      	movs	r2, #1
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d017      	beq.n	8001a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	43da      	mvns	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d123      	bne.n	8001aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	58d3      	ldr	r3, [r2, r3]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2207      	movs	r2, #7
 8001a84:	4013      	ands	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2107      	movs	r1, #7
 8001a9e:	400b      	ands	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	6939      	ldr	r1, [r7, #16]
 8001ab8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	43da      	mvns	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_GPIO_Init+0x174>
 8001afa:	e092      	b.n	8001c22 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001afc:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3318      	adds	r3, #24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	589b      	ldr	r3, [r3, r2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	220f      	movs	r2, #15
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	23a0      	movs	r3, #160	; 0xa0
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x1ca>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a45      	ldr	r2, [pc, #276]	; (8001c44 <HAL_GPIO_Init+0x2bc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x1c6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_GPIO_Init+0x2c0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x1c2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <HAL_GPIO_Init+0x2c4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x1be>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x1cc>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x1cc>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x1cc>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x1cc>
 8001b52:	2300      	movs	r3, #0
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	2103      	movs	r1, #3
 8001b58:	400a      	ands	r2, r1
 8001b5a:	00d2      	lsls	r2, r2, #3
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b64:	4936      	ldr	r1, [pc, #216]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3318      	adds	r3, #24
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	035b      	lsls	r3, r3, #13
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	039b      	lsls	r3, r3, #14
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001bc8:	2384      	movs	r3, #132	; 0x84
 8001bca:	58d3      	ldr	r3, [r2, r3]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	4013      	ands	r3, r2
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bec:	4914      	ldr	r1, [pc, #80]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001bee:	2284      	movs	r2, #132	; 0x84
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	58d3      	ldr	r3, [r2, r3]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c1a:	4909      	ldr	r1, [pc, #36]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	40da      	lsrs	r2, r3
 8001c30:	1e13      	subs	r3, r2, #0
 8001c32:	d000      	beq.n	8001c36 <HAL_GPIO_Init+0x2ae>
 8001c34:	e6b0      	b.n	8001998 <HAL_GPIO_Init+0x10>
  }
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b006      	add	sp, #24
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021800 	.word	0x40021800
 8001c44:	50000400 	.word	0x50000400
 8001c48:	50000800 	.word	0x50000800
 8001c4c:	50000c00 	.word	0x50000c00

08001c50 <LL_GPIO_SetPinMode>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	435b      	muls	r3, r3
 8001c64:	001a      	movs	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	400b      	ands	r3, r1
 8001c70:	001a      	movs	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	435b      	muls	r3, r3
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	434b      	muls	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <LL_GPIO_SetPinOutputType>:
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	434b      	muls	r3, r1
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <LL_GPIO_SetPinSpeed>:
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	435b      	muls	r3, r3
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	435b      	muls	r3, r3
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	434b      	muls	r3, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	609a      	str	r2, [r3, #8]
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <LL_GPIO_SetPinPull>:
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	435b      	muls	r3, r3
 8001cfe:	001a      	movs	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	189b      	adds	r3, r3, r2
 8001d06:	43db      	mvns	r3, r3
 8001d08:	400b      	ands	r3, r1
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	435b      	muls	r3, r3
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	434b      	muls	r3, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	60da      	str	r2, [r3, #12]
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <LL_GPIO_SetAFPin_0_7>:
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a19      	ldr	r1, [r3, #32]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	435b      	muls	r3, r3
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4353      	muls	r3, r2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	435a      	muls	r2, r3
 8001d3e:	0013      	movs	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	43db      	mvns	r3, r3
 8001d46:	400b      	ands	r3, r1
 8001d48:	001a      	movs	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	435b      	muls	r3, r3
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	434b      	muls	r3, r1
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	434b      	muls	r3, r1
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	434b      	muls	r3, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	621a      	str	r2, [r3, #32]
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <LL_GPIO_SetAFPin_8_15>:
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	0a12      	lsrs	r2, r2, #8
 8001d80:	4353      	muls	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	4353      	muls	r3, r2
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	0a12      	lsrs	r2, r2, #8
 8001d8c:	435a      	muls	r2, r3
 8001d8e:	0013      	movs	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	43db      	mvns	r3, r3
 8001d96:	400b      	ands	r3, r1
 8001d98:	001a      	movs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	0a09      	lsrs	r1, r1, #8
 8001da2:	434b      	muls	r3, r1
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	0a09      	lsrs	r1, r1, #8
 8001da8:	434b      	muls	r3, r1
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	0a09      	lsrs	r1, r1, #8
 8001dae:	434b      	muls	r3, r1
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	434b      	muls	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001dd0:	e047      	b.n	8001e62 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4091      	lsls	r1, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	4013      	ands	r3, r2
 8001de0:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d039      	beq.n	8001e5c <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <LL_GPIO_Init+0x36>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d10d      	bne.n	8001e14 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff ff56 	bl	8001cb2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff ff3a 	bl	8001c88 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff64 	bl	8001cea <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d111      	bne.n	8001e4e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2bff      	cmp	r3, #255	; 0xff
 8001e2e:	d807      	bhi.n	8001e40 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff ff72 	bl	8001d22 <LL_GPIO_SetAFPin_0_7>
 8001e3e:	e006      	b.n	8001e4e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff ff8d 	bl	8001d68 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff fefa 	bl	8001c50 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	40da      	lsrs	r2, r3
 8001e6a:	1e13      	subs	r3, r2, #0
 8001e6c:	d1b1      	bne.n	8001dd2 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b004      	add	sp, #16
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <LL_RCC_HSI_IsReady>:
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <LL_RCC_HSI_IsReady+0x24>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	401a      	ands	r2, r3
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d101      	bne.n	8001e92 <LL_RCC_HSI_IsReady+0x1a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_RCC_HSI_IsReady+0x1c>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <LL_RCC_LSE_IsReady>:
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <LL_RCC_LSE_IsReady+0x1c>)
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d101      	bne.n	8001eb4 <LL_RCC_LSE_IsReady+0x14>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_RCC_LSE_IsReady+0x16>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <LL_RCC_GetSysClkSource>:
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <LL_RCC_GetSysClkSource+0x14>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2238      	movs	r2, #56	; 0x38
 8001eca:	4013      	ands	r3, r2
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <LL_RCC_GetAHBPrescaler>:
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <LL_RCC_GetAHBPrescaler+0x14>)
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	23f0      	movs	r3, #240	; 0xf0
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4013      	ands	r3, r2
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000

08001ef0 <LL_RCC_GetAPB1Prescaler>:
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	23e0      	movs	r3, #224	; 0xe0
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	4013      	ands	r3, r2
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <LL_RCC_GetUSARTClockSource>:
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <LL_RCC_GetUSARTClockSource+0x20>)
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	4313      	orrs	r3, r2
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000

08001f2c <LL_RCC_PLL_GetN>:
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <LL_RCC_PLL_GetN+0x14>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	227f      	movs	r2, #127	; 0x7f
 8001f38:	4013      	ands	r3, r2
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <LL_RCC_PLL_GetR>:
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <LL_RCC_PLL_GetR+0x14>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0f5b      	lsrs	r3, r3, #29
 8001f4e:	075b      	lsls	r3, r3, #29
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000

08001f5c <LL_RCC_PLL_GetMainSource>:
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <LL_RCC_PLL_GetMainSource+0x14>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40021000 	.word	0x40021000

08001f74 <LL_RCC_PLL_GetDivider>:
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <LL_RCC_PLL_GetDivider+0x14>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2270      	movs	r2, #112	; 0x70
 8001f7e:	4013      	ands	r3, r2
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000

08001f8c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001f94:	f000 f8a8 	bl	80020e8 <RCC_GetSystemClockFreq>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 f8ce 	bl	8002144 <RCC_GetHCLKClockFreq>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f8de 	bl	8002174 <RCC_GetPCLK1ClockFreq>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d134      	bne.n	8002044 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ff93 	bl	8001f08 <LL_RCC_GetUSARTClockSource>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	4a39      	ldr	r2, [pc, #228]	; (80020cc <LL_RCC_GetUSARTClockFreq+0x104>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d016      	beq.n	8002018 <LL_RCC_GetUSARTClockFreq+0x50>
 8001fea:	4a38      	ldr	r2, [pc, #224]	; (80020cc <LL_RCC_GetUSARTClockFreq+0x104>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d81c      	bhi.n	800202a <LL_RCC_GetUSARTClockFreq+0x62>
 8001ff0:	4a37      	ldr	r2, [pc, #220]	; (80020d0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <LL_RCC_GetUSARTClockFreq+0x36>
 8001ff6:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d005      	beq.n	8002008 <LL_RCC_GetUSARTClockFreq+0x40>
 8001ffc:	e015      	b.n	800202a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ffe:	f000 f873 	bl	80020e8 <RCC_GetSystemClockFreq>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]
        break;
 8002006:	e05c      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8002008:	f7ff ff36 	bl	8001e78 <LL_RCC_HSI_IsReady>
 800200c:	0003      	movs	r3, r0
 800200e:	2b01      	cmp	r3, #1
 8002010:	d150      	bne.n	80020b4 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <LL_RCC_GetUSARTClockFreq+0x110>)
 8002014:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002016:	e04d      	b.n	80020b4 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8002018:	f7ff ff42 	bl	8001ea0 <LL_RCC_LSE_IsReady>
 800201c:	0003      	movs	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d14a      	bne.n	80020b8 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002028:	e046      	b.n	80020b8 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800202a:	f000 f85d 	bl	80020e8 <RCC_GetSystemClockFreq>
 800202e:	0003      	movs	r3, r0
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f887 	bl	8002144 <RCC_GetHCLKClockFreq>
 8002036:	0003      	movs	r3, r0
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f89b 	bl	8002174 <RCC_GetPCLK1ClockFreq>
 800203e:	0003      	movs	r3, r0
 8002040:	60fb      	str	r3, [r7, #12]
        break;
 8002042:	e03e      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d13b      	bne.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff ff5b 	bl	8001f08 <LL_RCC_GetUSARTClockSource>
 8002052:	0003      	movs	r3, r0
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <LL_RCC_GetUSARTClockFreq+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d016      	beq.n	8002088 <LL_RCC_GetUSARTClockFreq+0xc0>
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <LL_RCC_GetUSARTClockFreq+0x114>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d81c      	bhi.n	800209a <LL_RCC_GetUSARTClockFreq+0xd2>
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <LL_RCC_GetUSARTClockFreq+0x118>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <LL_RCC_GetUSARTClockFreq+0xa6>
 8002066:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d005      	beq.n	8002078 <LL_RCC_GetUSARTClockFreq+0xb0>
 800206c:	e015      	b.n	800209a <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800206e:	f000 f83b 	bl	80020e8 <RCC_GetSystemClockFreq>
 8002072:	0003      	movs	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]
        break;
 8002076:	e024      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8002078:	f7ff fefe 	bl	8001e78 <LL_RCC_HSI_IsReady>
 800207c:	0003      	movs	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11c      	bne.n	80020bc <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <LL_RCC_GetUSARTClockFreq+0x110>)
 8002084:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002086:	e019      	b.n	80020bc <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8002088:	f7ff ff0a 	bl	8001ea0 <LL_RCC_LSE_IsReady>
 800208c:	0003      	movs	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d116      	bne.n	80020c0 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002098:	e012      	b.n	80020c0 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800209a:	f000 f825 	bl	80020e8 <RCC_GetSystemClockFreq>
 800209e:	0003      	movs	r3, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f84f 	bl	8002144 <RCC_GetHCLKClockFreq>
 80020a6:	0003      	movs	r3, r0
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f863 	bl	8002174 <RCC_GetPCLK1ClockFreq>
 80020ae:	0003      	movs	r3, r0
 80020b0:	60fb      	str	r3, [r7, #12]
        break;
 80020b2:	e006      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	e004      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	e002      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	e000      	b.n	80020c2 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80020c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	00030003 	.word	0x00030003
 80020d0:	00030001 	.word	0x00030001
 80020d4:	00030002 	.word	0x00030002
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	000c000c 	.word	0x000c000c
 80020e0:	000c0004 	.word	0x000c0004
 80020e4:	000c0008 	.word	0x000c0008

080020e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80020ee:	f7ff fee7 	bl	8001ec0 <LL_RCC_GetSysClkSource>
 80020f2:	0003      	movs	r3, r0
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d002      	beq.n	80020fe <RCC_GetSystemClockFreq+0x16>
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d003      	beq.n	8002104 <RCC_GetSystemClockFreq+0x1c>
 80020fc:	e007      	b.n	800210e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <RCC_GetSystemClockFreq+0x50>)
 8002100:	607b      	str	r3, [r7, #4]
      break;
 8002102:	e014      	b.n	800212e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002104:	f000 f84c 	bl	80021a0 <RCC_PLL_GetFreqDomain_SYS>
 8002108:	0003      	movs	r3, r0
 800210a:	607b      	str	r3, [r7, #4]
      break;
 800210c:	e00f      	b.n	800212e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <RCC_GetSystemClockFreq+0x54>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	2207      	movs	r2, #7
 8002116:	4013      	ands	r3, r2
 8002118:	2201      	movs	r2, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <RCC_GetSystemClockFreq+0x58>)
 8002124:	f7fd fff8 	bl	8000118 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	607b      	str	r3, [r7, #4]
      break;
 800212c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	007a1200 	.word	0x007a1200
 800213c:	40021000 	.word	0x40021000
 8002140:	00f42400 	.word	0x00f42400

08002144 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800214c:	f7ff fec4 	bl	8001ed8 <LL_RCC_GetAHBPrescaler>
 8002150:	0003      	movs	r3, r0
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	220f      	movs	r2, #15
 8002156:	401a      	ands	r2, r3
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <RCC_GetHCLKClockFreq+0x2c>)
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	221f      	movs	r2, #31
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	40da      	lsrs	r2, r3
 8002166:	0013      	movs	r3, r2
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}
 8002170:	08003d50 	.word	0x08003d50

08002174 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800217c:	f7ff feb8 	bl	8001ef0 <LL_RCC_GetAPB1Prescaler>
 8002180:	0003      	movs	r3, r0
 8002182:	0b1a      	lsrs	r2, r3, #12
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <RCC_GetPCLK1ClockFreq+0x28>)
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	58d3      	ldr	r3, [r2, r3]
 800218a:	221f      	movs	r2, #31
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	40da      	lsrs	r2, r3
 8002192:	0013      	movs	r3, r2
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}
 800219c:	08003d90 	.word	0x08003d90

080021a0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021a6:	f7ff fed9 	bl	8001f5c <LL_RCC_PLL_GetMainSource>
 80021aa:	0003      	movs	r3, r0
 80021ac:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d003      	beq.n	80021bc <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d003      	beq.n	80021c2 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80021ba:	e005      	b.n	80021c8 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80021be:	607b      	str	r3, [r7, #4]
      break;
 80021c0:	e005      	b.n	80021ce <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80021c4:	607b      	str	r3, [r7, #4]
      break;
 80021c6:	e002      	b.n	80021ce <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80021ca:	607b      	str	r3, [r7, #4]
      break;
 80021cc:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021ce:	f7ff fead 	bl	8001f2c <LL_RCC_PLL_GetN>
 80021d2:	0002      	movs	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4353      	muls	r3, r2
 80021d8:	001c      	movs	r4, r3
 80021da:	f7ff fecb 	bl	8001f74 <LL_RCC_PLL_GetDivider>
 80021de:	0003      	movs	r3, r0
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	3301      	adds	r3, #1
 80021e4:	0019      	movs	r1, r3
 80021e6:	0020      	movs	r0, r4
 80021e8:	f7fd ff96 	bl	8000118 <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001c      	movs	r4, r3
 80021f0:	f7ff fea8 	bl	8001f44 <LL_RCC_PLL_GetR>
 80021f4:	0003      	movs	r3, r0
 80021f6:	0f5b      	lsrs	r3, r3, #29
 80021f8:	3301      	adds	r3, #1
 80021fa:	0019      	movs	r1, r3
 80021fc:	0020      	movs	r0, r4
 80021fe:	f7fd ff8b 	bl	8000118 <__udivsi3>
 8002202:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b003      	add	sp, #12
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <LL_USART_IsEnabled>:
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <LL_USART_IsEnabled+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_USART_IsEnabled+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}

08002236 <LL_USART_SetPrescaler>:
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	220f      	movs	r2, #15
 8002246:	4393      	bics	r3, r2
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b292      	uxth	r2, r2
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <LL_USART_SetStopBitsLength>:
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <LL_USART_SetStopBitsLength+0x24>)
 800226c:	401a      	ands	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	605a      	str	r2, [r3, #4]
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	ffffcfff 	.word	0xffffcfff

08002284 <LL_USART_SetHWFlowCtrl>:
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <LL_USART_SetHWFlowCtrl+0x24>)
 8002294:	401a      	ands	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	fffffcff 	.word	0xfffffcff

080022ac <LL_USART_SetBaudRate>:
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0b      	cmp	r3, #11
 80022be:	d846      	bhi.n	800234e <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d043      	beq.n	800234e <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d126      	bne.n	800231e <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	001a      	movs	r2, r3
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <LL_USART_SetBaudRate+0xac>)
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	58d3      	ldr	r3, [r2, r3]
 80022dc:	0019      	movs	r1, r3
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f7fd ff1a 	bl	8000118 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	005a      	lsls	r2, r3, #1
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	6a39      	ldr	r1, [r7, #32]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7fd ff11 	bl	8000118 <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <LL_USART_SetBaudRate+0xb0>)
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	b29b      	uxth	r3, r3
 800230a:	001a      	movs	r2, r3
 800230c:	2307      	movs	r3, #7
 800230e:	4013      	ands	r3, r2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	60da      	str	r2, [r3, #12]
}
 800231c:	e017      	b.n	800234e <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	001a      	movs	r2, r3
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <LL_USART_SetBaudRate+0xac>)
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	58d3      	ldr	r3, [r2, r3]
 800232a:	0019      	movs	r1, r3
 800232c:	68b8      	ldr	r0, [r7, #8]
 800232e:	f7fd fef3 	bl	8000118 <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	001a      	movs	r2, r3
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	0018      	movs	r0, r3
 8002340:	f7fd feea 	bl	8000118 <__udivsi3>
 8002344:	0003      	movs	r3, r0
 8002346:	b29b      	uxth	r3, r3
 8002348:	001a      	movs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	60da      	str	r2, [r3, #12]
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b006      	add	sp, #24
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	08003db0 	.word	0x08003db0
 800235c:	0000fff0 	.word	0x0000fff0

08002360 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800236a:	231f      	movs	r3, #31
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff ff4b 	bl	8002214 <LL_USART_IsEnabled>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d16a      	bne.n	8002458 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <LL_USART_Init+0x108>)
 8002388:	401a      	ands	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4319      	orrs	r1, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4319      	orrs	r1, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	430b      	orrs	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff ff54 	bl	800225c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0011      	movs	r1, r2
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff61 	bl	8002284 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <LL_USART_Init+0x10c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d105      	bne.n	80023d6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80023ca:	2003      	movs	r0, #3
 80023cc:	f7ff fdfc 	bl	8001fc8 <LL_RCC_GetUSARTClockFreq>
 80023d0:	0003      	movs	r3, r0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e022      	b.n	800241c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <LL_USART_Init+0x110>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d105      	bne.n	80023ea <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80023de:	200c      	movs	r0, #12
 80023e0:	f7ff fdf2 	bl	8001fc8 <LL_RCC_GetUSARTClockFreq>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e018      	b.n	800241c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <LL_USART_Init+0x114>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d108      	bne.n	8002404 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80023f2:	240c      	movs	r4, #12
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff fdc8 	bl	8001f8c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e00b      	b.n	800241c <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <LL_USART_Init+0x118>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d107      	bne.n	800241c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800240c:	240c      	movs	r4, #12
 800240e:	193b      	adds	r3, r7, r4
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fdbb 	bl	8001f8c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002416:	193b      	adds	r3, r7, r4
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00f      	beq.n	800244a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800242a:	231f      	movs	r3, #31
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	69dc      	ldr	r4, [r3, #28]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	0023      	movs	r3, r4
 8002446:	f7ff ff31 	bl	80022ac <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff feef 	bl	8002236 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002458:	231f      	movs	r3, #31
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	781b      	ldrb	r3, [r3, #0]
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b009      	add	sp, #36	; 0x24
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	efff69f3 	.word	0xefff69f3
 800246c:	40013800 	.word	0x40013800
 8002470:	40004400 	.word	0x40004400
 8002474:	40004800 	.word	0x40004800
 8002478:	40004c00 	.word	0x40004c00

0800247c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <LL_SetSystemCoreClock+0x18>)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000000 	.word	0x20000000

08002498 <AdcDrv_Init>:
#include "AdcDrv.h"

/*---------------------------------------------------------*/

void AdcDrv_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <AdcDrv_MainFunction>:

/*---------------------------------------------------------*/

void AdcDrv_MainFunction(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0

}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <LL_GPIO_IsInputPinSet>:
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4013      	ands	r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d101      	bne.n	80024c8 <LL_GPIO_IsInputPinSet+0x1c>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <LL_GPIO_IsInputPinSet+0x1e>
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <ButtonDrv_Init>:

ButtonConfig buttonConfig;


void ButtonDrv_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	buttonConfig.u16IdBtn = 1;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <ButtonDrv_Init+0x2c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	801a      	strh	r2, [r3, #0]
	buttonConfig.Port = USER_BTN_GPIO_Port;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <ButtonDrv_Init+0x2c>)
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <ButtonDrv_Init+0x30>)
 80024e2:	605a      	str	r2, [r3, #4]
	buttonConfig.Pin = USER_BTN_Pin;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <ButtonDrv_Init+0x2c>)
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0192      	lsls	r2, r2, #6
 80024ea:	609a      	str	r2, [r3, #8]
	buttonConfig.PrevState = RESET;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <ButtonDrv_Init+0x2c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	819a      	strh	r2, [r3, #12]
	ru32_SysClickBtn = 0;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <ButtonDrv_Init+0x34>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000100 	.word	0x20000100
 8002504:	50000800 	.word	0x50000800
 8002508:	200000f8 	.word	0x200000f8

0800250c <f_GetReturnValuePeriod>:

uint32_t f_GetReturnValuePeriod()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	return ru32_TickBtn;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <f_GetReturnValuePeriod+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	200000fc 	.word	0x200000fc

08002520 <SetPeriod>:

void SetPeriod(uint16_t u16StateBtn)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	0002      	movs	r2, r0
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	801a      	strh	r2, [r3, #0]
	if (u16StateBtn == SET)
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10f      	bne.n	8002554 <SetPeriod+0x34>
	{
		if(buttonConfig.PrevState != u16StateBtn)
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <SetPeriod+0x58>)
 8002536:	899b      	ldrh	r3, [r3, #12]
 8002538:	1dba      	adds	r2, r7, #6
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d012      	beq.n	8002566 <SetPeriod+0x46>
		{
			ru32_TickBtn = ru32_SysClickBtn;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <SetPeriod+0x5c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <SetPeriod+0x60>)
 8002546:	601a      	str	r2, [r3, #0]
			f_GetReturnValuePeriod();
 8002548:	f7ff ffe0 	bl	800250c <f_GetReturnValuePeriod>
			ru32_SysClickBtn = 0u;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <SetPeriod+0x5c>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e008      	b.n	8002566 <SetPeriod+0x46>
		}
	}
	else if (u16StateBtn == RESET)
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <SetPeriod+0x46>
	{
		ru32_SysClickBtn++;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <SetPeriod+0x5c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <SetPeriod+0x5c>)
 8002564:	601a      	str	r2, [r3, #0]
	}
	buttonConfig.PrevState = u16StateBtn;
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <SetPeriod+0x58>)
 8002568:	1dba      	adds	r2, r7, #6
 800256a:	8812      	ldrh	r2, [r2, #0]
 800256c:	819a      	strh	r2, [r3, #12]
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	20000100 	.word	0x20000100
 800257c:	200000f8 	.word	0x200000f8
 8002580:	200000fc 	.word	0x200000fc

08002584 <ButtonDrv_MainFunction>:



void ButtonDrv_MainFunction()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	ru16_StateBtn = LL_GPIO_IsInputPinSet(buttonConfig.Port, buttonConfig.Pin);
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <ButtonDrv_MainFunction+0x2c>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <ButtonDrv_MainFunction+0x2c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	0019      	movs	r1, r3
 8002592:	0010      	movs	r0, r2
 8002594:	f7ff ff8a 	bl	80024ac <LL_GPIO_IsInputPinSet>
 8002598:	0003      	movs	r3, r0
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <ButtonDrv_MainFunction+0x30>)
 800259e:	801a      	strh	r2, [r3, #0]

	SetPeriod(ru16_StateBtn);
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <ButtonDrv_MainFunction+0x30>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff ffbb 	bl	8002520 <SetPeriod>
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000100 	.word	0x20000100
 80025b4:	2000000a 	.word	0x2000000a

080025b8 <f_isFullFIFOBuffer>:
#include "CircularBuffer.h"



bool f_isFullFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	if (CircularFIFOBuffer->u16_BufferSize == (BUFFER_SIZE - 1))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2b31      	cmp	r3, #49	; 0x31
 80025c6:	d101      	bne.n	80025cc <f_isFullFIFOBuffer+0x14>
	{
		return true ;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <f_isFullFIFOBuffer+0x16>
	}
	else
	{
		return false;
 80025cc:	2300      	movs	r3, #0
	}
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <f_isEmptyFIFOBuffer>:

bool f_isEmptyFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	if (CircularFIFOBuffer->u16_BufferSize == 0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <f_isEmptyFIFOBuffer+0x14>

	{
		return true ;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <f_isEmptyFIFOBuffer+0x16>
	}
	else
	{
		return false;
 80025ea:	2300      	movs	r3, #0
	}
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <f_addElemFIFOBuffer>:
//		return (uint16_t) (BUFFER_SIZE - CircularFIFOBuffer->u16Head + CircularFIFOBuffer->u16Tail);
//	}
//}

bool f_addElemFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer, uint8_t data)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	000a      	movs	r2, r1
 80025fe:	1cfb      	adds	r3, r7, #3
 8002600:	701a      	strb	r2, [r3, #0]
	if (f_isFullFIFOBuffer(CircularFIFOBuffer) != true)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff ffd7 	bl	80025b8 <f_isFullFIFOBuffer>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4053      	eors	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01d      	beq.n	8002654 <f_addElemFIFOBuffer+0x60>
	{
		CircularFIFOBuffer->Buffer[CircularFIFOBuffer->u16Head] = data;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	001a      	movs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	189b      	adds	r3, r3, r2
 8002622:	1cfa      	adds	r2, r7, #3
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	719a      	strb	r2, [r3, #6]

		if (CircularFIFOBuffer->u16Head < (BUFFER_SIZE - 1) )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	2b30      	cmp	r3, #48	; 0x30
 800262e:	d806      	bhi.n	800263e <f_addElemFIFOBuffer+0x4a>
		{
			CircularFIFOBuffer->u16Head++;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	889b      	ldrh	r3, [r3, #4]
 8002634:	3301      	adds	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	809a      	strh	r2, [r3, #4]
 800263c:	e002      	b.n	8002644 <f_addElemFIFOBuffer+0x50>

		}
		else
		{
			CircularFIFOBuffer->u16Head = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	809a      	strh	r2, [r3, #4]
		}
		CircularFIFOBuffer->u16_BufferSize++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	801a      	strh	r2, [r3, #0]
		return true;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <f_addElemFIFOBuffer+0x62>
	}
	else
	{
		return false;
 8002654:	2300      	movs	r3, #0
	}
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}

0800265e <f_getElemFIFOBuffer>:

bool f_getElemFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer, uint8_t* theElement)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	if (f_isEmptyFIFOBuffer(CircularFIFOBuffer) != true)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff ffb3 	bl	80025d6 <f_isEmptyFIFOBuffer>
 8002670:	0003      	movs	r3, r0
 8002672:	001a      	movs	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01d      	beq.n	80026ba <f_getElemFIFOBuffer+0x5c>
	{
		*theElement = CircularFIFOBuffer->Buffer[CircularFIFOBuffer->u16Tail];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	885b      	ldrh	r3, [r3, #2]
 8002682:	001a      	movs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	189b      	adds	r3, r3, r2
 8002688:	799a      	ldrb	r2, [r3, #6]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	701a      	strb	r2, [r3, #0]
		if (CircularFIFOBuffer->u16Tail < (BUFFER_SIZE-1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	885b      	ldrh	r3, [r3, #2]
 8002692:	2b30      	cmp	r3, #48	; 0x30
 8002694:	d806      	bhi.n	80026a4 <f_getElemFIFOBuffer+0x46>
		{
			CircularFIFOBuffer->u16Tail++;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	885b      	ldrh	r3, [r3, #2]
 800269a:	3301      	adds	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	805a      	strh	r2, [r3, #2]
 80026a2:	e002      	b.n	80026aa <f_getElemFIFOBuffer+0x4c>
		}
		else
		{
			CircularFIFOBuffer->u16Tail = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	805a      	strh	r2, [r3, #2]
		}
		CircularFIFOBuffer->u16_BufferSize--;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		return false;
	}
	return true;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <f_getElemFIFOBuffer+0x5e>
		return false;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <__NVIC_SetPriority>:
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b7f      	cmp	r3, #127	; 0x7f
 80026d8:	d828      	bhi.n	800272c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <__NVIC_SetPriority+0xd4>)
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	33c0      	adds	r3, #192	; 0xc0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	589b      	ldr	r3, [r3, r2]
 80026ea:	1dfa      	adds	r2, r7, #7
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	0011      	movs	r1, r2
 80026f0:	2203      	movs	r2, #3
 80026f2:	400a      	ands	r2, r1
 80026f4:	00d2      	lsls	r2, r2, #3
 80026f6:	21ff      	movs	r1, #255	; 0xff
 80026f8:	4091      	lsls	r1, r2
 80026fa:	000a      	movs	r2, r1
 80026fc:	43d2      	mvns	r2, r2
 80026fe:	401a      	ands	r2, r3
 8002700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	401a      	ands	r2, r3
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0018      	movs	r0, r3
 8002710:	2303      	movs	r3, #3
 8002712:	4003      	ands	r3, r0
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002718:	481f      	ldr	r0, [pc, #124]	; (8002798 <__NVIC_SetPriority+0xd4>)
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b25b      	sxtb	r3, r3
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	430a      	orrs	r2, r1
 8002724:	33c0      	adds	r3, #192	; 0xc0
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	501a      	str	r2, [r3, r0]
}
 800272a:	e031      	b.n	8002790 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <__NVIC_SetPriority+0xd8>)
 800272e:	1dfb      	adds	r3, r7, #7
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	0019      	movs	r1, r3
 8002734:	230f      	movs	r3, #15
 8002736:	400b      	ands	r3, r1
 8002738:	3b08      	subs	r3, #8
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3306      	adds	r3, #6
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	3304      	adds	r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1dfa      	adds	r2, r7, #7
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	0011      	movs	r1, r2
 800274c:	2203      	movs	r2, #3
 800274e:	400a      	ands	r2, r1
 8002750:	00d2      	lsls	r2, r2, #3
 8002752:	21ff      	movs	r1, #255	; 0xff
 8002754:	4091      	lsls	r1, r2
 8002756:	000a      	movs	r2, r1
 8002758:	43d2      	mvns	r2, r2
 800275a:	401a      	ands	r2, r3
 800275c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	22ff      	movs	r2, #255	; 0xff
 8002764:	401a      	ands	r2, r3
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	0018      	movs	r0, r3
 800276c:	2303      	movs	r3, #3
 800276e:	4003      	ands	r3, r0
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <__NVIC_SetPriority+0xd8>)
 8002776:	1dfb      	adds	r3, r7, #7
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	001c      	movs	r4, r3
 800277c:	230f      	movs	r3, #15
 800277e:	4023      	ands	r3, r4
 8002780:	3b08      	subs	r3, #8
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	430a      	orrs	r2, r1
 8002786:	3306      	adds	r3, #6
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	18c3      	adds	r3, r0, r3
 800278c:	3304      	adds	r3, #4
 800278e:	601a      	str	r2, [r3, #0]
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b003      	add	sp, #12
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <SysTick_Config>:
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	045b      	lsls	r3, r3, #17
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d301      	bcc.n	80027b8 <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 80027b4:	2301      	movs	r3, #1
 80027b6:	e010      	b.n	80027da <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <SysTick_Config+0x44>)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	3a01      	subs	r2, #1
 80027be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c0:	2301      	movs	r3, #1
 80027c2:	425b      	negs	r3, r3
 80027c4:	2103      	movs	r1, #3
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff ff7c 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x44>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x44>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <EcuM_0>:

void EcuM_Init(void);
void EcuM_MainFunction(void);

void EcuM_0(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	EcuM_Init();
 80027ec:	f000 f828 	bl	8002840 <EcuM_Init>
	ButtonDrv_Init();
 80027f0:	f7ff fe70 	bl	80024d4 <ButtonDrv_Init>
	LedDrv_Init();
 80027f4:	f000 f84b 	bl	800288e <LedDrv_Init>
	USARTDrv_Init();
 80027f8:	f000 fb32 	bl	8002e60 <USARTDrv_Init>
	TheApp_Init();
 80027fc:	f000 f8d4 	bl	80029a8 <TheApp_Init>
	AdcDrv_Init();
 8002800:	f7ff fe4a 	bl	8002498 <AdcDrv_Init>

	while(1)
	{
		if (ru32_OldSysTick != ru32_SysTick)
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <EcuM_0+0x38>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <EcuM_0+0x3c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d0f9      	beq.n	8002804 <EcuM_0+0x1c>
		{
			EcuM_MainFunction();
 8002810:	f000 f82c 	bl	800286c <EcuM_MainFunction>
			ru32_OldSysTick = ru32_SysTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <EcuM_0+0x3c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b01      	ldr	r3, [pc, #4]	; (8002820 <EcuM_0+0x38>)
 800281a:	601a      	str	r2, [r3, #0]
		if (ru32_OldSysTick != ru32_SysTick)
 800281c:	e7f2      	b.n	8002804 <EcuM_0+0x1c>
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000114 	.word	0x20000114
 8002824:	20000110 	.word	0x20000110

08002828 <EcuM_SysTickCallBack>:
		}
	}
}

void EcuM_SysTickCallBack(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	ru32_SysTick++;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <EcuM_SysTickCallBack+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	4b02      	ldr	r3, [pc, #8]	; (800283c <EcuM_SysTickCallBack+0x14>)
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000110 	.word	0x20000110

08002840 <EcuM_Init>:

void EcuM_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff fb9f 	bl	8001f8c <LL_RCC_GetSystemClocksFreq>
	SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000);
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	22fa      	movs	r2, #250	; 0xfa
 8002854:	0091      	lsls	r1, r2, #2
 8002856:	0018      	movs	r0, r3
 8002858:	f7fd fc5e 	bl	8000118 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	0018      	movs	r0, r3
 8002860:	f7ff ff9e 	bl	80027a0 <SysTick_Config>
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}

0800286c <EcuM_MainFunction>:


void EcuM_MainFunction(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
	ButtonDrv_MainFunction();
 8002870:	f7ff fe88 	bl	8002584 <ButtonDrv_MainFunction>
	LedDrv_MainFunction();
 8002874:	f000 f82c 	bl	80028d0 <LedDrv_MainFunction>
	USARTDrv_MainFunction();
 8002878:	f000 fb12 	bl	8002ea0 <USARTDrv_MainFunction>
	TheAPP_MainFunction();
 800287c:	f000 f8a2 	bl	80029c4 <TheAPP_MainFunction>
	f_USARTCommProt_Main();
 8002880:	f000 fc74 	bl	800316c <f_USARTCommProt_Main>
	AdcDrv_MainFunction();
 8002884:	f7ff fe0d 	bl	80024a2 <AdcDrv_MainFunction>

//	Test_Drv();

}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <LedDrv_Init>:


LedConfig ledConfig;

void LedDrv_Init(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
	LED_GREEN_GPIO_Port ->BRR = LED_GREEN_Pin;
 8002892:	23a0      	movs	r3, #160	; 0xa0
 8002894:	05db      	lsls	r3, r3, #23
 8002896:	2220      	movs	r2, #32
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
//	LED_RED_GPIO_Port ->BRR = LED_RED_Pin;

}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <f_ConfigValueSet>:

void f_ConfigValueSet(unsigned int u16Sts,unsigned int u16Id, unsigned int u16Period)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
	ledConfig.u16LedSts = u16Sts;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <f_ConfigValueSet+0x2c>)
 80028b2:	801a      	strh	r2, [r3, #0]
	ledConfig.u16LedId = u16Id;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <f_ConfigValueSet+0x2c>)
 80028ba:	805a      	strh	r2, [r3, #2]
	ledConfig.u16LedPeriod = u16Period;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b02      	ldr	r3, [pc, #8]	; (80028cc <f_ConfigValueSet+0x2c>)
 80028c2:	809a      	strh	r2, [r3, #4]
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000120 	.word	0x20000120

080028d0 <LedDrv_MainFunction>:

void LedDrv_MainFunction(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
	if(ledConfig.u16LedSts != 0u)
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <LedDrv_MainFunction+0xcc>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d05a      	beq.n	8002994 <LedDrv_MainFunction+0xc4>
	{
		if (ledConfig.u16LedId == 2)
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <LedDrv_MainFunction+0xcc>)
 80028e0:	885b      	ldrh	r3, [r3, #2]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d129      	bne.n	800293a <LedDrv_MainFunction+0x6a>
		{
			uLedBlink = 1000 / ledConfig.u16LedPeriod;
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <LedDrv_MainFunction+0xcc>)
 80028e8:	889b      	ldrh	r3, [r3, #4]
 80028ea:	0019      	movs	r1, r3
 80028ec:	23fa      	movs	r3, #250	; 0xfa
 80028ee:	0098      	lsls	r0, r3, #2
 80028f0:	f7fd fc9c 	bl	800022c <__divsi3>
 80028f4:	0003      	movs	r3, r0
 80028f6:	001a      	movs	r2, r3
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <LedDrv_MainFunction+0xd0>)
 80028fa:	601a      	str	r2, [r3, #0]
			if(uLedBlink <= ru32_LedTimer++)
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c59      	adds	r1, r3, #1
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <LedDrv_MainFunction+0xd0>)
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	4293      	cmp	r3, r2
 800290c:	d342      	bcc.n	8002994 <LedDrv_MainFunction+0xc4>
			{
				uint32_t odr = READ_REG(LED_RED_GPIO_Port->ODR);
 800290e:	23a0      	movs	r3, #160	; 0xa0
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	603b      	str	r3, [r7, #0]
				WRITE_REG(LED_RED_GPIO_Port->BSRR, ((odr & LED_RED_Pin) << 16u) | (~odr & LED_RED_Pin));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	401a      	ands	r2, r3
 8002920:	0011      	movs	r1, r2
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	43db      	mvns	r3, r3
 8002926:	2202      	movs	r2, #2
 8002928:	401a      	ands	r2, r3
 800292a:	23a0      	movs	r3, #160	; 0xa0
 800292c:	05db      	lsls	r3, r3, #23
 800292e:	430a      	orrs	r2, r1
 8002930:	619a      	str	r2, [r3, #24]
				ru32_LedTimer = 0u;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
				WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
				ru32_LedTimer = 0u;
			}
		}
	}
}
 8002938:	e02c      	b.n	8002994 <LedDrv_MainFunction+0xc4>
		else if (ledConfig.u16LedId == 1)
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <LedDrv_MainFunction+0xcc>)
 800293c:	885b      	ldrh	r3, [r3, #2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d128      	bne.n	8002994 <LedDrv_MainFunction+0xc4>
			uLedBlink = 1000 / ledConfig.u16LedPeriod;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <LedDrv_MainFunction+0xcc>)
 8002944:	889b      	ldrh	r3, [r3, #4]
 8002946:	0019      	movs	r1, r3
 8002948:	23fa      	movs	r3, #250	; 0xfa
 800294a:	0098      	lsls	r0, r3, #2
 800294c:	f7fd fc6e 	bl	800022c <__divsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	001a      	movs	r2, r3
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <LedDrv_MainFunction+0xd0>)
 8002956:	601a      	str	r2, [r3, #0]
			if(uLedBlink <= ru32_LedTimer++)
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c59      	adds	r1, r3, #1
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 8002960:	6011      	str	r1, [r2, #0]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <LedDrv_MainFunction+0xd0>)
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4293      	cmp	r3, r2
 8002968:	d314      	bcc.n	8002994 <LedDrv_MainFunction+0xc4>
				uint32_t odr = READ_REG(LED_GREEN_GPIO_Port->ODR);
 800296a:	23a0      	movs	r3, #160	; 0xa0
 800296c:	05db      	lsls	r3, r3, #23
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	607b      	str	r3, [r7, #4]
				WRITE_REG(LED_GREEN_GPIO_Port->BSRR, ((odr & LED_GREEN_Pin) << 16u) | (~odr & LED_GREEN_Pin));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	039b      	lsls	r3, r3, #14
 800297a:	401a      	ands	r2, r3
 800297c:	0011      	movs	r1, r2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	43db      	mvns	r3, r3
 8002982:	2220      	movs	r2, #32
 8002984:	401a      	ands	r2, r3
 8002986:	23a0      	movs	r3, #160	; 0xa0
 8002988:	05db      	lsls	r3, r3, #23
 800298a:	430a      	orrs	r2, r1
 800298c:	619a      	str	r2, [r3, #24]
				ru32_LedTimer = 0u;
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <LedDrv_MainFunction+0xd4>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000120 	.word	0x20000120
 80029a0:	2000011c 	.word	0x2000011c
 80029a4:	20000118 	.word	0x20000118

080029a8 <TheApp_Init>:
uint16_t u16ValueBlinkUSART = 0u;

ByteBitField byteBitField;

void TheApp_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	byteBitField.BytesofData.u8FirstBit = 0;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <TheApp_Init+0x18>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
	byteBitField.BytesofData.u8SecondBit = 0;
 80029b2:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <TheApp_Init+0x18>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	2000012c 	.word	0x2000012c

080029c4 <TheAPP_MainFunction>:


void TheAPP_MainFunction(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
//	TheAPP_GetClickButton();
//	TheAPP_GetDataFromUSART(u8App_RxBuffer, 15, u16ReceiverLength);
	if(u16FlagCallBack == true)
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <TheAPP_MainFunction+0x38>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <TheAPP_MainFunction+0x32>
	{

		u16PeriodUSART = TheAPP_SetPeriodParameters(u16ValueBlinkUSART);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <TheAPP_MainFunction+0x3c>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f817 	bl	8002a08 <TheAPP_SetPeriodParameters>
 80029da:	0003      	movs	r3, r0
 80029dc:	001a      	movs	r2, r3
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <TheAPP_MainFunction+0x40>)
 80029e0:	801a      	strh	r2, [r3, #0]
		f_ConfigValueSet(1, 1, u16PeriodUSART);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <TheAPP_MainFunction+0x40>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	001a      	movs	r2, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff ff58 	bl	80028a0 <f_ConfigValueSet>
		u16FlagCallBack = false;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <TheAPP_MainFunction+0x38>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
//	if(u16PreviousValueBlinkBtn != u16PeriodButton)
//	{
//		f_ConfigValueSet(1, 1, u16PeriodButton);
//		u16PreviousValueBlinkBtn = u16PeriodButton;
//	}
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000128 	.word	0x20000128
 8002a00:	2000012a 	.word	0x2000012a
 8002a04:	20000126 	.word	0x20000126

08002a08 <TheAPP_SetPeriodParameters>:

uint16_t TheAPP_SetPeriodParameters(uint16_t u16ValueSet)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	0002      	movs	r2, r0
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	801a      	strh	r2, [r3, #0]
	uint16_t u16ReturnValue;
	if (0 <= u16ValueSet && u16ValueSet <= 500)
 8002a14:	1dbb      	adds	r3, r7, #6
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	23fa      	movs	r3, #250	; 0xfa
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d804      	bhi.n	8002a2a <TheAPP_SetPeriodParameters+0x22>
	{
		u16ReturnValue = 1;
 8002a20:	230e      	movs	r3, #14
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e03a      	b.n	8002aa0 <TheAPP_SetPeriodParameters+0x98>
	}
	else if (500 <= u16ValueSet && u16ValueSet <= 1000)
 8002a2a:	1dbb      	adds	r3, r7, #6
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	23fa      	movs	r3, #250	; 0xfa
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d30a      	bcc.n	8002a4c <TheAPP_SetPeriodParameters+0x44>
 8002a36:	1dbb      	adds	r3, r7, #6
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	23fa      	movs	r3, #250	; 0xfa
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d804      	bhi.n	8002a4c <TheAPP_SetPeriodParameters+0x44>
	{
		u16ReturnValue = 2;
 8002a42:	230e      	movs	r3, #14
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2202      	movs	r2, #2
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e029      	b.n	8002aa0 <TheAPP_SetPeriodParameters+0x98>
	}
	else if (1000 <= u16ValueSet && u16ValueSet <= 2000)
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	23fa      	movs	r3, #250	; 0xfa
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d30a      	bcc.n	8002a6e <TheAPP_SetPeriodParameters+0x66>
 8002a58:	1dbb      	adds	r3, r7, #6
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	23fa      	movs	r3, #250	; 0xfa
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d804      	bhi.n	8002a6e <TheAPP_SetPeriodParameters+0x66>
	{
		u16ReturnValue = 5;
 8002a64:	230e      	movs	r3, #14
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2205      	movs	r2, #5
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	e018      	b.n	8002aa0 <TheAPP_SetPeriodParameters+0x98>
	}

	else if (2000 <= u16ValueSet && u16ValueSet <= 3000)
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	23fa      	movs	r3, #250	; 0xfa
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d309      	bcc.n	8002a8e <TheAPP_SetPeriodParameters+0x86>
 8002a7a:	1dbb      	adds	r3, r7, #6
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <TheAPP_SetPeriodParameters+0xa8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d804      	bhi.n	8002a8e <TheAPP_SetPeriodParameters+0x86>
	{
		u16ReturnValue = 10;
 8002a84:	230e      	movs	r3, #14
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	220a      	movs	r2, #10
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e008      	b.n	8002aa0 <TheAPP_SetPeriodParameters+0x98>
	}
	else if (3000 <= u16ValueSet)
 8002a8e:	1dbb      	adds	r3, r7, #6
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <TheAPP_SetPeriodParameters+0xac>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d903      	bls.n	8002aa0 <TheAPP_SetPeriodParameters+0x98>
	{
		u16ReturnValue = 0;
 8002a98:	230e      	movs	r3, #14
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
	}
	return u16ReturnValue;
 8002aa0:	230e      	movs	r3, #14
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	881b      	ldrh	r3, [r3, #0]
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	00000bb8 	.word	0x00000bb8
 8002ab4:	00000bb7 	.word	0x00000bb7

08002ab8 <TheAPP_CallBack>:
//
//	u16PeriodUSART = TheAPP_SetPeriodParameters(byteBitField.u16InfoBits);
//}

void TheAPP_CallBack(uint16_t u16Value)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	0002      	movs	r2, r0
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	801a      	strh	r2, [r3, #0]
	u16FlagCallBack = true;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <TheAPP_CallBack+0x24>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
	u16ValueBlinkUSART = u16Value;
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <TheAPP_CallBack+0x28>)
 8002acc:	1dba      	adds	r2, r7, #6
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	801a      	strh	r2, [r3, #0]
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000128 	.word	0x20000128
 8002ae0:	2000012a 	.word	0x2000012a

08002ae4 <LL_USART_IsActiveFlag_PE>:
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <LL_USART_IsActiveFlag_PE+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_USART_IsActiveFlag_PE+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <LL_USART_IsActiveFlag_FE>:
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d101      	bne.n	8002b1e <LL_USART_IsActiveFlag_FE+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_USART_IsActiveFlag_FE+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <LL_USART_IsActiveFlag_NE>:
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2204      	movs	r2, #4
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d101      	bne.n	8002b40 <LL_USART_IsActiveFlag_NE+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_USART_IsActiveFlag_NE+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <LL_USART_IsActiveFlag_ORE>:
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	2208      	movs	r2, #8
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d101      	bne.n	8002b62 <LL_USART_IsActiveFlag_ORE+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d101      	bne.n	8002b84 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <LL_USART_IsActiveFlag_TC>:
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d101      	bne.n	8002ba6 <LL_USART_IsActiveFlag_TC+0x18>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_USART_IsActiveFlag_TC+0x1a>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d101      	bne.n	8002bc8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c48:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	2301      	movs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f383 8810 	msr	PRIMASK, r3
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2220      	movs	r2, #32
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			; (mov r8, r8)
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b006      	add	sp, #24
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2240      	movs	r2, #64	; 0x40
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cca:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b006      	add	sp, #24
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d08:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2240      	movs	r2, #64	; 0x40
 8002d1e:	4393      	bics	r3, r2
 8002d20:	001a      	movs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b006      	add	sp, #24
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d42:	f3ef 8310 	mrs	r3, PRIMASK
 8002d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d48:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f383 8810 	msr	PRIMASK, r3
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	4393      	bics	r3, r2
 8002d60:	001a      	movs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b006      	add	sp, #24
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d101      	bne.n	8002d92 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d101      	bne.n	8002db4 <LL_USART_IsEnabledIT_TC+0x18>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <LL_USART_IsEnabledIT_TC+0x1a>
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	d101      	bne.n	8002dd6 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <LL_USART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(const USART_TypeDef *USARTx)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	401a      	ands	r2, r3
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d101      	bne.n	8002dfe <LL_USART_IsEnabledIT_PE+0x1e>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <LL_USART_IsEnabledIT_PE+0x20>
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <LL_USART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2201      	movs	r2, #1
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <LL_USART_IsEnabledIT_ERROR+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <LL_USART_IsEnabledIT_ERROR+0x1a>
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2db      	uxtb	r3, r3
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	000a      	movs	r2, r1
 8002e4a:	1cfb      	adds	r3, r7, #3
 8002e4c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8002e4e:	1cfb      	adds	r3, r7, #3
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <USARTDrv_Init>:
CircularFIFOBuffer Rx_CircularFIFOBuffer;

/*---------------------------------------------------------*/

void USARTDrv_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART1);
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <USARTDrv_Init+0x30>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff feea 	bl	8002c40 <LL_USART_EnableIT_RXNE_RXFNE>
	u16Temp = 10;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <USARTDrv_Init+0x34>)
 8002e6e:	220a      	movs	r2, #10
 8002e70:	801a      	strh	r2, [r3, #0]
	Tx_CircularFIFOBuffer.u16Head = 0u;
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <USARTDrv_Init+0x38>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	809a      	strh	r2, [r3, #4]
	Tx_CircularFIFOBuffer.u16Tail = 0u;
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <USARTDrv_Init+0x38>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	805a      	strh	r2, [r3, #2]

	Rx_CircularFIFOBuffer.u16Head = 0u;
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <USARTDrv_Init+0x3c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	809a      	strh	r2, [r3, #4]
	Rx_CircularFIFOBuffer.u16Tail = 0u;
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <USARTDrv_Init+0x3c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	805a      	strh	r2, [r3, #2]
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013800 	.word	0x40013800
 8002e94:	20000180 	.word	0x20000180
 8002e98:	20000148 	.word	0x20000148
 8002e9c:	20000184 	.word	0x20000184

08002ea0 <USARTDrv_MainFunction>:


/*---------------------------------------------------------*/

void USARTDrv_MainFunction(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
	 uint16_t u16_length = 0u;
 8002ea6:	1dbb      	adds	r3, r7, #6
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]

	 if(u16USART_Timer > TIMER_TASK)
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <USARTDrv_MainFunction+0x50>)
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	23fa      	movs	r3, #250	; 0xfa
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d911      	bls.n	8002edc <USARTDrv_MainFunction+0x3c>
	 {
		 u16USART_Timer=0;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <USARTDrv_MainFunction+0x50>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	801a      	strh	r2, [r3, #0]
		 counter++;
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <USARTDrv_MainFunction+0x54>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <USARTDrv_MainFunction+0x54>)
 8002ec6:	601a      	str	r2, [r3, #0]
		 u16_length = sprintf((uint8_t *)BufferTx, "String :%d\n", counter);
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <USARTDrv_MainFunction+0x54>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <USARTDrv_MainFunction+0x58>)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <USARTDrv_MainFunction+0x5c>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fac1 	bl	8003458 <siprintf>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	1dbb      	adds	r3, r7, #6
 8002eda:	801a      	strh	r2, [r3, #0]

//		 USART_SendBuffer(BufferTx, 15, &u16_length);

	}
	 u16USART_Timer++;
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <USARTDrv_MainFunction+0x50>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <USARTDrv_MainFunction+0x50>)
 8002ee6:	801a      	strh	r2, [r3, #0]
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000140 	.word	0x20000140
 8002ef4:	20000144 	.word	0x20000144
 8002ef8:	08003d44 	.word	0x08003d44
 8002efc:	20000130 	.word	0x20000130

08002f00 <USART_SendBuffer>:

/*---------------------------------------------------------*/

void USART_SendBuffer(uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	1c0a      	adds	r2, r1, #0
 8002f10:	801a      	strh	r2, [r3, #0]
	uint16_t u16_Len = 0u;
 8002f12:	2316      	movs	r3, #22
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2200      	movs	r2, #0
 8002f18:	801a      	strh	r2, [r3, #0]
	*RecievedLen = 0u;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]

	while( (!f_isFullFIFOBuffer(&Tx_CircularFIFOBuffer)) &&  (Len > (u16_Len)) )
 8002f20:	e015      	b.n	8002f4e <USART_SendBuffer+0x4e>
	{
		f_addElemFIFOBuffer(&Tx_CircularFIFOBuffer, *Data);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <USART_SendBuffer+0x80>)
 8002f28:	0011      	movs	r1, r2
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff fb62 	bl	80025f4 <f_addElemFIFOBuffer>
		Data++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
		u16_Len++;
 8002f36:	2116      	movs	r1, #22
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	3201      	adds	r2, #1
 8002f40:	801a      	strh	r2, [r3, #0]
		(*RecievedLen)++;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	801a      	strh	r2, [r3, #0]
	while( (!f_isFullFIFOBuffer(&Tx_CircularFIFOBuffer)) &&  (Len > (u16_Len)) )
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <USART_SendBuffer+0x80>)
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff fb31 	bl	80025b8 <f_isFullFIFOBuffer>
 8002f56:	0003      	movs	r3, r0
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4053      	eors	r3, r2
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <USART_SendBuffer+0x74>
 8002f64:	230a      	movs	r3, #10
 8002f66:	18fa      	adds	r2, r7, r3
 8002f68:	2316      	movs	r3, #22
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	8812      	ldrh	r2, [r2, #0]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8d6      	bhi.n	8002f22 <USART_SendBuffer+0x22>
	}
	USART_TxHandlerIsr();
 8002f74:	f000 f896 	bl	80030a4 <USART_TxHandlerIsr>
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b006      	add	sp, #24
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000148 	.word	0x20000148

08002f84 <USART_SysCallBack>:

/*---------------------------------------------------------*/


void USART_SysCallBack(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	  /*Reset parity error*/
	  	if( (0u != LL_USART_IsActiveFlag_PE(USART1)) && (0u != LL_USART_IsEnabledIT_PE(USART1)) )
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <USART_SysCallBack+0xf4>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff fdaa 	bl	8002ae4 <LL_USART_IsActiveFlag_PE>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d009      	beq.n	8002fa8 <USART_SysCallBack+0x24>
 8002f94:	4b38      	ldr	r3, [pc, #224]	; (8003078 <USART_SysCallBack+0xf4>)
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ff22 	bl	8002de0 <LL_USART_IsEnabledIT_PE>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d003      	beq.n	8002fa8 <USART_SysCallBack+0x24>
	  	{
	  		LL_USART_ClearFlag_PE(USART1);
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fe15 	bl	8002bd2 <LL_USART_ClearFlag_PE>
	  	}

	  	/*Reset frame error*/
	  	if( (0u != LL_USART_IsActiveFlag_FE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8002fa8:	4b33      	ldr	r3, [pc, #204]	; (8003078 <USART_SysCallBack+0xf4>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff fdab 	bl	8002b06 <LL_USART_IsActiveFlag_FE>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d009      	beq.n	8002fc8 <USART_SysCallBack+0x44>
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff ff26 	bl	8002e08 <LL_USART_IsEnabledIT_ERROR>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d003      	beq.n	8002fc8 <USART_SysCallBack+0x44>
	  	{
	  		LL_USART_ClearFlag_FE(USART1);
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff fe10 	bl	8002be8 <LL_USART_ClearFlag_FE>
	  	}

	  	/*Reset noise error*/
	  	if( (0u != LL_USART_IsActiveFlag_NE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff fdac 	bl	8002b28 <LL_USART_IsActiveFlag_NE>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d009      	beq.n	8002fe8 <USART_SysCallBack+0x64>
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff ff16 	bl	8002e08 <LL_USART_IsEnabledIT_ERROR>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d003      	beq.n	8002fe8 <USART_SysCallBack+0x64>
	  	{
	  		LL_USART_ClearFlag_NE(USART1);
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fe0b 	bl	8002bfe <LL_USART_ClearFlag_NE>
	  	}

	  	/*Reset Over-run error*/
	  	if( (0u != LL_USART_IsActiveFlag_ORE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <USART_SysCallBack+0xf4>)
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff fdad 	bl	8002b4a <LL_USART_IsActiveFlag_ORE>
 8002ff0:	1e03      	subs	r3, r0, #0
 8002ff2:	d009      	beq.n	8003008 <USART_SysCallBack+0x84>
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <USART_SysCallBack+0xf4>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff ff06 	bl	8002e08 <LL_USART_IsEnabledIT_ERROR>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d003      	beq.n	8003008 <USART_SysCallBack+0x84>
	  	{
	  		LL_USART_ClearFlag_ORE(USART1);
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <USART_SysCallBack+0xf4>)
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff fe06 	bl	8002c14 <LL_USART_ClearFlag_ORE>
	  	}

	  	/*RX interrupt*/
	  	if( (0u != LL_USART_IsActiveFlag_RXNE(USART1)) && (0u != LL_USART_IsEnabledIT_RXNE(USART1)) )
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <USART_SysCallBack+0xf4>)
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff fdae 	bl	8002b6c <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d007      	beq.n	8003024 <USART_SysCallBack+0xa0>
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <USART_SysCallBack+0xf4>)
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff feaf 	bl	8002d7a <LL_USART_IsEnabledIT_RXNE_RXFNE>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d001      	beq.n	8003024 <USART_SysCallBack+0xa0>
	  	{
	  		USART_RxHandlerIsr();
 8003020:	f000 f82c 	bl	800307c <USART_RxHandlerIsr>
	  	}

	  	/*TX buffer empty interrupt*/
		if( (0u != LL_USART_IsActiveFlag_TXE(USART1)) && (0u != LL_USART_IsEnabledIT_TXE(USART1)) )
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <USART_SysCallBack+0xf4>)
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff fdc2 	bl	8002bb0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d00b      	beq.n	8003048 <USART_SysCallBack+0xc4>
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <USART_SysCallBack+0xf4>)
 8003032:	0018      	movs	r0, r3
 8003034:	f7ff fec3 	bl	8002dbe <LL_USART_IsEnabledIT_TXE_TXFNF>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d005      	beq.n	8003048 <USART_SysCallBack+0xc4>
	  	{
	  		LL_USART_DisableIT_TXE(USART1);
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <USART_SysCallBack+0xf4>)
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff fe7b 	bl	8002d3a <LL_USART_DisableIT_TXE_TXFNF>
	  		USART_TxHandlerIsr();
 8003044:	f000 f82e 	bl	80030a4 <USART_TxHandlerIsr>

	  	}

	  	/*TX completed interrupt*/
	  	if( (0u != LL_USART_IsActiveFlag_TC(USART1)) && (0u != LL_USART_IsEnabledIT_TC(USART1)) )
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <USART_SysCallBack+0xf4>)
 800304a:	0018      	movs	r0, r3
 800304c:	f7ff fd9f 	bl	8002b8e <LL_USART_IsActiveFlag_TC>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d00d      	beq.n	8003070 <USART_SysCallBack+0xec>
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <USART_SysCallBack+0xf4>)
 8003056:	0018      	movs	r0, r3
 8003058:	f7ff fea0 	bl	8002d9c <LL_USART_IsEnabledIT_TC>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d007      	beq.n	8003070 <USART_SysCallBack+0xec>
	  	{
	  		LL_USART_DisableIT_TC(USART1);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <USART_SysCallBack+0xf4>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fe49 	bl	8002cfa <LL_USART_DisableIT_TC>
	  		LL_USART_ClearFlag_TC(USART1);
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <USART_SysCallBack+0xf4>)
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fddd 	bl	8002c2a <LL_USART_ClearFlag_TC>
	  	}
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	40013800 	.word	0x40013800

0800307c <USART_RxHandlerIsr>:

/*---------------------------------------------------------*/

void USART_RxHandlerIsr(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	f_addElemFIFOBuffer(&Rx_CircularFIFOBuffer, LL_USART_ReceiveData8(USART1));
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <USART_RxHandlerIsr+0x20>)
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff fed1 	bl	8002e2a <LL_USART_ReceiveData8>
 8003088:	0003      	movs	r3, r0
 800308a:	001a      	movs	r2, r3
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <USART_RxHandlerIsr+0x24>)
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff faaf 	bl	80025f4 <f_addElemFIFOBuffer>
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013800 	.word	0x40013800
 80030a0:	20000184 	.word	0x20000184

080030a4 <USART_TxHandlerIsr>:

/*---------------------------------------------------------*/

void USART_TxHandlerIsr(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
	uint8_t u8LocalElements;
	while( (!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer)) && ( 0u != LL_USART_IsActiveFlag_TXE(USART1) ) )
 80030aa:	e00c      	b.n	80030c6 <USART_TxHandlerIsr+0x22>
	{
		f_getElemFIFOBuffer(&Tx_CircularFIFOBuffer, &u8LocalElements);
 80030ac:	1dfa      	adds	r2, r7, #7
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <USART_TxHandlerIsr+0x74>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff fad3 	bl	800265e <f_getElemFIFOBuffer>
		LL_USART_TransmitData8(USART1, u8LocalElements);
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4a17      	ldr	r2, [pc, #92]	; (800311c <USART_TxHandlerIsr+0x78>)
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f7ff febd 	bl	8002e40 <LL_USART_TransmitData8>
	while( (!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer)) && ( 0u != LL_USART_IsActiveFlag_TXE(USART1) ) )
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <USART_TxHandlerIsr+0x74>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff fa84 	bl	80025d6 <f_isEmptyFIFOBuffer>
 80030ce:	0003      	movs	r3, r0
 80030d0:	001a      	movs	r2, r3
 80030d2:	2301      	movs	r3, #1
 80030d4:	4053      	eors	r3, r2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <USART_TxHandlerIsr+0x44>
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <USART_TxHandlerIsr+0x78>)
 80030de:	0018      	movs	r0, r3
 80030e0:	f7ff fd66 	bl	8002bb0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d1e1      	bne.n	80030ac <USART_TxHandlerIsr+0x8>
	}

	if(!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer))
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <USART_TxHandlerIsr+0x74>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff fa73 	bl	80025d6 <f_isEmptyFIFOBuffer>
 80030f0:	0003      	movs	r3, r0
 80030f2:	001a      	movs	r2, r3
 80030f4:	2301      	movs	r3, #1
 80030f6:	4053      	eors	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <USART_TxHandlerIsr+0x64>
	{
		LL_USART_EnableIT_TXE(USART1);
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <USART_TxHandlerIsr+0x78>)
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff fddb 	bl	8002cbc <LL_USART_EnableIT_TXE_TXFNF>
	}
	else
	{
		LL_USART_EnableIT_TC(USART1);
	}
}
 8003106:	e003      	b.n	8003110 <USART_TxHandlerIsr+0x6c>
		LL_USART_EnableIT_TC(USART1);
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <USART_TxHandlerIsr+0x78>)
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff fdb7 	bl	8002c7e <LL_USART_EnableIT_TC>
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000148 	.word	0x20000148
 800311c:	40013800 	.word	0x40013800

08003120 <f_USART_GetCharData>:

/*---------------------------------------------------------*/

bool f_USART_GetCharData(uint8_t* u8DataInformation)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	bool lbReturnValue = false;
 8003128:	240f      	movs	r4, #15
 800312a:	193b      	adds	r3, r7, r4
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
	if(!f_isEmptyFIFOBuffer(&Rx_CircularFIFOBuffer))
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <f_USART_GetCharData+0x48>)
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff fa4f 	bl	80025d6 <f_isEmptyFIFOBuffer>
 8003138:	0003      	movs	r3, r0
 800313a:	001a      	movs	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	4053      	eors	r3, r2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <f_USART_GetCharData+0x38>
	{
		f_getElemFIFOBuffer(&Rx_CircularFIFOBuffer, u8DataInformation);
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <f_USART_GetCharData+0x48>)
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fa86 	bl	800265e <f_getElemFIFOBuffer>
		lbReturnValue = true;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
	}
	return lbReturnValue;
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b005      	add	sp, #20
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000184 	.word	0x20000184

0800316c <f_USARTCommProt_Main>:
uint16_t u16Index = 0;

/*---------------------------------------------------------*/

void f_USARTCommProt_Main(void)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
	bool IsNotEmpty = false;
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	uint8_t u8DataReceived = 0u;
 8003178:	1d7b      	adds	r3, r7, #5
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
	uint8_t u8CRCResult;
	do
	{
		IsNotEmpty = f_USART_GetCharData(&u8DataReceived);
 800317e:	1dfc      	adds	r4, r7, #7
 8003180:	1d7b      	adds	r3, r7, #5
 8003182:	0018      	movs	r0, r3
 8003184:	f7ff ffcc 	bl	8003120 <f_USART_GetCharData>
 8003188:	0003      	movs	r3, r0
 800318a:	7023      	strb	r3, [r4, #0]
		if(IsNotEmpty != false)
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d100      	bne.n	8003196 <f_USARTCommProt_Main+0x2a>
 8003194:	e088      	b.n	80032a8 <f_USARTCommProt_Main+0x13c>
		{
			switch(ActualState)
 8003196:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d900      	bls.n	80031a0 <f_USARTCommProt_Main+0x34>
 800319e:	e091      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <f_USARTCommProt_Main+0x17c>)
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	469f      	mov	pc, r3
			{
				case WAIT_StartByte:
				{
					if(USART_IS_START_BYTE(u8DataReceived))
 80031aa:	1d7b      	adds	r3, r7, #5
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2baa      	cmp	r3, #170	; 0xaa
 80031b0:	d000      	beq.n	80031b4 <f_USARTCommProt_Main+0x48>
 80031b2:	e084      	b.n	80032be <f_USARTCommProt_Main+0x152>
					{
						TU_CommPacketData.ST_USART_Packet.StartByte = u8DataReceived;
 80031b4:	1d7b      	adds	r3, r7, #5
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <f_USARTCommProt_Main+0x180>)
 80031ba:	701a      	strb	r2, [r3, #0]
						ActualState = WAIT_CommandByte;
 80031bc:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80031c2:	e07c      	b.n	80032be <f_USARTCommProt_Main+0x152>
				}
				case WAIT_CommandByte:
				{
					if(USART_IS_SUPPORTED_CMD(u8DataReceived, CMD_SET_LED_PERIOD))
 80031c4:	1d7b      	adds	r3, r7, #5
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <f_USARTCommProt_Main+0x70>
					{
						TU_CommPacketData.ST_USART_Packet.CmdByte = u8DataReceived;
 80031cc:	1d7b      	adds	r3, r7, #5
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	4b46      	ldr	r3, [pc, #280]	; (80032ec <f_USARTCommProt_Main+0x180>)
 80031d2:	705a      	strb	r2, [r3, #1]
						ActualState = WAIT_LengthByte;
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						ActualState = WAIT_StartByte;
					}
					break;
 80031da:	e073      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
						ActualState = WAIT_StartByte;
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
					break;
 80031e2:	e06f      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
				}
				case WAIT_LengthByte:
				{
					if (u8DataReceived > LENGTH_USART_DATA)
 80031e4:	1d7b      	adds	r3, r7, #5
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d90a      	bls.n	8003202 <f_USARTCommProt_Main+0x96>
					{

						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, STATE_NEDETERMINATION$);
 80031ec:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 80031ee:	2124      	movs	r1, #36	; 0x24
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 f8db 	bl	80033ac <f_USARTCommProt_IsDatPacketTightening>
						 USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <f_USARTCommProt_Main+0x188>)
 80031f8:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 80031fa:	2105      	movs	r1, #5
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fe7f 	bl	8002f00 <USART_SendBuffer>
					}
					TU_CommPacketData.ST_USART_Packet.LengthByte = u8DataReceived;
 8003202:	1d7b      	adds	r3, r7, #5
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <f_USARTCommProt_Main+0x180>)
 8003208:	709a      	strb	r2, [r3, #2]
					ActualState = WAIT_DataByte;
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 800320c:	2203      	movs	r2, #3
 800320e:	701a      	strb	r2, [r3, #0]
					break;
 8003210:	e058      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
				}
				case WAIT_DataByte:
				{

					TU_CommPacketData.ST_USART_Packet.DataByte[u16Index] = u8DataReceived;
 8003212:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <f_USARTCommProt_Main+0x18c>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	0019      	movs	r1, r3
 8003218:	1d7b      	adds	r3, r7, #5
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	4b33      	ldr	r3, [pc, #204]	; (80032ec <f_USARTCommProt_Main+0x180>)
 800321e:	185b      	adds	r3, r3, r1
 8003220:	70da      	strb	r2, [r3, #3]
					u16Index++;
 8003222:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <f_USARTCommProt_Main+0x18c>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <f_USARTCommProt_Main+0x18c>)
 800322c:	801a      	strh	r2, [r3, #0]
					if(u16Index == TU_CommPacketData.ST_USART_Packet.LengthByte)
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <f_USARTCommProt_Main+0x180>)
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <f_USARTCommProt_Main+0x18c>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d142      	bne.n	80032c2 <f_USARTCommProt_Main+0x156>
					{
						ActualState = WAIT_CRCByte;
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
						u16Index = 0;
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <f_USARTCommProt_Main+0x18c>)
 8003244:	2200      	movs	r2, #0
 8003246:	801a      	strh	r2, [r3, #0]
					}

					break;
 8003248:	e03b      	b.n	80032c2 <f_USARTCommProt_Main+0x156>
				}
				case WAIT_CRCByte:
				{
				    u8CRCResult = f_USARTCommProt_IsCRCByte((&TU_CommPacketData.u8USARTByteArray), (HEADER_LENGTH + TU_CommPacketData.ST_USART_Packet.LengthByte));
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <f_USARTCommProt_Main+0x180>)
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	3303      	adds	r3, #3
 8003250:	b2da      	uxtb	r2, r3
 8003252:	1dbc      	adds	r4, r7, #6
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <f_USARTCommProt_Main+0x180>)
 8003256:	0011      	movs	r1, r2
 8003258:	0018      	movs	r0, r3
 800325a:	f000 f851 	bl	8003300 <f_USARTCommProt_IsCRCByte>
 800325e:	0003      	movs	r3, r0
 8003260:	7023      	strb	r3, [r4, #0]
					if(u8CRCResult == u8DataReceived)
 8003262:	1d7b      	adds	r3, r7, #5
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	1dba      	adds	r2, r7, #6
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10d      	bne.n	800328a <f_USARTCommProt_Main+0x11e>
					{
						f_USARTCommProt_IsProcessData();
 800326e:	f000 f879 	bl	8003364 <f_USARTCommProt_IsProcessData>
						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, ACK_BYTE);
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 8003274:	2106      	movs	r1, #6
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f898 	bl	80033ac <f_USARTCommProt_IsDatPacketTightening>
						USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <f_USARTCommProt_Main+0x188>)
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 8003280:	2105      	movs	r1, #5
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff fe3c 	bl	8002f00 <USART_SendBuffer>
 8003288:	e00a      	b.n	80032a0 <f_USARTCommProt_Main+0x134>

					}
					else
					{
						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, NACK_BYTE);
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 800328c:	2115      	movs	r1, #21
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f88c 	bl	80033ac <f_USARTCommProt_IsDatPacketTightening>
						USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <f_USARTCommProt_Main+0x188>)
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <f_USARTCommProt_Main+0x184>)
 8003298:	2105      	movs	r1, #5
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fe30 	bl	8002f00 <USART_SendBuffer>
					}
					ActualState = WAIT_StartByte;
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
					break;
 80032a6:	e00d      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
				}
			}
		}
		else if(USART_CHECK_TIMEOUT(u16DelayDataBetween))
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <f_USARTCommProt_Main+0x190>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	2b63      	cmp	r3, #99	; 0x63
 80032ae:	d909      	bls.n	80032c4 <f_USARTCommProt_Main+0x158>
		{
			u16DelayDataBetween = 0u;
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <f_USARTCommProt_Main+0x190>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	801a      	strh	r2, [r3, #0]
			ActualState = WAIT_StartByte;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <f_USARTCommProt_Main+0x178>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e002      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
					break;
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	e000      	b.n	80032c4 <f_USARTCommProt_Main+0x158>
					break;
 80032c2:	46c0      	nop			; (mov r8, r8)
		}

		u16DelayDataBetween++;
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <f_USARTCommProt_Main+0x190>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <f_USARTCommProt_Main+0x190>)
 80032ce:	801a      	strh	r2, [r3, #0]
	}
	while(IsNotEmpty);
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d000      	beq.n	80032da <f_USARTCommProt_Main+0x16e>
 80032d8:	e751      	b.n	800317e <f_USARTCommProt_Main+0x12>
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b003      	add	sp, #12
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	200001bc 	.word	0x200001bc
 80032e8:	08003de0 	.word	0x08003de0
 80032ec:	200001c0 	.word	0x200001c0
 80032f0:	200001cc 	.word	0x200001cc
 80032f4:	200001d4 	.word	0x200001d4
 80032f8:	200001d6 	.word	0x200001d6
 80032fc:	200001d2 	.word	0x200001d2

08003300 <f_USARTCommProt_IsCRCByte>:

/*---------------------------------------------------------*/

uint8_t f_USARTCommProt_IsCRCByte(uint8_t* CommPacketData, uint8_t u8LengthPacket)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	000a      	movs	r2, r1
 800330a:	1cfb      	adds	r3, r7, #3
 800330c:	701a      	strb	r2, [r3, #0]
	uint8_t lu8Index = 0;
 800330e:	210f      	movs	r1, #15
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
	uint8_t lu8ResultCRC = 0u;
 8003316:	230e      	movs	r3, #14
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]

	for (lu8Index = 0; lu8Index < u8LengthPacket; lu8Index++)
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e010      	b.n	8003348 <f_USARTCommProt_IsCRCByte+0x48>
	{
		lu8ResultCRC = CommPacketData[lu8Index] ^ lu8ResultCRC;
 8003326:	200f      	movs	r0, #15
 8003328:	183b      	adds	r3, r7, r0
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	18d3      	adds	r3, r2, r3
 8003330:	7819      	ldrb	r1, [r3, #0]
 8003332:	220e      	movs	r2, #14
 8003334:	18bb      	adds	r3, r7, r2
 8003336:	18ba      	adds	r2, r7, r2
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	404a      	eors	r2, r1
 800333c:	701a      	strb	r2, [r3, #0]
	for (lu8Index = 0; lu8Index < u8LengthPacket; lu8Index++)
 800333e:	183b      	adds	r3, r7, r0
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	183b      	adds	r3, r7, r0
 8003344:	3201      	adds	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	230f      	movs	r3, #15
 800334a:	18fa      	adds	r2, r7, r3
 800334c:	1cfb      	adds	r3, r7, #3
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3e7      	bcc.n	8003326 <f_USARTCommProt_IsCRCByte+0x26>
	}
	return lu8ResultCRC;
 8003356:	230e      	movs	r3, #14
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}

08003364 <f_USARTCommProt_IsProcessData>:
}

/*---------------------------------------------------------*/

void f_USARTCommProt_IsProcessData()
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
	uint16_t u16InformationData = 0;
 800336a:	1dbb      	adds	r3, r7, #6
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]

	if(TU_CommPacketData.ST_USART_Packet.CmdByte == CMD_SET_LED_PERIOD)
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <f_USARTCommProt_IsProcessData+0x44>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d112      	bne.n	800339e <f_USARTCommProt_IsProcessData+0x3a>
	{
		u16InformationData = TU_CommPacketData.ST_USART_Packet.DataByte[0] << 8;
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <f_USARTCommProt_IsProcessData+0x44>)
 800337a:	78db      	ldrb	r3, [r3, #3]
 800337c:	b29a      	uxth	r2, r3
 800337e:	1dbb      	adds	r3, r7, #6
 8003380:	0212      	lsls	r2, r2, #8
 8003382:	801a      	strh	r2, [r3, #0]
		u16InformationData |= TU_CommPacketData.ST_USART_Packet.DataByte[1];
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <f_USARTCommProt_IsProcessData+0x44>)
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	b299      	uxth	r1, r3
 800338a:	1dbb      	adds	r3, r7, #6
 800338c:	1dba      	adds	r2, r7, #6
 800338e:	8812      	ldrh	r2, [r2, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	801a      	strh	r2, [r3, #0]
		TheAPP_CallBack(u16InformationData);
 8003394:	1dbb      	adds	r3, r7, #6
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff fb8d 	bl	8002ab8 <TheAPP_CallBack>

	}
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b002      	add	sp, #8
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	200001c0 	.word	0x200001c0

080033ac <f_USARTCommProt_IsDatPacketTightening>:

/*---------------------------------------------------------*/


void f_USARTCommProt_IsDatPacketTightening(uint8_t* u8PacketReceived, uint8_t u8DataReceiver)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	000a      	movs	r2, r1
 80033b6:	1cfb      	adds	r3, r7, #3
 80033b8:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[0] = START_BYTE_VALUE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	22aa      	movs	r2, #170	; 0xaa
 80033be:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[1] = CMD_TRANSMISION_REQUEST;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	2281      	movs	r2, #129	; 0x81
 80033c6:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[2] = SIZE_BYTE_LENGTH;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3302      	adds	r3, #2
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[3] = u8DataReceiver;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3303      	adds	r3, #3
 80033d4:	1cfa      	adds	r2, r7, #3
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[4] = f_USARTCommProt_IsCRCByte(u8PacketReceived, (LENGTH_DATA_ARRAY_RECIVED - 1));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1d1c      	adds	r4, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2104      	movs	r1, #4
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff8c 	bl	8003300 <f_USARTCommProt_IsCRCByte>
 80033e8:	0003      	movs	r3, r0
 80033ea:	7023      	strb	r3, [r4, #0]

}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b003      	add	sp, #12
 80033f2:	bd90      	pop	{r4, r7, pc}

080033f4 <__errno>:
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <__errno+0x8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	2000000c 	.word	0x2000000c

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2600      	movs	r6, #0
 8003404:	4d0c      	ldr	r5, [pc, #48]	; (8003438 <__libc_init_array+0x38>)
 8003406:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	2600      	movs	r6, #0
 8003412:	f000 fc8b 	bl	8003d2c <_init>
 8003416:	4d0a      	ldr	r5, [pc, #40]	; (8003440 <__libc_init_array+0x40>)
 8003418:	4c0a      	ldr	r4, [pc, #40]	; (8003444 <__libc_init_array+0x44>)
 800341a:	1b64      	subs	r4, r4, r5
 800341c:	10a4      	asrs	r4, r4, #2
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	00b3      	lsls	r3, r6, #2
 8003426:	58eb      	ldr	r3, [r5, r3]
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	00b3      	lsls	r3, r6, #2
 8003430:	58eb      	ldr	r3, [r5, r3]
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08003e28 	.word	0x08003e28
 800343c:	08003e28 	.word	0x08003e28
 8003440:	08003e28 	.word	0x08003e28
 8003444:	08003e2c 	.word	0x08003e2c

08003448 <memset>:
 8003448:	0003      	movs	r3, r0
 800344a:	1882      	adds	r2, r0, r2
 800344c:	4293      	cmp	r3, r2
 800344e:	d100      	bne.n	8003452 <memset+0xa>
 8003450:	4770      	bx	lr
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	e7f9      	b.n	800344c <memset+0x4>

08003458 <siprintf>:
 8003458:	b40e      	push	{r1, r2, r3}
 800345a:	b500      	push	{lr}
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <siprintf+0x34>)
 800345e:	b09c      	sub	sp, #112	; 0x70
 8003460:	ab1d      	add	r3, sp, #116	; 0x74
 8003462:	9002      	str	r0, [sp, #8]
 8003464:	9006      	str	r0, [sp, #24]
 8003466:	9107      	str	r1, [sp, #28]
 8003468:	9104      	str	r1, [sp, #16]
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <siprintf+0x38>)
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <siprintf+0x3c>)
 800346e:	cb04      	ldmia	r3!, {r2}
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	a902      	add	r1, sp, #8
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f000 f870 	bl	800355c <_svfiprintf_r>
 800347c:	2300      	movs	r3, #0
 800347e:	9a02      	ldr	r2, [sp, #8]
 8003480:	7013      	strb	r3, [r2, #0]
 8003482:	b01c      	add	sp, #112	; 0x70
 8003484:	bc08      	pop	{r3}
 8003486:	b003      	add	sp, #12
 8003488:	4718      	bx	r3
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	7fffffff 	.word	0x7fffffff
 8003490:	2000000c 	.word	0x2000000c
 8003494:	ffff0208 	.word	0xffff0208

08003498 <__ssputs_r>:
 8003498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349a:	688e      	ldr	r6, [r1, #8]
 800349c:	b085      	sub	sp, #20
 800349e:	0007      	movs	r7, r0
 80034a0:	000c      	movs	r4, r1
 80034a2:	9203      	str	r2, [sp, #12]
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	d83c      	bhi.n	8003524 <__ssputs_r+0x8c>
 80034aa:	2390      	movs	r3, #144	; 0x90
 80034ac:	898a      	ldrh	r2, [r1, #12]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	421a      	tst	r2, r3
 80034b2:	d034      	beq.n	800351e <__ssputs_r+0x86>
 80034b4:	6909      	ldr	r1, [r1, #16]
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	6960      	ldr	r0, [r4, #20]
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	2303      	movs	r3, #3
 80034c0:	4343      	muls	r3, r0
 80034c2:	0fdd      	lsrs	r5, r3, #31
 80034c4:	18ed      	adds	r5, r5, r3
 80034c6:	9b01      	ldr	r3, [sp, #4]
 80034c8:	9802      	ldr	r0, [sp, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	181b      	adds	r3, r3, r0
 80034ce:	106d      	asrs	r5, r5, #1
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	d900      	bls.n	80034d6 <__ssputs_r+0x3e>
 80034d4:	001d      	movs	r5, r3
 80034d6:	0553      	lsls	r3, r2, #21
 80034d8:	d532      	bpl.n	8003540 <__ssputs_r+0xa8>
 80034da:	0029      	movs	r1, r5
 80034dc:	0038      	movs	r0, r7
 80034de:	f000 fb53 	bl	8003b88 <_malloc_r>
 80034e2:	1e06      	subs	r6, r0, #0
 80034e4:	d109      	bne.n	80034fa <__ssputs_r+0x62>
 80034e6:	230c      	movs	r3, #12
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	2340      	movs	r3, #64	; 0x40
 80034ec:	2001      	movs	r0, #1
 80034ee:	89a2      	ldrh	r2, [r4, #12]
 80034f0:	4240      	negs	r0, r0
 80034f2:	4313      	orrs	r3, r2
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	b005      	add	sp, #20
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	9a02      	ldr	r2, [sp, #8]
 80034fc:	6921      	ldr	r1, [r4, #16]
 80034fe:	f000 faba 	bl	8003a76 <memcpy>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <__ssputs_r+0xc0>)
 8003506:	401a      	ands	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	4313      	orrs	r3, r2
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	9b02      	ldr	r3, [sp, #8]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	18f6      	adds	r6, r6, r3
 8003514:	6026      	str	r6, [r4, #0]
 8003516:	6165      	str	r5, [r4, #20]
 8003518:	9e01      	ldr	r6, [sp, #4]
 800351a:	1aed      	subs	r5, r5, r3
 800351c:	60a5      	str	r5, [r4, #8]
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	429e      	cmp	r6, r3
 8003522:	d900      	bls.n	8003526 <__ssputs_r+0x8e>
 8003524:	9e01      	ldr	r6, [sp, #4]
 8003526:	0032      	movs	r2, r6
 8003528:	9903      	ldr	r1, [sp, #12]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f000 faac 	bl	8003a88 <memmove>
 8003530:	68a3      	ldr	r3, [r4, #8]
 8003532:	2000      	movs	r0, #0
 8003534:	1b9b      	subs	r3, r3, r6
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	199e      	adds	r6, r3, r6
 800353c:	6026      	str	r6, [r4, #0]
 800353e:	e7da      	b.n	80034f6 <__ssputs_r+0x5e>
 8003540:	002a      	movs	r2, r5
 8003542:	0038      	movs	r0, r7
 8003544:	f000 fb96 	bl	8003c74 <_realloc_r>
 8003548:	1e06      	subs	r6, r0, #0
 800354a:	d1e0      	bne.n	800350e <__ssputs_r+0x76>
 800354c:	0038      	movs	r0, r7
 800354e:	6921      	ldr	r1, [r4, #16]
 8003550:	f000 faae 	bl	8003ab0 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x4e>
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	fffffb7f 	.word	0xfffffb7f

0800355c <_svfiprintf_r>:
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b0a1      	sub	sp, #132	; 0x84
 8003560:	9003      	str	r0, [sp, #12]
 8003562:	001d      	movs	r5, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	000f      	movs	r7, r1
 8003568:	0016      	movs	r6, r2
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	d511      	bpl.n	8003592 <_svfiprintf_r+0x36>
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <_svfiprintf_r+0x36>
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	f000 fb07 	bl	8003b88 <_malloc_r>
 800357a:	6038      	str	r0, [r7, #0]
 800357c:	6138      	str	r0, [r7, #16]
 800357e:	2800      	cmp	r0, #0
 8003580:	d105      	bne.n	800358e <_svfiprintf_r+0x32>
 8003582:	230c      	movs	r3, #12
 8003584:	9a03      	ldr	r2, [sp, #12]
 8003586:	3801      	subs	r0, #1
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	b021      	add	sp, #132	; 0x84
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	ac08      	add	r4, sp, #32
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	3320      	adds	r3, #32
 800359a:	7663      	strb	r3, [r4, #25]
 800359c:	3310      	adds	r3, #16
 800359e:	76a3      	strb	r3, [r4, #26]
 80035a0:	9507      	str	r5, [sp, #28]
 80035a2:	0035      	movs	r5, r6
 80035a4:	782b      	ldrb	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_svfiprintf_r+0x52>
 80035aa:	2b25      	cmp	r3, #37	; 0x25
 80035ac:	d147      	bne.n	800363e <_svfiprintf_r+0xe2>
 80035ae:	1bab      	subs	r3, r5, r6
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d00c      	beq.n	80035d0 <_svfiprintf_r+0x74>
 80035b6:	0032      	movs	r2, r6
 80035b8:	0039      	movs	r1, r7
 80035ba:	9803      	ldr	r0, [sp, #12]
 80035bc:	f7ff ff6c 	bl	8003498 <__ssputs_r>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d100      	bne.n	80035c6 <_svfiprintf_r+0x6a>
 80035c4:	e0ae      	b.n	8003724 <_svfiprintf_r+0x1c8>
 80035c6:	6962      	ldr	r2, [r4, #20]
 80035c8:	9b05      	ldr	r3, [sp, #20]
 80035ca:	4694      	mov	ip, r2
 80035cc:	4463      	add	r3, ip
 80035ce:	6163      	str	r3, [r4, #20]
 80035d0:	782b      	ldrb	r3, [r5, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <_svfiprintf_r+0x7c>
 80035d6:	e0a5      	b.n	8003724 <_svfiprintf_r+0x1c8>
 80035d8:	2201      	movs	r2, #1
 80035da:	2300      	movs	r3, #0
 80035dc:	4252      	negs	r2, r2
 80035de:	6062      	str	r2, [r4, #4]
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	3254      	adds	r2, #84	; 0x54
 80035e4:	1852      	adds	r2, r2, r1
 80035e6:	1c6e      	adds	r6, r5, #1
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	60e3      	str	r3, [r4, #12]
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	7013      	strb	r3, [r2, #0]
 80035f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80035f2:	2205      	movs	r2, #5
 80035f4:	7831      	ldrb	r1, [r6, #0]
 80035f6:	4854      	ldr	r0, [pc, #336]	; (8003748 <_svfiprintf_r+0x1ec>)
 80035f8:	f000 fa32 	bl	8003a60 <memchr>
 80035fc:	1c75      	adds	r5, r6, #1
 80035fe:	2800      	cmp	r0, #0
 8003600:	d11f      	bne.n	8003642 <_svfiprintf_r+0xe6>
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	06d3      	lsls	r3, r2, #27
 8003606:	d504      	bpl.n	8003612 <_svfiprintf_r+0xb6>
 8003608:	2353      	movs	r3, #83	; 0x53
 800360a:	a904      	add	r1, sp, #16
 800360c:	185b      	adds	r3, r3, r1
 800360e:	2120      	movs	r1, #32
 8003610:	7019      	strb	r1, [r3, #0]
 8003612:	0713      	lsls	r3, r2, #28
 8003614:	d504      	bpl.n	8003620 <_svfiprintf_r+0xc4>
 8003616:	2353      	movs	r3, #83	; 0x53
 8003618:	a904      	add	r1, sp, #16
 800361a:	185b      	adds	r3, r3, r1
 800361c:	212b      	movs	r1, #43	; 0x2b
 800361e:	7019      	strb	r1, [r3, #0]
 8003620:	7833      	ldrb	r3, [r6, #0]
 8003622:	2b2a      	cmp	r3, #42	; 0x2a
 8003624:	d016      	beq.n	8003654 <_svfiprintf_r+0xf8>
 8003626:	0035      	movs	r5, r6
 8003628:	2100      	movs	r1, #0
 800362a:	200a      	movs	r0, #10
 800362c:	68e3      	ldr	r3, [r4, #12]
 800362e:	782a      	ldrb	r2, [r5, #0]
 8003630:	1c6e      	adds	r6, r5, #1
 8003632:	3a30      	subs	r2, #48	; 0x30
 8003634:	2a09      	cmp	r2, #9
 8003636:	d94e      	bls.n	80036d6 <_svfiprintf_r+0x17a>
 8003638:	2900      	cmp	r1, #0
 800363a:	d111      	bne.n	8003660 <_svfiprintf_r+0x104>
 800363c:	e017      	b.n	800366e <_svfiprintf_r+0x112>
 800363e:	3501      	adds	r5, #1
 8003640:	e7b0      	b.n	80035a4 <_svfiprintf_r+0x48>
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <_svfiprintf_r+0x1ec>)
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	1ac0      	subs	r0, r0, r3
 8003648:	2301      	movs	r3, #1
 800364a:	4083      	lsls	r3, r0
 800364c:	4313      	orrs	r3, r2
 800364e:	002e      	movs	r6, r5
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	e7ce      	b.n	80035f2 <_svfiprintf_r+0x96>
 8003654:	9b07      	ldr	r3, [sp, #28]
 8003656:	1d19      	adds	r1, r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	9107      	str	r1, [sp, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	db01      	blt.n	8003664 <_svfiprintf_r+0x108>
 8003660:	930b      	str	r3, [sp, #44]	; 0x2c
 8003662:	e004      	b.n	800366e <_svfiprintf_r+0x112>
 8003664:	425b      	negs	r3, r3
 8003666:	60e3      	str	r3, [r4, #12]
 8003668:	2302      	movs	r3, #2
 800366a:	4313      	orrs	r3, r2
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	782b      	ldrb	r3, [r5, #0]
 8003670:	2b2e      	cmp	r3, #46	; 0x2e
 8003672:	d10a      	bne.n	800368a <_svfiprintf_r+0x12e>
 8003674:	786b      	ldrb	r3, [r5, #1]
 8003676:	2b2a      	cmp	r3, #42	; 0x2a
 8003678:	d135      	bne.n	80036e6 <_svfiprintf_r+0x18a>
 800367a:	9b07      	ldr	r3, [sp, #28]
 800367c:	3502      	adds	r5, #2
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	9207      	str	r2, [sp, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db2b      	blt.n	80036e0 <_svfiprintf_r+0x184>
 8003688:	9309      	str	r3, [sp, #36]	; 0x24
 800368a:	4e30      	ldr	r6, [pc, #192]	; (800374c <_svfiprintf_r+0x1f0>)
 800368c:	2203      	movs	r2, #3
 800368e:	0030      	movs	r0, r6
 8003690:	7829      	ldrb	r1, [r5, #0]
 8003692:	f000 f9e5 	bl	8003a60 <memchr>
 8003696:	2800      	cmp	r0, #0
 8003698:	d006      	beq.n	80036a8 <_svfiprintf_r+0x14c>
 800369a:	2340      	movs	r3, #64	; 0x40
 800369c:	1b80      	subs	r0, r0, r6
 800369e:	4083      	lsls	r3, r0
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	3501      	adds	r5, #1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	7829      	ldrb	r1, [r5, #0]
 80036aa:	2206      	movs	r2, #6
 80036ac:	4828      	ldr	r0, [pc, #160]	; (8003750 <_svfiprintf_r+0x1f4>)
 80036ae:	1c6e      	adds	r6, r5, #1
 80036b0:	7621      	strb	r1, [r4, #24]
 80036b2:	f000 f9d5 	bl	8003a60 <memchr>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d03c      	beq.n	8003734 <_svfiprintf_r+0x1d8>
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <_svfiprintf_r+0x1f8>)
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d125      	bne.n	800370c <_svfiprintf_r+0x1b0>
 80036c0:	2207      	movs	r2, #7
 80036c2:	9b07      	ldr	r3, [sp, #28]
 80036c4:	3307      	adds	r3, #7
 80036c6:	4393      	bics	r3, r2
 80036c8:	3308      	adds	r3, #8
 80036ca:	9307      	str	r3, [sp, #28]
 80036cc:	6963      	ldr	r3, [r4, #20]
 80036ce:	9a04      	ldr	r2, [sp, #16]
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	6163      	str	r3, [r4, #20]
 80036d4:	e765      	b.n	80035a2 <_svfiprintf_r+0x46>
 80036d6:	4343      	muls	r3, r0
 80036d8:	0035      	movs	r5, r6
 80036da:	2101      	movs	r1, #1
 80036dc:	189b      	adds	r3, r3, r2
 80036de:	e7a6      	b.n	800362e <_svfiprintf_r+0xd2>
 80036e0:	2301      	movs	r3, #1
 80036e2:	425b      	negs	r3, r3
 80036e4:	e7d0      	b.n	8003688 <_svfiprintf_r+0x12c>
 80036e6:	2300      	movs	r3, #0
 80036e8:	200a      	movs	r0, #10
 80036ea:	001a      	movs	r2, r3
 80036ec:	3501      	adds	r5, #1
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	7829      	ldrb	r1, [r5, #0]
 80036f2:	1c6e      	adds	r6, r5, #1
 80036f4:	3930      	subs	r1, #48	; 0x30
 80036f6:	2909      	cmp	r1, #9
 80036f8:	d903      	bls.n	8003702 <_svfiprintf_r+0x1a6>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c5      	beq.n	800368a <_svfiprintf_r+0x12e>
 80036fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003700:	e7c3      	b.n	800368a <_svfiprintf_r+0x12e>
 8003702:	4342      	muls	r2, r0
 8003704:	0035      	movs	r5, r6
 8003706:	2301      	movs	r3, #1
 8003708:	1852      	adds	r2, r2, r1
 800370a:	e7f1      	b.n	80036f0 <_svfiprintf_r+0x194>
 800370c:	ab07      	add	r3, sp, #28
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	003a      	movs	r2, r7
 8003712:	0021      	movs	r1, r4
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <_svfiprintf_r+0x1fc>)
 8003716:	9803      	ldr	r0, [sp, #12]
 8003718:	e000      	b.n	800371c <_svfiprintf_r+0x1c0>
 800371a:	bf00      	nop
 800371c:	9004      	str	r0, [sp, #16]
 800371e:	9b04      	ldr	r3, [sp, #16]
 8003720:	3301      	adds	r3, #1
 8003722:	d1d3      	bne.n	80036cc <_svfiprintf_r+0x170>
 8003724:	89bb      	ldrh	r3, [r7, #12]
 8003726:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003728:	065b      	lsls	r3, r3, #25
 800372a:	d400      	bmi.n	800372e <_svfiprintf_r+0x1d2>
 800372c:	e72d      	b.n	800358a <_svfiprintf_r+0x2e>
 800372e:	2001      	movs	r0, #1
 8003730:	4240      	negs	r0, r0
 8003732:	e72a      	b.n	800358a <_svfiprintf_r+0x2e>
 8003734:	ab07      	add	r3, sp, #28
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	003a      	movs	r2, r7
 800373a:	0021      	movs	r1, r4
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <_svfiprintf_r+0x1fc>)
 800373e:	9803      	ldr	r0, [sp, #12]
 8003740:	f000 f87c 	bl	800383c <_printf_i>
 8003744:	e7ea      	b.n	800371c <_svfiprintf_r+0x1c0>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	08003df4 	.word	0x08003df4
 800374c:	08003dfa 	.word	0x08003dfa
 8003750:	08003dfe 	.word	0x08003dfe
 8003754:	00000000 	.word	0x00000000
 8003758:	08003499 	.word	0x08003499

0800375c <_printf_common>:
 800375c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375e:	0015      	movs	r5, r2
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	688a      	ldr	r2, [r1, #8]
 8003764:	690b      	ldr	r3, [r1, #16]
 8003766:	000c      	movs	r4, r1
 8003768:	9000      	str	r0, [sp, #0]
 800376a:	4293      	cmp	r3, r2
 800376c:	da00      	bge.n	8003770 <_printf_common+0x14>
 800376e:	0013      	movs	r3, r2
 8003770:	0022      	movs	r2, r4
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	3243      	adds	r2, #67	; 0x43
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	2a00      	cmp	r2, #0
 800377a:	d001      	beq.n	8003780 <_printf_common+0x24>
 800377c:	3301      	adds	r3, #1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	d502      	bpl.n	800378c <_printf_common+0x30>
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	3302      	adds	r3, #2
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	2306      	movs	r3, #6
 8003790:	0017      	movs	r7, r2
 8003792:	401f      	ands	r7, r3
 8003794:	421a      	tst	r2, r3
 8003796:	d027      	beq.n	80037e8 <_printf_common+0x8c>
 8003798:	0023      	movs	r3, r4
 800379a:	3343      	adds	r3, #67	; 0x43
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	4193      	sbcs	r3, r2
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	0692      	lsls	r2, r2, #26
 80037a6:	d430      	bmi.n	800380a <_printf_common+0xae>
 80037a8:	0022      	movs	r2, r4
 80037aa:	9901      	ldr	r1, [sp, #4]
 80037ac:	9800      	ldr	r0, [sp, #0]
 80037ae:	9e08      	ldr	r6, [sp, #32]
 80037b0:	3243      	adds	r2, #67	; 0x43
 80037b2:	47b0      	blx	r6
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d025      	beq.n	8003804 <_printf_common+0xa8>
 80037b8:	2306      	movs	r3, #6
 80037ba:	6820      	ldr	r0, [r4, #0]
 80037bc:	682a      	ldr	r2, [r5, #0]
 80037be:	68e1      	ldr	r1, [r4, #12]
 80037c0:	2500      	movs	r5, #0
 80037c2:	4003      	ands	r3, r0
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d103      	bne.n	80037d0 <_printf_common+0x74>
 80037c8:	1a8d      	subs	r5, r1, r2
 80037ca:	43eb      	mvns	r3, r5
 80037cc:	17db      	asrs	r3, r3, #31
 80037ce:	401d      	ands	r5, r3
 80037d0:	68a3      	ldr	r3, [r4, #8]
 80037d2:	6922      	ldr	r2, [r4, #16]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	dd01      	ble.n	80037dc <_printf_common+0x80>
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	18ed      	adds	r5, r5, r3
 80037dc:	2700      	movs	r7, #0
 80037de:	42bd      	cmp	r5, r7
 80037e0:	d120      	bne.n	8003824 <_printf_common+0xc8>
 80037e2:	2000      	movs	r0, #0
 80037e4:	e010      	b.n	8003808 <_printf_common+0xac>
 80037e6:	3701      	adds	r7, #1
 80037e8:	68e3      	ldr	r3, [r4, #12]
 80037ea:	682a      	ldr	r2, [r5, #0]
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	42bb      	cmp	r3, r7
 80037f0:	ddd2      	ble.n	8003798 <_printf_common+0x3c>
 80037f2:	0022      	movs	r2, r4
 80037f4:	2301      	movs	r3, #1
 80037f6:	9901      	ldr	r1, [sp, #4]
 80037f8:	9800      	ldr	r0, [sp, #0]
 80037fa:	9e08      	ldr	r6, [sp, #32]
 80037fc:	3219      	adds	r2, #25
 80037fe:	47b0      	blx	r6
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d1f0      	bne.n	80037e6 <_printf_common+0x8a>
 8003804:	2001      	movs	r0, #1
 8003806:	4240      	negs	r0, r0
 8003808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800380a:	2030      	movs	r0, #48	; 0x30
 800380c:	18e1      	adds	r1, r4, r3
 800380e:	3143      	adds	r1, #67	; 0x43
 8003810:	7008      	strb	r0, [r1, #0]
 8003812:	0021      	movs	r1, r4
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	3145      	adds	r1, #69	; 0x45
 8003818:	7809      	ldrb	r1, [r1, #0]
 800381a:	18a2      	adds	r2, r4, r2
 800381c:	3243      	adds	r2, #67	; 0x43
 800381e:	3302      	adds	r3, #2
 8003820:	7011      	strb	r1, [r2, #0]
 8003822:	e7c1      	b.n	80037a8 <_printf_common+0x4c>
 8003824:	0022      	movs	r2, r4
 8003826:	2301      	movs	r3, #1
 8003828:	9901      	ldr	r1, [sp, #4]
 800382a:	9800      	ldr	r0, [sp, #0]
 800382c:	9e08      	ldr	r6, [sp, #32]
 800382e:	321a      	adds	r2, #26
 8003830:	47b0      	blx	r6
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d0e6      	beq.n	8003804 <_printf_common+0xa8>
 8003836:	3701      	adds	r7, #1
 8003838:	e7d1      	b.n	80037de <_printf_common+0x82>
	...

0800383c <_printf_i>:
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	b08b      	sub	sp, #44	; 0x2c
 8003840:	9206      	str	r2, [sp, #24]
 8003842:	000a      	movs	r2, r1
 8003844:	3243      	adds	r2, #67	; 0x43
 8003846:	9307      	str	r3, [sp, #28]
 8003848:	9005      	str	r0, [sp, #20]
 800384a:	9204      	str	r2, [sp, #16]
 800384c:	7e0a      	ldrb	r2, [r1, #24]
 800384e:	000c      	movs	r4, r1
 8003850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003852:	2a78      	cmp	r2, #120	; 0x78
 8003854:	d807      	bhi.n	8003866 <_printf_i+0x2a>
 8003856:	2a62      	cmp	r2, #98	; 0x62
 8003858:	d809      	bhi.n	800386e <_printf_i+0x32>
 800385a:	2a00      	cmp	r2, #0
 800385c:	d100      	bne.n	8003860 <_printf_i+0x24>
 800385e:	e0c1      	b.n	80039e4 <_printf_i+0x1a8>
 8003860:	2a58      	cmp	r2, #88	; 0x58
 8003862:	d100      	bne.n	8003866 <_printf_i+0x2a>
 8003864:	e08c      	b.n	8003980 <_printf_i+0x144>
 8003866:	0026      	movs	r6, r4
 8003868:	3642      	adds	r6, #66	; 0x42
 800386a:	7032      	strb	r2, [r6, #0]
 800386c:	e022      	b.n	80038b4 <_printf_i+0x78>
 800386e:	0010      	movs	r0, r2
 8003870:	3863      	subs	r0, #99	; 0x63
 8003872:	2815      	cmp	r0, #21
 8003874:	d8f7      	bhi.n	8003866 <_printf_i+0x2a>
 8003876:	f7fc fc45 	bl	8000104 <__gnu_thumb1_case_shi>
 800387a:	0016      	.short	0x0016
 800387c:	fff6001f 	.word	0xfff6001f
 8003880:	fff6fff6 	.word	0xfff6fff6
 8003884:	001ffff6 	.word	0x001ffff6
 8003888:	fff6fff6 	.word	0xfff6fff6
 800388c:	fff6fff6 	.word	0xfff6fff6
 8003890:	003600a8 	.word	0x003600a8
 8003894:	fff6009a 	.word	0xfff6009a
 8003898:	00b9fff6 	.word	0x00b9fff6
 800389c:	0036fff6 	.word	0x0036fff6
 80038a0:	fff6fff6 	.word	0xfff6fff6
 80038a4:	009e      	.short	0x009e
 80038a6:	0026      	movs	r6, r4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	3642      	adds	r6, #66	; 0x42
 80038ac:	1d11      	adds	r1, r2, #4
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	7033      	strb	r3, [r6, #0]
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0a7      	b.n	8003a08 <_printf_i+0x1cc>
 80038b8:	6808      	ldr	r0, [r1, #0]
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	1d0a      	adds	r2, r1, #4
 80038be:	0605      	lsls	r5, r0, #24
 80038c0:	d50b      	bpl.n	80038da <_printf_i+0x9e>
 80038c2:	680d      	ldr	r5, [r1, #0]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	da03      	bge.n	80038d2 <_printf_i+0x96>
 80038ca:	232d      	movs	r3, #45	; 0x2d
 80038cc:	9a04      	ldr	r2, [sp, #16]
 80038ce:	426d      	negs	r5, r5
 80038d0:	7013      	strb	r3, [r2, #0]
 80038d2:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <_printf_i+0x21c>)
 80038d4:	270a      	movs	r7, #10
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	e01b      	b.n	8003912 <_printf_i+0xd6>
 80038da:	680d      	ldr	r5, [r1, #0]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	0641      	lsls	r1, r0, #25
 80038e0:	d5f1      	bpl.n	80038c6 <_printf_i+0x8a>
 80038e2:	b22d      	sxth	r5, r5
 80038e4:	e7ef      	b.n	80038c6 <_printf_i+0x8a>
 80038e6:	680d      	ldr	r5, [r1, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	1d08      	adds	r0, r1, #4
 80038ec:	6018      	str	r0, [r3, #0]
 80038ee:	062e      	lsls	r6, r5, #24
 80038f0:	d501      	bpl.n	80038f6 <_printf_i+0xba>
 80038f2:	680d      	ldr	r5, [r1, #0]
 80038f4:	e003      	b.n	80038fe <_printf_i+0xc2>
 80038f6:	066d      	lsls	r5, r5, #25
 80038f8:	d5fb      	bpl.n	80038f2 <_printf_i+0xb6>
 80038fa:	680d      	ldr	r5, [r1, #0]
 80038fc:	b2ad      	uxth	r5, r5
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <_printf_i+0x21c>)
 8003900:	2708      	movs	r7, #8
 8003902:	9303      	str	r3, [sp, #12]
 8003904:	2a6f      	cmp	r2, #111	; 0x6f
 8003906:	d000      	beq.n	800390a <_printf_i+0xce>
 8003908:	3702      	adds	r7, #2
 800390a:	0023      	movs	r3, r4
 800390c:	2200      	movs	r2, #0
 800390e:	3343      	adds	r3, #67	; 0x43
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	60a3      	str	r3, [r4, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db03      	blt.n	8003922 <_printf_i+0xe6>
 800391a:	2204      	movs	r2, #4
 800391c:	6821      	ldr	r1, [r4, #0]
 800391e:	4391      	bics	r1, r2
 8003920:	6021      	str	r1, [r4, #0]
 8003922:	2d00      	cmp	r5, #0
 8003924:	d102      	bne.n	800392c <_printf_i+0xf0>
 8003926:	9e04      	ldr	r6, [sp, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00c      	beq.n	8003946 <_printf_i+0x10a>
 800392c:	9e04      	ldr	r6, [sp, #16]
 800392e:	0028      	movs	r0, r5
 8003930:	0039      	movs	r1, r7
 8003932:	f7fc fc77 	bl	8000224 <__aeabi_uidivmod>
 8003936:	9b03      	ldr	r3, [sp, #12]
 8003938:	3e01      	subs	r6, #1
 800393a:	5c5b      	ldrb	r3, [r3, r1]
 800393c:	7033      	strb	r3, [r6, #0]
 800393e:	002b      	movs	r3, r5
 8003940:	0005      	movs	r5, r0
 8003942:	429f      	cmp	r7, r3
 8003944:	d9f3      	bls.n	800392e <_printf_i+0xf2>
 8003946:	2f08      	cmp	r7, #8
 8003948:	d109      	bne.n	800395e <_printf_i+0x122>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	07db      	lsls	r3, r3, #31
 800394e:	d506      	bpl.n	800395e <_printf_i+0x122>
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	6922      	ldr	r2, [r4, #16]
 8003954:	4293      	cmp	r3, r2
 8003956:	dc02      	bgt.n	800395e <_printf_i+0x122>
 8003958:	2330      	movs	r3, #48	; 0x30
 800395a:	3e01      	subs	r6, #1
 800395c:	7033      	strb	r3, [r6, #0]
 800395e:	9b04      	ldr	r3, [sp, #16]
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	9b07      	ldr	r3, [sp, #28]
 8003966:	0021      	movs	r1, r4
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	9805      	ldr	r0, [sp, #20]
 800396c:	9b06      	ldr	r3, [sp, #24]
 800396e:	aa09      	add	r2, sp, #36	; 0x24
 8003970:	f7ff fef4 	bl	800375c <_printf_common>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d14c      	bne.n	8003a12 <_printf_i+0x1d6>
 8003978:	2001      	movs	r0, #1
 800397a:	4240      	negs	r0, r0
 800397c:	b00b      	add	sp, #44	; 0x2c
 800397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003980:	3145      	adds	r1, #69	; 0x45
 8003982:	700a      	strb	r2, [r1, #0]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <_printf_i+0x21c>)
 8003986:	9203      	str	r2, [sp, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	6821      	ldr	r1, [r4, #0]
 800398c:	ca20      	ldmia	r2!, {r5}
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	0608      	lsls	r0, r1, #24
 8003992:	d516      	bpl.n	80039c2 <_printf_i+0x186>
 8003994:	07cb      	lsls	r3, r1, #31
 8003996:	d502      	bpl.n	800399e <_printf_i+0x162>
 8003998:	2320      	movs	r3, #32
 800399a:	4319      	orrs	r1, r3
 800399c:	6021      	str	r1, [r4, #0]
 800399e:	2710      	movs	r7, #16
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	d1b2      	bne.n	800390a <_printf_i+0xce>
 80039a4:	2320      	movs	r3, #32
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	439a      	bics	r2, r3
 80039aa:	6022      	str	r2, [r4, #0]
 80039ac:	e7ad      	b.n	800390a <_printf_i+0xce>
 80039ae:	2220      	movs	r2, #32
 80039b0:	6809      	ldr	r1, [r1, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	0022      	movs	r2, r4
 80039b8:	2178      	movs	r1, #120	; 0x78
 80039ba:	3245      	adds	r2, #69	; 0x45
 80039bc:	7011      	strb	r1, [r2, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <_printf_i+0x220>)
 80039c0:	e7e1      	b.n	8003986 <_printf_i+0x14a>
 80039c2:	0648      	lsls	r0, r1, #25
 80039c4:	d5e6      	bpl.n	8003994 <_printf_i+0x158>
 80039c6:	b2ad      	uxth	r5, r5
 80039c8:	e7e4      	b.n	8003994 <_printf_i+0x158>
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	680d      	ldr	r5, [r1, #0]
 80039ce:	1d10      	adds	r0, r2, #4
 80039d0:	6949      	ldr	r1, [r1, #20]
 80039d2:	6018      	str	r0, [r3, #0]
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	062e      	lsls	r6, r5, #24
 80039d8:	d501      	bpl.n	80039de <_printf_i+0x1a2>
 80039da:	6019      	str	r1, [r3, #0]
 80039dc:	e002      	b.n	80039e4 <_printf_i+0x1a8>
 80039de:	066d      	lsls	r5, r5, #25
 80039e0:	d5fb      	bpl.n	80039da <_printf_i+0x19e>
 80039e2:	8019      	strh	r1, [r3, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	9e04      	ldr	r6, [sp, #16]
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	e7bb      	b.n	8003964 <_printf_i+0x128>
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	1d11      	adds	r1, r2, #4
 80039f0:	6019      	str	r1, [r3, #0]
 80039f2:	6816      	ldr	r6, [r2, #0]
 80039f4:	2100      	movs	r1, #0
 80039f6:	0030      	movs	r0, r6
 80039f8:	6862      	ldr	r2, [r4, #4]
 80039fa:	f000 f831 	bl	8003a60 <memchr>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d001      	beq.n	8003a06 <_printf_i+0x1ca>
 8003a02:	1b80      	subs	r0, r0, r6
 8003a04:	6060      	str	r0, [r4, #4]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9a04      	ldr	r2, [sp, #16]
 8003a0e:	7013      	strb	r3, [r2, #0]
 8003a10:	e7a8      	b.n	8003964 <_printf_i+0x128>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	0032      	movs	r2, r6
 8003a16:	9906      	ldr	r1, [sp, #24]
 8003a18:	9805      	ldr	r0, [sp, #20]
 8003a1a:	9d07      	ldr	r5, [sp, #28]
 8003a1c:	47a8      	blx	r5
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	d0aa      	beq.n	8003978 <_printf_i+0x13c>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	079b      	lsls	r3, r3, #30
 8003a26:	d415      	bmi.n	8003a54 <_printf_i+0x218>
 8003a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2a:	68e0      	ldr	r0, [r4, #12]
 8003a2c:	4298      	cmp	r0, r3
 8003a2e:	daa5      	bge.n	800397c <_printf_i+0x140>
 8003a30:	0018      	movs	r0, r3
 8003a32:	e7a3      	b.n	800397c <_printf_i+0x140>
 8003a34:	0022      	movs	r2, r4
 8003a36:	2301      	movs	r3, #1
 8003a38:	9906      	ldr	r1, [sp, #24]
 8003a3a:	9805      	ldr	r0, [sp, #20]
 8003a3c:	9e07      	ldr	r6, [sp, #28]
 8003a3e:	3219      	adds	r2, #25
 8003a40:	47b0      	blx	r6
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	d098      	beq.n	8003978 <_printf_i+0x13c>
 8003a46:	3501      	adds	r5, #1
 8003a48:	68e3      	ldr	r3, [r4, #12]
 8003a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	42ab      	cmp	r3, r5
 8003a50:	dcf0      	bgt.n	8003a34 <_printf_i+0x1f8>
 8003a52:	e7e9      	b.n	8003a28 <_printf_i+0x1ec>
 8003a54:	2500      	movs	r5, #0
 8003a56:	e7f7      	b.n	8003a48 <_printf_i+0x20c>
 8003a58:	08003e05 	.word	0x08003e05
 8003a5c:	08003e16 	.word	0x08003e16

08003a60 <memchr>:
 8003a60:	b2c9      	uxtb	r1, r1
 8003a62:	1882      	adds	r2, r0, r2
 8003a64:	4290      	cmp	r0, r2
 8003a66:	d101      	bne.n	8003a6c <memchr+0xc>
 8003a68:	2000      	movs	r0, #0
 8003a6a:	4770      	bx	lr
 8003a6c:	7803      	ldrb	r3, [r0, #0]
 8003a6e:	428b      	cmp	r3, r1
 8003a70:	d0fb      	beq.n	8003a6a <memchr+0xa>
 8003a72:	3001      	adds	r0, #1
 8003a74:	e7f6      	b.n	8003a64 <memchr+0x4>

08003a76 <memcpy>:
 8003a76:	2300      	movs	r3, #0
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d100      	bne.n	8003a80 <memcpy+0xa>
 8003a7e:	bd10      	pop	{r4, pc}
 8003a80:	5ccc      	ldrb	r4, [r1, r3]
 8003a82:	54c4      	strb	r4, [r0, r3]
 8003a84:	3301      	adds	r3, #1
 8003a86:	e7f8      	b.n	8003a7a <memcpy+0x4>

08003a88 <memmove>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	4288      	cmp	r0, r1
 8003a8c:	d902      	bls.n	8003a94 <memmove+0xc>
 8003a8e:	188b      	adds	r3, r1, r2
 8003a90:	4298      	cmp	r0, r3
 8003a92:	d303      	bcc.n	8003a9c <memmove+0x14>
 8003a94:	2300      	movs	r3, #0
 8003a96:	e007      	b.n	8003aa8 <memmove+0x20>
 8003a98:	5c8b      	ldrb	r3, [r1, r2]
 8003a9a:	5483      	strb	r3, [r0, r2]
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	d2fb      	bcs.n	8003a98 <memmove+0x10>
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	5ccc      	ldrb	r4, [r1, r3]
 8003aa4:	54c4      	strb	r4, [r0, r3]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1fa      	bne.n	8003aa2 <memmove+0x1a>
 8003aac:	e7f8      	b.n	8003aa0 <memmove+0x18>
	...

08003ab0 <_free_r>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	0005      	movs	r5, r0
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d010      	beq.n	8003ada <_free_r+0x2a>
 8003ab8:	1f0c      	subs	r4, r1, #4
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da00      	bge.n	8003ac2 <_free_r+0x12>
 8003ac0:	18e4      	adds	r4, r4, r3
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	f000 f918 	bl	8003cf8 <__malloc_lock>
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <_free_r+0x90>)
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <_free_r+0x2c>
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	6014      	str	r4, [r2, #0]
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	f000 f917 	bl	8003d08 <__malloc_unlock>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d908      	bls.n	8003af2 <_free_r+0x42>
 8003ae0:	6821      	ldr	r1, [r4, #0]
 8003ae2:	1860      	adds	r0, r4, r1
 8003ae4:	4283      	cmp	r3, r0
 8003ae6:	d1f3      	bne.n	8003ad0 <_free_r+0x20>
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	1841      	adds	r1, r0, r1
 8003aee:	6021      	str	r1, [r4, #0]
 8003af0:	e7ee      	b.n	8003ad0 <_free_r+0x20>
 8003af2:	001a      	movs	r2, r3
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <_free_r+0x4e>
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d9f9      	bls.n	8003af2 <_free_r+0x42>
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	1850      	adds	r0, r2, r1
 8003b02:	42a0      	cmp	r0, r4
 8003b04:	d10b      	bne.n	8003b1e <_free_r+0x6e>
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	1809      	adds	r1, r1, r0
 8003b0a:	1850      	adds	r0, r2, r1
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	4283      	cmp	r3, r0
 8003b10:	d1e0      	bne.n	8003ad4 <_free_r+0x24>
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	1841      	adds	r1, r0, r1
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7da      	b.n	8003ad4 <_free_r+0x24>
 8003b1e:	42a0      	cmp	r0, r4
 8003b20:	d902      	bls.n	8003b28 <_free_r+0x78>
 8003b22:	230c      	movs	r3, #12
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	e7d5      	b.n	8003ad4 <_free_r+0x24>
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	1860      	adds	r0, r4, r1
 8003b2c:	4283      	cmp	r3, r0
 8003b2e:	d103      	bne.n	8003b38 <_free_r+0x88>
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	1841      	adds	r1, r0, r1
 8003b36:	6021      	str	r1, [r4, #0]
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6054      	str	r4, [r2, #4]
 8003b3c:	e7ca      	b.n	8003ad4 <_free_r+0x24>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	200001d8 	.word	0x200001d8

08003b44 <sbrk_aligned>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4e0f      	ldr	r6, [pc, #60]	; (8003b84 <sbrk_aligned+0x40>)
 8003b48:	000d      	movs	r5, r1
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	0004      	movs	r4, r0
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d102      	bne.n	8003b58 <sbrk_aligned+0x14>
 8003b52:	f000 f8bf 	bl	8003cd4 <_sbrk_r>
 8003b56:	6030      	str	r0, [r6, #0]
 8003b58:	0029      	movs	r1, r5
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f000 f8ba 	bl	8003cd4 <_sbrk_r>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d00a      	beq.n	8003b7a <sbrk_aligned+0x36>
 8003b64:	2303      	movs	r3, #3
 8003b66:	1cc5      	adds	r5, r0, #3
 8003b68:	439d      	bics	r5, r3
 8003b6a:	42a8      	cmp	r0, r5
 8003b6c:	d007      	beq.n	8003b7e <sbrk_aligned+0x3a>
 8003b6e:	1a29      	subs	r1, r5, r0
 8003b70:	0020      	movs	r0, r4
 8003b72:	f000 f8af 	bl	8003cd4 <_sbrk_r>
 8003b76:	1c43      	adds	r3, r0, #1
 8003b78:	d101      	bne.n	8003b7e <sbrk_aligned+0x3a>
 8003b7a:	2501      	movs	r5, #1
 8003b7c:	426d      	negs	r5, r5
 8003b7e:	0028      	movs	r0, r5
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	200001dc 	.word	0x200001dc

08003b88 <_malloc_r>:
 8003b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	1ccb      	adds	r3, r1, #3
 8003b8e:	4393      	bics	r3, r2
 8003b90:	3308      	adds	r3, #8
 8003b92:	0006      	movs	r6, r0
 8003b94:	001f      	movs	r7, r3
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d232      	bcs.n	8003c00 <_malloc_r+0x78>
 8003b9a:	270c      	movs	r7, #12
 8003b9c:	42b9      	cmp	r1, r7
 8003b9e:	d831      	bhi.n	8003c04 <_malloc_r+0x7c>
 8003ba0:	0030      	movs	r0, r6
 8003ba2:	f000 f8a9 	bl	8003cf8 <__malloc_lock>
 8003ba6:	4d32      	ldr	r5, [pc, #200]	; (8003c70 <_malloc_r+0xe8>)
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	001c      	movs	r4, r3
 8003bac:	2c00      	cmp	r4, #0
 8003bae:	d12e      	bne.n	8003c0e <_malloc_r+0x86>
 8003bb0:	0039      	movs	r1, r7
 8003bb2:	0030      	movs	r0, r6
 8003bb4:	f7ff ffc6 	bl	8003b44 <sbrk_aligned>
 8003bb8:	0004      	movs	r4, r0
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d11e      	bne.n	8003bfc <_malloc_r+0x74>
 8003bbe:	682c      	ldr	r4, [r5, #0]
 8003bc0:	0025      	movs	r5, r4
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	d14a      	bne.n	8003c5c <_malloc_r+0xd4>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	0029      	movs	r1, r5
 8003bca:	18e3      	adds	r3, r4, r3
 8003bcc:	0030      	movs	r0, r6
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	f000 f880 	bl	8003cd4 <_sbrk_r>
 8003bd4:	9b01      	ldr	r3, [sp, #4]
 8003bd6:	4283      	cmp	r3, r0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xda>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	3703      	adds	r7, #3
 8003bde:	1aff      	subs	r7, r7, r3
 8003be0:	2303      	movs	r3, #3
 8003be2:	439f      	bics	r7, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	2f0c      	cmp	r7, #12
 8003be8:	d200      	bcs.n	8003bec <_malloc_r+0x64>
 8003bea:	270c      	movs	r7, #12
 8003bec:	0039      	movs	r1, r7
 8003bee:	0030      	movs	r0, r6
 8003bf0:	f7ff ffa8 	bl	8003b44 <sbrk_aligned>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d034      	beq.n	8003c62 <_malloc_r+0xda>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	19df      	adds	r7, r3, r7
 8003bfc:	6027      	str	r7, [r4, #0]
 8003bfe:	e013      	b.n	8003c28 <_malloc_r+0xa0>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dacb      	bge.n	8003b9c <_malloc_r+0x14>
 8003c04:	230c      	movs	r3, #12
 8003c06:	2500      	movs	r5, #0
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	0028      	movs	r0, r5
 8003c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	1bd1      	subs	r1, r2, r7
 8003c12:	d420      	bmi.n	8003c56 <_malloc_r+0xce>
 8003c14:	290b      	cmp	r1, #11
 8003c16:	d917      	bls.n	8003c48 <_malloc_r+0xc0>
 8003c18:	19e2      	adds	r2, r4, r7
 8003c1a:	6027      	str	r7, [r4, #0]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d111      	bne.n	8003c44 <_malloc_r+0xbc>
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	6053      	str	r3, [r2, #4]
 8003c28:	0030      	movs	r0, r6
 8003c2a:	0025      	movs	r5, r4
 8003c2c:	f000 f86c 	bl	8003d08 <__malloc_unlock>
 8003c30:	2207      	movs	r2, #7
 8003c32:	350b      	adds	r5, #11
 8003c34:	1d23      	adds	r3, r4, #4
 8003c36:	4395      	bics	r5, r2
 8003c38:	1aea      	subs	r2, r5, r3
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	d0e5      	beq.n	8003c0a <_malloc_r+0x82>
 8003c3e:	1b5b      	subs	r3, r3, r5
 8003c40:	50a3      	str	r3, [r4, r2]
 8003c42:	e7e2      	b.n	8003c0a <_malloc_r+0x82>
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	e7ec      	b.n	8003c22 <_malloc_r+0x9a>
 8003c48:	6862      	ldr	r2, [r4, #4]
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	d101      	bne.n	8003c52 <_malloc_r+0xca>
 8003c4e:	602a      	str	r2, [r5, #0]
 8003c50:	e7ea      	b.n	8003c28 <_malloc_r+0xa0>
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e7e8      	b.n	8003c28 <_malloc_r+0xa0>
 8003c56:	0023      	movs	r3, r4
 8003c58:	6864      	ldr	r4, [r4, #4]
 8003c5a:	e7a7      	b.n	8003bac <_malloc_r+0x24>
 8003c5c:	002c      	movs	r4, r5
 8003c5e:	686d      	ldr	r5, [r5, #4]
 8003c60:	e7af      	b.n	8003bc2 <_malloc_r+0x3a>
 8003c62:	230c      	movs	r3, #12
 8003c64:	0030      	movs	r0, r6
 8003c66:	6033      	str	r3, [r6, #0]
 8003c68:	f000 f84e 	bl	8003d08 <__malloc_unlock>
 8003c6c:	e7cd      	b.n	8003c0a <_malloc_r+0x82>
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	200001d8 	.word	0x200001d8

08003c74 <_realloc_r>:
 8003c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c76:	0007      	movs	r7, r0
 8003c78:	000e      	movs	r6, r1
 8003c7a:	0014      	movs	r4, r2
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d105      	bne.n	8003c8c <_realloc_r+0x18>
 8003c80:	0011      	movs	r1, r2
 8003c82:	f7ff ff81 	bl	8003b88 <_malloc_r>
 8003c86:	0005      	movs	r5, r0
 8003c88:	0028      	movs	r0, r5
 8003c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d103      	bne.n	8003c98 <_realloc_r+0x24>
 8003c90:	f7ff ff0e 	bl	8003ab0 <_free_r>
 8003c94:	0025      	movs	r5, r4
 8003c96:	e7f7      	b.n	8003c88 <_realloc_r+0x14>
 8003c98:	f000 f83e 	bl	8003d18 <_malloc_usable_size_r>
 8003c9c:	9001      	str	r0, [sp, #4]
 8003c9e:	4284      	cmp	r4, r0
 8003ca0:	d803      	bhi.n	8003caa <_realloc_r+0x36>
 8003ca2:	0035      	movs	r5, r6
 8003ca4:	0843      	lsrs	r3, r0, #1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	d3ee      	bcc.n	8003c88 <_realloc_r+0x14>
 8003caa:	0021      	movs	r1, r4
 8003cac:	0038      	movs	r0, r7
 8003cae:	f7ff ff6b 	bl	8003b88 <_malloc_r>
 8003cb2:	1e05      	subs	r5, r0, #0
 8003cb4:	d0e8      	beq.n	8003c88 <_realloc_r+0x14>
 8003cb6:	9b01      	ldr	r3, [sp, #4]
 8003cb8:	0022      	movs	r2, r4
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	d900      	bls.n	8003cc0 <_realloc_r+0x4c>
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	0031      	movs	r1, r6
 8003cc2:	0028      	movs	r0, r5
 8003cc4:	f7ff fed7 	bl	8003a76 <memcpy>
 8003cc8:	0031      	movs	r1, r6
 8003cca:	0038      	movs	r0, r7
 8003ccc:	f7ff fef0 	bl	8003ab0 <_free_r>
 8003cd0:	e7da      	b.n	8003c88 <_realloc_r+0x14>
	...

08003cd4 <_sbrk_r>:
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	b570      	push	{r4, r5, r6, lr}
 8003cd8:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x20>)
 8003cda:	0004      	movs	r4, r0
 8003cdc:	0008      	movs	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7fd f83e 	bl	8000d60 <_sbrk>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d103      	bne.n	8003cf0 <_sbrk_r+0x1c>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d000      	beq.n	8003cf0 <_sbrk_r+0x1c>
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	200001e0 	.word	0x200001e0

08003cf8 <__malloc_lock>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4802      	ldr	r0, [pc, #8]	; (8003d04 <__malloc_lock+0xc>)
 8003cfc:	f000 f814 	bl	8003d28 <__retarget_lock_acquire_recursive>
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	200001e4 	.word	0x200001e4

08003d08 <__malloc_unlock>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4802      	ldr	r0, [pc, #8]	; (8003d14 <__malloc_unlock+0xc>)
 8003d0c:	f000 f80d 	bl	8003d2a <__retarget_lock_release_recursive>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	200001e4 	.word	0x200001e4

08003d18 <_malloc_usable_size_r>:
 8003d18:	1f0b      	subs	r3, r1, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1f18      	subs	r0, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da01      	bge.n	8003d26 <_malloc_usable_size_r+0xe>
 8003d22:	580b      	ldr	r3, [r1, r0]
 8003d24:	18c0      	adds	r0, r0, r3
 8003d26:	4770      	bx	lr

08003d28 <__retarget_lock_acquire_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_release_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
