
LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  0002074c  2**0
                  CONTENTS
  4 .ARM          00000000  08004538  08004538  0002074c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004538  08004538  0002074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000074c  20000000  08004540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000074c  08004c8c  0002074c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08004c8c  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002074c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007785  00000000  00000000  00020774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002312  00000000  00000000  00027ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f67  00000000  00000000  0002b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c21d  00000000  00000000  0003f52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069a97  00000000  00000000  0004b74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b51e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000b5234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000074c 	.word	0x2000074c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043fc 	.word	0x080043fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000750 	.word	0x20000750
 8000100:	080043fc 	.word	0x080043fc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fb36 	bl	80008a8 <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 fae1 	bl	8000808 <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 f92d 	bl	80004ac <__aeabi_fsub>
 8000252:	f000 fad9 	bl	8000808 <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	0244      	lsls	r4, r0, #9
 800026a:	0045      	lsls	r5, r0, #1
 800026c:	b5c0      	push	{r6, r7, lr}
 800026e:	0a64      	lsrs	r4, r4, #9
 8000270:	1c0f      	adds	r7, r1, #0
 8000272:	0e2d      	lsrs	r5, r5, #24
 8000274:	0fc6      	lsrs	r6, r0, #31
 8000276:	2d00      	cmp	r5, #0
 8000278:	d100      	bne.n	800027c <__aeabi_fmul+0x1c>
 800027a:	e08d      	b.n	8000398 <__aeabi_fmul+0x138>
 800027c:	2dff      	cmp	r5, #255	; 0xff
 800027e:	d100      	bne.n	8000282 <__aeabi_fmul+0x22>
 8000280:	e092      	b.n	80003a8 <__aeabi_fmul+0x148>
 8000282:	2300      	movs	r3, #0
 8000284:	2080      	movs	r0, #128	; 0x80
 8000286:	4699      	mov	r9, r3
 8000288:	469a      	mov	sl, r3
 800028a:	00e4      	lsls	r4, r4, #3
 800028c:	04c0      	lsls	r0, r0, #19
 800028e:	4304      	orrs	r4, r0
 8000290:	3d7f      	subs	r5, #127	; 0x7f
 8000292:	0278      	lsls	r0, r7, #9
 8000294:	0a43      	lsrs	r3, r0, #9
 8000296:	4698      	mov	r8, r3
 8000298:	007b      	lsls	r3, r7, #1
 800029a:	0e1b      	lsrs	r3, r3, #24
 800029c:	0fff      	lsrs	r7, r7, #31
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d100      	bne.n	80002a4 <__aeabi_fmul+0x44>
 80002a2:	e070      	b.n	8000386 <__aeabi_fmul+0x126>
 80002a4:	2bff      	cmp	r3, #255	; 0xff
 80002a6:	d100      	bne.n	80002aa <__aeabi_fmul+0x4a>
 80002a8:	e086      	b.n	80003b8 <__aeabi_fmul+0x158>
 80002aa:	4642      	mov	r2, r8
 80002ac:	00d0      	lsls	r0, r2, #3
 80002ae:	2280      	movs	r2, #128	; 0x80
 80002b0:	3b7f      	subs	r3, #127	; 0x7f
 80002b2:	18ed      	adds	r5, r5, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	04d2      	lsls	r2, r2, #19
 80002b8:	4302      	orrs	r2, r0
 80002ba:	4690      	mov	r8, r2
 80002bc:	469c      	mov	ip, r3
 80002be:	0031      	movs	r1, r6
 80002c0:	464b      	mov	r3, r9
 80002c2:	4079      	eors	r1, r7
 80002c4:	1c68      	adds	r0, r5, #1
 80002c6:	2b0f      	cmp	r3, #15
 80002c8:	d81c      	bhi.n	8000304 <__aeabi_fmul+0xa4>
 80002ca:	4a76      	ldr	r2, [pc, #472]	; (80004a4 <__aeabi_fmul+0x244>)
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	58d3      	ldr	r3, [r2, r3]
 80002d0:	469f      	mov	pc, r3
 80002d2:	0039      	movs	r1, r7
 80002d4:	4644      	mov	r4, r8
 80002d6:	46e2      	mov	sl, ip
 80002d8:	4653      	mov	r3, sl
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d00f      	beq.n	80002fe <__aeabi_fmul+0x9e>
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fmul+0x84>
 80002e2:	e0d7      	b.n	8000494 <__aeabi_fmul+0x234>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d137      	bne.n	8000358 <__aeabi_fmul+0xf8>
 80002e8:	2000      	movs	r0, #0
 80002ea:	2400      	movs	r4, #0
 80002ec:	05c0      	lsls	r0, r0, #23
 80002ee:	4320      	orrs	r0, r4
 80002f0:	07c9      	lsls	r1, r1, #31
 80002f2:	4308      	orrs	r0, r1
 80002f4:	bce0      	pop	{r5, r6, r7}
 80002f6:	46ba      	mov	sl, r7
 80002f8:	46b1      	mov	r9, r6
 80002fa:	46a8      	mov	r8, r5
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	20ff      	movs	r0, #255	; 0xff
 8000300:	2400      	movs	r4, #0
 8000302:	e7f3      	b.n	80002ec <__aeabi_fmul+0x8c>
 8000304:	0c26      	lsrs	r6, r4, #16
 8000306:	0424      	lsls	r4, r4, #16
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	4644      	mov	r4, r8
 800030c:	0424      	lsls	r4, r4, #16
 800030e:	0c24      	lsrs	r4, r4, #16
 8000310:	4643      	mov	r3, r8
 8000312:	0027      	movs	r7, r4
 8000314:	0c1b      	lsrs	r3, r3, #16
 8000316:	4357      	muls	r7, r2
 8000318:	4374      	muls	r4, r6
 800031a:	435a      	muls	r2, r3
 800031c:	435e      	muls	r6, r3
 800031e:	1912      	adds	r2, r2, r4
 8000320:	0c3b      	lsrs	r3, r7, #16
 8000322:	189b      	adds	r3, r3, r2
 8000324:	429c      	cmp	r4, r3
 8000326:	d903      	bls.n	8000330 <__aeabi_fmul+0xd0>
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	0252      	lsls	r2, r2, #9
 800032c:	4694      	mov	ip, r2
 800032e:	4466      	add	r6, ip
 8000330:	043f      	lsls	r7, r7, #16
 8000332:	041a      	lsls	r2, r3, #16
 8000334:	0c3f      	lsrs	r7, r7, #16
 8000336:	19d2      	adds	r2, r2, r7
 8000338:	0194      	lsls	r4, r2, #6
 800033a:	1e67      	subs	r7, r4, #1
 800033c:	41bc      	sbcs	r4, r7
 800033e:	0c1b      	lsrs	r3, r3, #16
 8000340:	0e92      	lsrs	r2, r2, #26
 8000342:	199b      	adds	r3, r3, r6
 8000344:	4314      	orrs	r4, r2
 8000346:	019b      	lsls	r3, r3, #6
 8000348:	431c      	orrs	r4, r3
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	d400      	bmi.n	8000350 <__aeabi_fmul+0xf0>
 800034e:	e09b      	b.n	8000488 <__aeabi_fmul+0x228>
 8000350:	2301      	movs	r3, #1
 8000352:	0862      	lsrs	r2, r4, #1
 8000354:	401c      	ands	r4, r3
 8000356:	4314      	orrs	r4, r2
 8000358:	0002      	movs	r2, r0
 800035a:	327f      	adds	r2, #127	; 0x7f
 800035c:	2a00      	cmp	r2, #0
 800035e:	dd64      	ble.n	800042a <__aeabi_fmul+0x1ca>
 8000360:	0763      	lsls	r3, r4, #29
 8000362:	d004      	beq.n	800036e <__aeabi_fmul+0x10e>
 8000364:	230f      	movs	r3, #15
 8000366:	4023      	ands	r3, r4
 8000368:	2b04      	cmp	r3, #4
 800036a:	d000      	beq.n	800036e <__aeabi_fmul+0x10e>
 800036c:	3404      	adds	r4, #4
 800036e:	0123      	lsls	r3, r4, #4
 8000370:	d503      	bpl.n	800037a <__aeabi_fmul+0x11a>
 8000372:	0002      	movs	r2, r0
 8000374:	4b4c      	ldr	r3, [pc, #304]	; (80004a8 <__aeabi_fmul+0x248>)
 8000376:	3280      	adds	r2, #128	; 0x80
 8000378:	401c      	ands	r4, r3
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	dcbf      	bgt.n	80002fe <__aeabi_fmul+0x9e>
 800037e:	01a4      	lsls	r4, r4, #6
 8000380:	0a64      	lsrs	r4, r4, #9
 8000382:	b2d0      	uxtb	r0, r2
 8000384:	e7b2      	b.n	80002ec <__aeabi_fmul+0x8c>
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d13d      	bne.n	8000408 <__aeabi_fmul+0x1a8>
 800038c:	464a      	mov	r2, r9
 800038e:	3301      	adds	r3, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4691      	mov	r9, r2
 8000394:	469c      	mov	ip, r3
 8000396:	e792      	b.n	80002be <__aeabi_fmul+0x5e>
 8000398:	2c00      	cmp	r4, #0
 800039a:	d129      	bne.n	80003f0 <__aeabi_fmul+0x190>
 800039c:	2304      	movs	r3, #4
 800039e:	4699      	mov	r9, r3
 80003a0:	3b03      	subs	r3, #3
 80003a2:	2500      	movs	r5, #0
 80003a4:	469a      	mov	sl, r3
 80003a6:	e774      	b.n	8000292 <__aeabi_fmul+0x32>
 80003a8:	2c00      	cmp	r4, #0
 80003aa:	d11b      	bne.n	80003e4 <__aeabi_fmul+0x184>
 80003ac:	2308      	movs	r3, #8
 80003ae:	4699      	mov	r9, r3
 80003b0:	3b06      	subs	r3, #6
 80003b2:	25ff      	movs	r5, #255	; 0xff
 80003b4:	469a      	mov	sl, r3
 80003b6:	e76c      	b.n	8000292 <__aeabi_fmul+0x32>
 80003b8:	4643      	mov	r3, r8
 80003ba:	35ff      	adds	r5, #255	; 0xff
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d10b      	bne.n	80003d8 <__aeabi_fmul+0x178>
 80003c0:	2302      	movs	r3, #2
 80003c2:	464a      	mov	r2, r9
 80003c4:	431a      	orrs	r2, r3
 80003c6:	4691      	mov	r9, r2
 80003c8:	469c      	mov	ip, r3
 80003ca:	e778      	b.n	80002be <__aeabi_fmul+0x5e>
 80003cc:	4653      	mov	r3, sl
 80003ce:	0031      	movs	r1, r6
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d000      	beq.n	80003d6 <__aeabi_fmul+0x176>
 80003d4:	e783      	b.n	80002de <__aeabi_fmul+0x7e>
 80003d6:	e792      	b.n	80002fe <__aeabi_fmul+0x9e>
 80003d8:	2303      	movs	r3, #3
 80003da:	464a      	mov	r2, r9
 80003dc:	431a      	orrs	r2, r3
 80003de:	4691      	mov	r9, r2
 80003e0:	469c      	mov	ip, r3
 80003e2:	e76c      	b.n	80002be <__aeabi_fmul+0x5e>
 80003e4:	230c      	movs	r3, #12
 80003e6:	4699      	mov	r9, r3
 80003e8:	3b09      	subs	r3, #9
 80003ea:	25ff      	movs	r5, #255	; 0xff
 80003ec:	469a      	mov	sl, r3
 80003ee:	e750      	b.n	8000292 <__aeabi_fmul+0x32>
 80003f0:	0020      	movs	r0, r4
 80003f2:	f000 fa63 	bl	80008bc <__clzsi2>
 80003f6:	2576      	movs	r5, #118	; 0x76
 80003f8:	1f43      	subs	r3, r0, #5
 80003fa:	409c      	lsls	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	426d      	negs	r5, r5
 8000400:	4699      	mov	r9, r3
 8000402:	469a      	mov	sl, r3
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	e744      	b.n	8000292 <__aeabi_fmul+0x32>
 8000408:	4640      	mov	r0, r8
 800040a:	f000 fa57 	bl	80008bc <__clzsi2>
 800040e:	4642      	mov	r2, r8
 8000410:	1f43      	subs	r3, r0, #5
 8000412:	409a      	lsls	r2, r3
 8000414:	2300      	movs	r3, #0
 8000416:	1a2d      	subs	r5, r5, r0
 8000418:	4690      	mov	r8, r2
 800041a:	469c      	mov	ip, r3
 800041c:	3d76      	subs	r5, #118	; 0x76
 800041e:	e74e      	b.n	80002be <__aeabi_fmul+0x5e>
 8000420:	2480      	movs	r4, #128	; 0x80
 8000422:	2100      	movs	r1, #0
 8000424:	20ff      	movs	r0, #255	; 0xff
 8000426:	03e4      	lsls	r4, r4, #15
 8000428:	e760      	b.n	80002ec <__aeabi_fmul+0x8c>
 800042a:	2301      	movs	r3, #1
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	2b1b      	cmp	r3, #27
 8000430:	dd00      	ble.n	8000434 <__aeabi_fmul+0x1d4>
 8000432:	e759      	b.n	80002e8 <__aeabi_fmul+0x88>
 8000434:	0022      	movs	r2, r4
 8000436:	309e      	adds	r0, #158	; 0x9e
 8000438:	40da      	lsrs	r2, r3
 800043a:	4084      	lsls	r4, r0
 800043c:	0013      	movs	r3, r2
 800043e:	1e62      	subs	r2, r4, #1
 8000440:	4194      	sbcs	r4, r2
 8000442:	431c      	orrs	r4, r3
 8000444:	0763      	lsls	r3, r4, #29
 8000446:	d004      	beq.n	8000452 <__aeabi_fmul+0x1f2>
 8000448:	230f      	movs	r3, #15
 800044a:	4023      	ands	r3, r4
 800044c:	2b04      	cmp	r3, #4
 800044e:	d000      	beq.n	8000452 <__aeabi_fmul+0x1f2>
 8000450:	3404      	adds	r4, #4
 8000452:	0163      	lsls	r3, r4, #5
 8000454:	d51a      	bpl.n	800048c <__aeabi_fmul+0x22c>
 8000456:	2001      	movs	r0, #1
 8000458:	2400      	movs	r4, #0
 800045a:	e747      	b.n	80002ec <__aeabi_fmul+0x8c>
 800045c:	2080      	movs	r0, #128	; 0x80
 800045e:	03c0      	lsls	r0, r0, #15
 8000460:	4204      	tst	r4, r0
 8000462:	d009      	beq.n	8000478 <__aeabi_fmul+0x218>
 8000464:	4643      	mov	r3, r8
 8000466:	4203      	tst	r3, r0
 8000468:	d106      	bne.n	8000478 <__aeabi_fmul+0x218>
 800046a:	4644      	mov	r4, r8
 800046c:	4304      	orrs	r4, r0
 800046e:	0264      	lsls	r4, r4, #9
 8000470:	0039      	movs	r1, r7
 8000472:	20ff      	movs	r0, #255	; 0xff
 8000474:	0a64      	lsrs	r4, r4, #9
 8000476:	e739      	b.n	80002ec <__aeabi_fmul+0x8c>
 8000478:	2080      	movs	r0, #128	; 0x80
 800047a:	03c0      	lsls	r0, r0, #15
 800047c:	4304      	orrs	r4, r0
 800047e:	0264      	lsls	r4, r4, #9
 8000480:	0031      	movs	r1, r6
 8000482:	20ff      	movs	r0, #255	; 0xff
 8000484:	0a64      	lsrs	r4, r4, #9
 8000486:	e731      	b.n	80002ec <__aeabi_fmul+0x8c>
 8000488:	0028      	movs	r0, r5
 800048a:	e765      	b.n	8000358 <__aeabi_fmul+0xf8>
 800048c:	01a4      	lsls	r4, r4, #6
 800048e:	2000      	movs	r0, #0
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	e72b      	b.n	80002ec <__aeabi_fmul+0x8c>
 8000494:	2080      	movs	r0, #128	; 0x80
 8000496:	03c0      	lsls	r0, r0, #15
 8000498:	4304      	orrs	r4, r0
 800049a:	0264      	lsls	r4, r4, #9
 800049c:	20ff      	movs	r0, #255	; 0xff
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	e724      	b.n	80002ec <__aeabi_fmul+0x8c>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	08004420 	.word	0x08004420
 80004a8:	f7ffffff 	.word	0xf7ffffff

080004ac <__aeabi_fsub>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	46ce      	mov	lr, r9
 80004b0:	4647      	mov	r7, r8
 80004b2:	0243      	lsls	r3, r0, #9
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	024e      	lsls	r6, r1, #9
 80004b8:	00da      	lsls	r2, r3, #3
 80004ba:	4694      	mov	ip, r2
 80004bc:	0a72      	lsrs	r2, r6, #9
 80004be:	4691      	mov	r9, r2
 80004c0:	0045      	lsls	r5, r0, #1
 80004c2:	004a      	lsls	r2, r1, #1
 80004c4:	b580      	push	{r7, lr}
 80004c6:	0e2d      	lsrs	r5, r5, #24
 80004c8:	001f      	movs	r7, r3
 80004ca:	0fc4      	lsrs	r4, r0, #31
 80004cc:	0e12      	lsrs	r2, r2, #24
 80004ce:	0fc9      	lsrs	r1, r1, #31
 80004d0:	09b6      	lsrs	r6, r6, #6
 80004d2:	2aff      	cmp	r2, #255	; 0xff
 80004d4:	d05b      	beq.n	800058e <__aeabi_fsub+0xe2>
 80004d6:	2001      	movs	r0, #1
 80004d8:	4041      	eors	r1, r0
 80004da:	428c      	cmp	r4, r1
 80004dc:	d039      	beq.n	8000552 <__aeabi_fsub+0xa6>
 80004de:	1aa8      	subs	r0, r5, r2
 80004e0:	2800      	cmp	r0, #0
 80004e2:	dd5a      	ble.n	800059a <__aeabi_fsub+0xee>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d06a      	beq.n	80005be <__aeabi_fsub+0x112>
 80004e8:	2dff      	cmp	r5, #255	; 0xff
 80004ea:	d100      	bne.n	80004ee <__aeabi_fsub+0x42>
 80004ec:	e0d9      	b.n	80006a2 <__aeabi_fsub+0x1f6>
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	04d2      	lsls	r2, r2, #19
 80004f2:	4316      	orrs	r6, r2
 80004f4:	281b      	cmp	r0, #27
 80004f6:	dc00      	bgt.n	80004fa <__aeabi_fsub+0x4e>
 80004f8:	e0e9      	b.n	80006ce <__aeabi_fsub+0x222>
 80004fa:	2001      	movs	r0, #1
 80004fc:	4663      	mov	r3, ip
 80004fe:	1a18      	subs	r0, r3, r0
 8000500:	0143      	lsls	r3, r0, #5
 8000502:	d400      	bmi.n	8000506 <__aeabi_fsub+0x5a>
 8000504:	e0b4      	b.n	8000670 <__aeabi_fsub+0x1c4>
 8000506:	0180      	lsls	r0, r0, #6
 8000508:	0987      	lsrs	r7, r0, #6
 800050a:	0038      	movs	r0, r7
 800050c:	f000 f9d6 	bl	80008bc <__clzsi2>
 8000510:	3805      	subs	r0, #5
 8000512:	4087      	lsls	r7, r0
 8000514:	4285      	cmp	r5, r0
 8000516:	dc00      	bgt.n	800051a <__aeabi_fsub+0x6e>
 8000518:	e0cc      	b.n	80006b4 <__aeabi_fsub+0x208>
 800051a:	1a2d      	subs	r5, r5, r0
 800051c:	48b5      	ldr	r0, [pc, #724]	; (80007f4 <__aeabi_fsub+0x348>)
 800051e:	4038      	ands	r0, r7
 8000520:	0743      	lsls	r3, r0, #29
 8000522:	d004      	beq.n	800052e <__aeabi_fsub+0x82>
 8000524:	230f      	movs	r3, #15
 8000526:	4003      	ands	r3, r0
 8000528:	2b04      	cmp	r3, #4
 800052a:	d000      	beq.n	800052e <__aeabi_fsub+0x82>
 800052c:	3004      	adds	r0, #4
 800052e:	0143      	lsls	r3, r0, #5
 8000530:	d400      	bmi.n	8000534 <__aeabi_fsub+0x88>
 8000532:	e0a0      	b.n	8000676 <__aeabi_fsub+0x1ca>
 8000534:	1c6a      	adds	r2, r5, #1
 8000536:	2dfe      	cmp	r5, #254	; 0xfe
 8000538:	d100      	bne.n	800053c <__aeabi_fsub+0x90>
 800053a:	e08d      	b.n	8000658 <__aeabi_fsub+0x1ac>
 800053c:	0180      	lsls	r0, r0, #6
 800053e:	0a47      	lsrs	r7, r0, #9
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	05d0      	lsls	r0, r2, #23
 8000544:	4338      	orrs	r0, r7
 8000546:	07e4      	lsls	r4, r4, #31
 8000548:	4320      	orrs	r0, r4
 800054a:	bcc0      	pop	{r6, r7}
 800054c:	46b9      	mov	r9, r7
 800054e:	46b0      	mov	r8, r6
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000552:	1aa8      	subs	r0, r5, r2
 8000554:	4680      	mov	r8, r0
 8000556:	2800      	cmp	r0, #0
 8000558:	dd45      	ble.n	80005e6 <__aeabi_fsub+0x13a>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d070      	beq.n	8000640 <__aeabi_fsub+0x194>
 800055e:	2dff      	cmp	r5, #255	; 0xff
 8000560:	d100      	bne.n	8000564 <__aeabi_fsub+0xb8>
 8000562:	e09e      	b.n	80006a2 <__aeabi_fsub+0x1f6>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	04db      	lsls	r3, r3, #19
 8000568:	431e      	orrs	r6, r3
 800056a:	4643      	mov	r3, r8
 800056c:	2b1b      	cmp	r3, #27
 800056e:	dc00      	bgt.n	8000572 <__aeabi_fsub+0xc6>
 8000570:	e0d2      	b.n	8000718 <__aeabi_fsub+0x26c>
 8000572:	2001      	movs	r0, #1
 8000574:	4460      	add	r0, ip
 8000576:	0143      	lsls	r3, r0, #5
 8000578:	d57a      	bpl.n	8000670 <__aeabi_fsub+0x1c4>
 800057a:	3501      	adds	r5, #1
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d06b      	beq.n	8000658 <__aeabi_fsub+0x1ac>
 8000580:	2301      	movs	r3, #1
 8000582:	4a9d      	ldr	r2, [pc, #628]	; (80007f8 <__aeabi_fsub+0x34c>)
 8000584:	4003      	ands	r3, r0
 8000586:	0840      	lsrs	r0, r0, #1
 8000588:	4010      	ands	r0, r2
 800058a:	4318      	orrs	r0, r3
 800058c:	e7c8      	b.n	8000520 <__aeabi_fsub+0x74>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d020      	beq.n	80005d4 <__aeabi_fsub+0x128>
 8000592:	428c      	cmp	r4, r1
 8000594:	d023      	beq.n	80005de <__aeabi_fsub+0x132>
 8000596:	0028      	movs	r0, r5
 8000598:	38ff      	subs	r0, #255	; 0xff
 800059a:	2800      	cmp	r0, #0
 800059c:	d039      	beq.n	8000612 <__aeabi_fsub+0x166>
 800059e:	1b57      	subs	r7, r2, r5
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fsub+0xfa>
 80005a4:	e09d      	b.n	80006e2 <__aeabi_fsub+0x236>
 80005a6:	4663      	mov	r3, ip
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fsub+0x102>
 80005ac:	e0db      	b.n	8000766 <__aeabi_fsub+0x2ba>
 80005ae:	1e7b      	subs	r3, r7, #1
 80005b0:	2f01      	cmp	r7, #1
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fsub+0x10a>
 80005b4:	e10d      	b.n	80007d2 <__aeabi_fsub+0x326>
 80005b6:	2fff      	cmp	r7, #255	; 0xff
 80005b8:	d071      	beq.n	800069e <__aeabi_fsub+0x1f2>
 80005ba:	001f      	movs	r7, r3
 80005bc:	e098      	b.n	80006f0 <__aeabi_fsub+0x244>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fsub+0x118>
 80005c2:	e0a7      	b.n	8000714 <__aeabi_fsub+0x268>
 80005c4:	1e42      	subs	r2, r0, #1
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d100      	bne.n	80005cc <__aeabi_fsub+0x120>
 80005ca:	e0e6      	b.n	800079a <__aeabi_fsub+0x2ee>
 80005cc:	28ff      	cmp	r0, #255	; 0xff
 80005ce:	d068      	beq.n	80006a2 <__aeabi_fsub+0x1f6>
 80005d0:	0010      	movs	r0, r2
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fsub+0x48>
 80005d4:	2001      	movs	r0, #1
 80005d6:	4041      	eors	r1, r0
 80005d8:	42a1      	cmp	r1, r4
 80005da:	d000      	beq.n	80005de <__aeabi_fsub+0x132>
 80005dc:	e77f      	b.n	80004de <__aeabi_fsub+0x32>
 80005de:	20ff      	movs	r0, #255	; 0xff
 80005e0:	4240      	negs	r0, r0
 80005e2:	4680      	mov	r8, r0
 80005e4:	44a8      	add	r8, r5
 80005e6:	4640      	mov	r0, r8
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d038      	beq.n	800065e <__aeabi_fsub+0x1b2>
 80005ec:	1b51      	subs	r1, r2, r5
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fsub+0x148>
 80005f2:	e0ae      	b.n	8000752 <__aeabi_fsub+0x2a6>
 80005f4:	2aff      	cmp	r2, #255	; 0xff
 80005f6:	d100      	bne.n	80005fa <__aeabi_fsub+0x14e>
 80005f8:	e0df      	b.n	80007ba <__aeabi_fsub+0x30e>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	4660      	mov	r0, ip
 80005fe:	04db      	lsls	r3, r3, #19
 8000600:	4318      	orrs	r0, r3
 8000602:	4684      	mov	ip, r0
 8000604:	291b      	cmp	r1, #27
 8000606:	dc00      	bgt.n	800060a <__aeabi_fsub+0x15e>
 8000608:	e0d9      	b.n	80007be <__aeabi_fsub+0x312>
 800060a:	2001      	movs	r0, #1
 800060c:	0015      	movs	r5, r2
 800060e:	1980      	adds	r0, r0, r6
 8000610:	e7b1      	b.n	8000576 <__aeabi_fsub+0xca>
 8000612:	20fe      	movs	r0, #254	; 0xfe
 8000614:	1c6a      	adds	r2, r5, #1
 8000616:	4210      	tst	r0, r2
 8000618:	d171      	bne.n	80006fe <__aeabi_fsub+0x252>
 800061a:	2d00      	cmp	r5, #0
 800061c:	d000      	beq.n	8000620 <__aeabi_fsub+0x174>
 800061e:	e0a6      	b.n	800076e <__aeabi_fsub+0x2c2>
 8000620:	4663      	mov	r3, ip
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_fsub+0x17c>
 8000626:	e0d9      	b.n	80007dc <__aeabi_fsub+0x330>
 8000628:	2200      	movs	r2, #0
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fsub+0x184>
 800062e:	e788      	b.n	8000542 <__aeabi_fsub+0x96>
 8000630:	1b98      	subs	r0, r3, r6
 8000632:	0143      	lsls	r3, r0, #5
 8000634:	d400      	bmi.n	8000638 <__aeabi_fsub+0x18c>
 8000636:	e0e1      	b.n	80007fc <__aeabi_fsub+0x350>
 8000638:	4663      	mov	r3, ip
 800063a:	000c      	movs	r4, r1
 800063c:	1af0      	subs	r0, r6, r3
 800063e:	e76f      	b.n	8000520 <__aeabi_fsub+0x74>
 8000640:	2e00      	cmp	r6, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fsub+0x19a>
 8000644:	e0b7      	b.n	80007b6 <__aeabi_fsub+0x30a>
 8000646:	0002      	movs	r2, r0
 8000648:	3a01      	subs	r2, #1
 800064a:	2801      	cmp	r0, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fsub+0x1a4>
 800064e:	e09c      	b.n	800078a <__aeabi_fsub+0x2de>
 8000650:	28ff      	cmp	r0, #255	; 0xff
 8000652:	d026      	beq.n	80006a2 <__aeabi_fsub+0x1f6>
 8000654:	4690      	mov	r8, r2
 8000656:	e788      	b.n	800056a <__aeabi_fsub+0xbe>
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	2700      	movs	r7, #0
 800065c:	e771      	b.n	8000542 <__aeabi_fsub+0x96>
 800065e:	20fe      	movs	r0, #254	; 0xfe
 8000660:	1c6a      	adds	r2, r5, #1
 8000662:	4210      	tst	r0, r2
 8000664:	d064      	beq.n	8000730 <__aeabi_fsub+0x284>
 8000666:	2aff      	cmp	r2, #255	; 0xff
 8000668:	d0f6      	beq.n	8000658 <__aeabi_fsub+0x1ac>
 800066a:	0015      	movs	r5, r2
 800066c:	4466      	add	r6, ip
 800066e:	0870      	lsrs	r0, r6, #1
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d000      	beq.n	8000676 <__aeabi_fsub+0x1ca>
 8000674:	e756      	b.n	8000524 <__aeabi_fsub+0x78>
 8000676:	08c3      	lsrs	r3, r0, #3
 8000678:	2dff      	cmp	r5, #255	; 0xff
 800067a:	d012      	beq.n	80006a2 <__aeabi_fsub+0x1f6>
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	0a5f      	lsrs	r7, r3, #9
 8000680:	b2ea      	uxtb	r2, r5
 8000682:	e75e      	b.n	8000542 <__aeabi_fsub+0x96>
 8000684:	4662      	mov	r2, ip
 8000686:	2a00      	cmp	r2, #0
 8000688:	d100      	bne.n	800068c <__aeabi_fsub+0x1e0>
 800068a:	e096      	b.n	80007ba <__aeabi_fsub+0x30e>
 800068c:	2e00      	cmp	r6, #0
 800068e:	d008      	beq.n	80006a2 <__aeabi_fsub+0x1f6>
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	03d2      	lsls	r2, r2, #15
 8000694:	4213      	tst	r3, r2
 8000696:	d004      	beq.n	80006a2 <__aeabi_fsub+0x1f6>
 8000698:	4648      	mov	r0, r9
 800069a:	4210      	tst	r0, r2
 800069c:	d101      	bne.n	80006a2 <__aeabi_fsub+0x1f6>
 800069e:	000c      	movs	r4, r1
 80006a0:	464b      	mov	r3, r9
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0d8      	beq.n	8000658 <__aeabi_fsub+0x1ac>
 80006a6:	2780      	movs	r7, #128	; 0x80
 80006a8:	03ff      	lsls	r7, r7, #15
 80006aa:	431f      	orrs	r7, r3
 80006ac:	027f      	lsls	r7, r7, #9
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	0a7f      	lsrs	r7, r7, #9
 80006b2:	e746      	b.n	8000542 <__aeabi_fsub+0x96>
 80006b4:	2320      	movs	r3, #32
 80006b6:	003a      	movs	r2, r7
 80006b8:	1b45      	subs	r5, r0, r5
 80006ba:	0038      	movs	r0, r7
 80006bc:	3501      	adds	r5, #1
 80006be:	40ea      	lsrs	r2, r5
 80006c0:	1b5d      	subs	r5, r3, r5
 80006c2:	40a8      	lsls	r0, r5
 80006c4:	1e43      	subs	r3, r0, #1
 80006c6:	4198      	sbcs	r0, r3
 80006c8:	2500      	movs	r5, #0
 80006ca:	4310      	orrs	r0, r2
 80006cc:	e728      	b.n	8000520 <__aeabi_fsub+0x74>
 80006ce:	2320      	movs	r3, #32
 80006d0:	1a1b      	subs	r3, r3, r0
 80006d2:	0032      	movs	r2, r6
 80006d4:	409e      	lsls	r6, r3
 80006d6:	40c2      	lsrs	r2, r0
 80006d8:	0030      	movs	r0, r6
 80006da:	1e43      	subs	r3, r0, #1
 80006dc:	4198      	sbcs	r0, r3
 80006de:	4310      	orrs	r0, r2
 80006e0:	e70c      	b.n	80004fc <__aeabi_fsub+0x50>
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d0db      	beq.n	800069e <__aeabi_fsub+0x1f2>
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	4660      	mov	r0, ip
 80006ea:	04db      	lsls	r3, r3, #19
 80006ec:	4318      	orrs	r0, r3
 80006ee:	4684      	mov	ip, r0
 80006f0:	2f1b      	cmp	r7, #27
 80006f2:	dd56      	ble.n	80007a2 <__aeabi_fsub+0x2f6>
 80006f4:	2001      	movs	r0, #1
 80006f6:	000c      	movs	r4, r1
 80006f8:	0015      	movs	r5, r2
 80006fa:	1a30      	subs	r0, r6, r0
 80006fc:	e700      	b.n	8000500 <__aeabi_fsub+0x54>
 80006fe:	4663      	mov	r3, ip
 8000700:	1b9f      	subs	r7, r3, r6
 8000702:	017b      	lsls	r3, r7, #5
 8000704:	d43d      	bmi.n	8000782 <__aeabi_fsub+0x2d6>
 8000706:	2f00      	cmp	r7, #0
 8000708:	d000      	beq.n	800070c <__aeabi_fsub+0x260>
 800070a:	e6fe      	b.n	800050a <__aeabi_fsub+0x5e>
 800070c:	2400      	movs	r4, #0
 800070e:	2200      	movs	r2, #0
 8000710:	2700      	movs	r7, #0
 8000712:	e716      	b.n	8000542 <__aeabi_fsub+0x96>
 8000714:	0005      	movs	r5, r0
 8000716:	e7af      	b.n	8000678 <__aeabi_fsub+0x1cc>
 8000718:	0032      	movs	r2, r6
 800071a:	4643      	mov	r3, r8
 800071c:	4641      	mov	r1, r8
 800071e:	40da      	lsrs	r2, r3
 8000720:	2320      	movs	r3, #32
 8000722:	1a5b      	subs	r3, r3, r1
 8000724:	409e      	lsls	r6, r3
 8000726:	0030      	movs	r0, r6
 8000728:	1e43      	subs	r3, r0, #1
 800072a:	4198      	sbcs	r0, r3
 800072c:	4310      	orrs	r0, r2
 800072e:	e721      	b.n	8000574 <__aeabi_fsub+0xc8>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d1a7      	bne.n	8000684 <__aeabi_fsub+0x1d8>
 8000734:	4663      	mov	r3, ip
 8000736:	2b00      	cmp	r3, #0
 8000738:	d059      	beq.n	80007ee <__aeabi_fsub+0x342>
 800073a:	2200      	movs	r2, #0
 800073c:	2e00      	cmp	r6, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fsub+0x296>
 8000740:	e6ff      	b.n	8000542 <__aeabi_fsub+0x96>
 8000742:	0030      	movs	r0, r6
 8000744:	4460      	add	r0, ip
 8000746:	0143      	lsls	r3, r0, #5
 8000748:	d592      	bpl.n	8000670 <__aeabi_fsub+0x1c4>
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <__aeabi_fsub+0x348>)
 800074c:	3501      	adds	r5, #1
 800074e:	4018      	ands	r0, r3
 8000750:	e78e      	b.n	8000670 <__aeabi_fsub+0x1c4>
 8000752:	4663      	mov	r3, ip
 8000754:	2b00      	cmp	r3, #0
 8000756:	d047      	beq.n	80007e8 <__aeabi_fsub+0x33c>
 8000758:	1e4b      	subs	r3, r1, #1
 800075a:	2901      	cmp	r1, #1
 800075c:	d015      	beq.n	800078a <__aeabi_fsub+0x2de>
 800075e:	29ff      	cmp	r1, #255	; 0xff
 8000760:	d02b      	beq.n	80007ba <__aeabi_fsub+0x30e>
 8000762:	0019      	movs	r1, r3
 8000764:	e74e      	b.n	8000604 <__aeabi_fsub+0x158>
 8000766:	000c      	movs	r4, r1
 8000768:	464b      	mov	r3, r9
 800076a:	003d      	movs	r5, r7
 800076c:	e784      	b.n	8000678 <__aeabi_fsub+0x1cc>
 800076e:	4662      	mov	r2, ip
 8000770:	2a00      	cmp	r2, #0
 8000772:	d18b      	bne.n	800068c <__aeabi_fsub+0x1e0>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d192      	bne.n	800069e <__aeabi_fsub+0x1f2>
 8000778:	2780      	movs	r7, #128	; 0x80
 800077a:	2400      	movs	r4, #0
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	03ff      	lsls	r7, r7, #15
 8000780:	e6df      	b.n	8000542 <__aeabi_fsub+0x96>
 8000782:	4663      	mov	r3, ip
 8000784:	000c      	movs	r4, r1
 8000786:	1af7      	subs	r7, r6, r3
 8000788:	e6bf      	b.n	800050a <__aeabi_fsub+0x5e>
 800078a:	0030      	movs	r0, r6
 800078c:	4460      	add	r0, ip
 800078e:	2501      	movs	r5, #1
 8000790:	0143      	lsls	r3, r0, #5
 8000792:	d400      	bmi.n	8000796 <__aeabi_fsub+0x2ea>
 8000794:	e76c      	b.n	8000670 <__aeabi_fsub+0x1c4>
 8000796:	2502      	movs	r5, #2
 8000798:	e6f2      	b.n	8000580 <__aeabi_fsub+0xd4>
 800079a:	4663      	mov	r3, ip
 800079c:	2501      	movs	r5, #1
 800079e:	1b98      	subs	r0, r3, r6
 80007a0:	e6ae      	b.n	8000500 <__aeabi_fsub+0x54>
 80007a2:	2320      	movs	r3, #32
 80007a4:	4664      	mov	r4, ip
 80007a6:	4660      	mov	r0, ip
 80007a8:	40fc      	lsrs	r4, r7
 80007aa:	1bdf      	subs	r7, r3, r7
 80007ac:	40b8      	lsls	r0, r7
 80007ae:	1e43      	subs	r3, r0, #1
 80007b0:	4198      	sbcs	r0, r3
 80007b2:	4320      	orrs	r0, r4
 80007b4:	e79f      	b.n	80006f6 <__aeabi_fsub+0x24a>
 80007b6:	0005      	movs	r5, r0
 80007b8:	e75e      	b.n	8000678 <__aeabi_fsub+0x1cc>
 80007ba:	464b      	mov	r3, r9
 80007bc:	e771      	b.n	80006a2 <__aeabi_fsub+0x1f6>
 80007be:	2320      	movs	r3, #32
 80007c0:	4665      	mov	r5, ip
 80007c2:	4660      	mov	r0, ip
 80007c4:	40cd      	lsrs	r5, r1
 80007c6:	1a59      	subs	r1, r3, r1
 80007c8:	4088      	lsls	r0, r1
 80007ca:	1e43      	subs	r3, r0, #1
 80007cc:	4198      	sbcs	r0, r3
 80007ce:	4328      	orrs	r0, r5
 80007d0:	e71c      	b.n	800060c <__aeabi_fsub+0x160>
 80007d2:	4663      	mov	r3, ip
 80007d4:	000c      	movs	r4, r1
 80007d6:	2501      	movs	r5, #1
 80007d8:	1af0      	subs	r0, r6, r3
 80007da:	e691      	b.n	8000500 <__aeabi_fsub+0x54>
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d095      	beq.n	800070c <__aeabi_fsub+0x260>
 80007e0:	000c      	movs	r4, r1
 80007e2:	464f      	mov	r7, r9
 80007e4:	2200      	movs	r2, #0
 80007e6:	e6ac      	b.n	8000542 <__aeabi_fsub+0x96>
 80007e8:	464b      	mov	r3, r9
 80007ea:	000d      	movs	r5, r1
 80007ec:	e744      	b.n	8000678 <__aeabi_fsub+0x1cc>
 80007ee:	464f      	mov	r7, r9
 80007f0:	2200      	movs	r2, #0
 80007f2:	e6a6      	b.n	8000542 <__aeabi_fsub+0x96>
 80007f4:	fbffffff 	.word	0xfbffffff
 80007f8:	7dffffff 	.word	0x7dffffff
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0x356>
 8000800:	e736      	b.n	8000670 <__aeabi_fsub+0x1c4>
 8000802:	2400      	movs	r4, #0
 8000804:	2700      	movs	r7, #0
 8000806:	e69c      	b.n	8000542 <__aeabi_fsub+0x96>

08000808 <__aeabi_f2iz>:
 8000808:	0241      	lsls	r1, r0, #9
 800080a:	0042      	lsls	r2, r0, #1
 800080c:	0fc3      	lsrs	r3, r0, #31
 800080e:	0a49      	lsrs	r1, r1, #9
 8000810:	2000      	movs	r0, #0
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	2a7e      	cmp	r2, #126	; 0x7e
 8000816:	dd03      	ble.n	8000820 <__aeabi_f2iz+0x18>
 8000818:	2a9d      	cmp	r2, #157	; 0x9d
 800081a:	dd02      	ble.n	8000822 <__aeabi_f2iz+0x1a>
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <__aeabi_f2iz+0x3c>)
 800081e:	1898      	adds	r0, r3, r2
 8000820:	4770      	bx	lr
 8000822:	2080      	movs	r0, #128	; 0x80
 8000824:	0400      	lsls	r0, r0, #16
 8000826:	4301      	orrs	r1, r0
 8000828:	2a95      	cmp	r2, #149	; 0x95
 800082a:	dc07      	bgt.n	800083c <__aeabi_f2iz+0x34>
 800082c:	2096      	movs	r0, #150	; 0x96
 800082e:	1a82      	subs	r2, r0, r2
 8000830:	40d1      	lsrs	r1, r2
 8000832:	4248      	negs	r0, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f3      	bne.n	8000820 <__aeabi_f2iz+0x18>
 8000838:	0008      	movs	r0, r1
 800083a:	e7f1      	b.n	8000820 <__aeabi_f2iz+0x18>
 800083c:	3a96      	subs	r2, #150	; 0x96
 800083e:	4091      	lsls	r1, r2
 8000840:	e7f7      	b.n	8000832 <__aeabi_f2iz+0x2a>
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	7fffffff 	.word	0x7fffffff

08000848 <__aeabi_cfrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	0008      	movs	r0, r1
 800084c:	4661      	mov	r1, ip
 800084e:	e7ff      	b.n	8000850 <__aeabi_cfcmpeq>

08000850 <__aeabi_cfcmpeq>:
 8000850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000852:	f000 f8bd 	bl	80009d0 <__lesf2>
 8000856:	2800      	cmp	r0, #0
 8000858:	d401      	bmi.n	800085e <__aeabi_cfcmpeq+0xe>
 800085a:	2100      	movs	r1, #0
 800085c:	42c8      	cmn	r0, r1
 800085e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000860 <__aeabi_fcmpeq>:
 8000860:	b510      	push	{r4, lr}
 8000862:	f000 f849 	bl	80008f8 <__eqsf2>
 8000866:	4240      	negs	r0, r0
 8000868:	3001      	adds	r0, #1
 800086a:	bd10      	pop	{r4, pc}

0800086c <__aeabi_fcmplt>:
 800086c:	b510      	push	{r4, lr}
 800086e:	f000 f8af 	bl	80009d0 <__lesf2>
 8000872:	2800      	cmp	r0, #0
 8000874:	db01      	blt.n	800087a <__aeabi_fcmplt+0xe>
 8000876:	2000      	movs	r0, #0
 8000878:	bd10      	pop	{r4, pc}
 800087a:	2001      	movs	r0, #1
 800087c:	bd10      	pop	{r4, pc}
 800087e:	46c0      	nop			; (mov r8, r8)

08000880 <__aeabi_fcmple>:
 8000880:	b510      	push	{r4, lr}
 8000882:	f000 f8a5 	bl	80009d0 <__lesf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	dd01      	ble.n	800088e <__aeabi_fcmple+0xe>
 800088a:	2000      	movs	r0, #0
 800088c:	bd10      	pop	{r4, pc}
 800088e:	2001      	movs	r0, #1
 8000890:	bd10      	pop	{r4, pc}
 8000892:	46c0      	nop			; (mov r8, r8)

08000894 <__aeabi_fcmpgt>:
 8000894:	b510      	push	{r4, lr}
 8000896:	f000 f855 	bl	8000944 <__gesf2>
 800089a:	2800      	cmp	r0, #0
 800089c:	dc01      	bgt.n	80008a2 <__aeabi_fcmpgt+0xe>
 800089e:	2000      	movs	r0, #0
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	2001      	movs	r0, #1
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)

080008a8 <__aeabi_fcmpge>:
 80008a8:	b510      	push	{r4, lr}
 80008aa:	f000 f84b 	bl	8000944 <__gesf2>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	da01      	bge.n	80008b6 <__aeabi_fcmpge+0xe>
 80008b2:	2000      	movs	r0, #0
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	2001      	movs	r0, #1
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)

080008bc <__clzsi2>:
 80008bc:	211c      	movs	r1, #28
 80008be:	2301      	movs	r3, #1
 80008c0:	041b      	lsls	r3, r3, #16
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d301      	bcc.n	80008ca <__clzsi2+0xe>
 80008c6:	0c00      	lsrs	r0, r0, #16
 80008c8:	3910      	subs	r1, #16
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d301      	bcc.n	80008d4 <__clzsi2+0x18>
 80008d0:	0a00      	lsrs	r0, r0, #8
 80008d2:	3908      	subs	r1, #8
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	4298      	cmp	r0, r3
 80008d8:	d301      	bcc.n	80008de <__clzsi2+0x22>
 80008da:	0900      	lsrs	r0, r0, #4
 80008dc:	3904      	subs	r1, #4
 80008de:	a202      	add	r2, pc, #8	; (adr r2, 80008e8 <__clzsi2+0x2c>)
 80008e0:	5c10      	ldrb	r0, [r2, r0]
 80008e2:	1840      	adds	r0, r0, r1
 80008e4:	4770      	bx	lr
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	02020304 	.word	0x02020304
 80008ec:	01010101 	.word	0x01010101
	...

080008f8 <__eqsf2>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	0042      	lsls	r2, r0, #1
 80008fc:	0245      	lsls	r5, r0, #9
 80008fe:	024e      	lsls	r6, r1, #9
 8000900:	004c      	lsls	r4, r1, #1
 8000902:	0fc3      	lsrs	r3, r0, #31
 8000904:	0a6d      	lsrs	r5, r5, #9
 8000906:	2001      	movs	r0, #1
 8000908:	0e12      	lsrs	r2, r2, #24
 800090a:	0a76      	lsrs	r6, r6, #9
 800090c:	0e24      	lsrs	r4, r4, #24
 800090e:	0fc9      	lsrs	r1, r1, #31
 8000910:	2aff      	cmp	r2, #255	; 0xff
 8000912:	d006      	beq.n	8000922 <__eqsf2+0x2a>
 8000914:	2cff      	cmp	r4, #255	; 0xff
 8000916:	d003      	beq.n	8000920 <__eqsf2+0x28>
 8000918:	42a2      	cmp	r2, r4
 800091a:	d101      	bne.n	8000920 <__eqsf2+0x28>
 800091c:	42b5      	cmp	r5, r6
 800091e:	d006      	beq.n	800092e <__eqsf2+0x36>
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	2d00      	cmp	r5, #0
 8000924:	d1fc      	bne.n	8000920 <__eqsf2+0x28>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d1fa      	bne.n	8000920 <__eqsf2+0x28>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d1f8      	bne.n	8000920 <__eqsf2+0x28>
 800092e:	428b      	cmp	r3, r1
 8000930:	d006      	beq.n	8000940 <__eqsf2+0x48>
 8000932:	2001      	movs	r0, #1
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1f3      	bne.n	8000920 <__eqsf2+0x28>
 8000938:	0028      	movs	r0, r5
 800093a:	1e43      	subs	r3, r0, #1
 800093c:	4198      	sbcs	r0, r3
 800093e:	e7ef      	b.n	8000920 <__eqsf2+0x28>
 8000940:	2000      	movs	r0, #0
 8000942:	e7ed      	b.n	8000920 <__eqsf2+0x28>

08000944 <__gesf2>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0245      	lsls	r5, r0, #9
 800094a:	024e      	lsls	r6, r1, #9
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	0fc3      	lsrs	r3, r0, #31
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	0e12      	lsrs	r2, r2, #24
 8000954:	0a76      	lsrs	r6, r6, #9
 8000956:	0e24      	lsrs	r4, r4, #24
 8000958:	0fc8      	lsrs	r0, r1, #31
 800095a:	2aff      	cmp	r2, #255	; 0xff
 800095c:	d01b      	beq.n	8000996 <__gesf2+0x52>
 800095e:	2cff      	cmp	r4, #255	; 0xff
 8000960:	d00e      	beq.n	8000980 <__gesf2+0x3c>
 8000962:	2a00      	cmp	r2, #0
 8000964:	d11b      	bne.n	800099e <__gesf2+0x5a>
 8000966:	2c00      	cmp	r4, #0
 8000968:	d101      	bne.n	800096e <__gesf2+0x2a>
 800096a:	2e00      	cmp	r6, #0
 800096c:	d01c      	beq.n	80009a8 <__gesf2+0x64>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d00c      	beq.n	800098c <__gesf2+0x48>
 8000972:	4283      	cmp	r3, r0
 8000974:	d01c      	beq.n	80009b0 <__gesf2+0x6c>
 8000976:	2102      	movs	r1, #2
 8000978:	1e58      	subs	r0, r3, #1
 800097a:	4008      	ands	r0, r1
 800097c:	3801      	subs	r0, #1
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	2e00      	cmp	r6, #0
 8000982:	d122      	bne.n	80009ca <__gesf2+0x86>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d1f4      	bne.n	8000972 <__gesf2+0x2e>
 8000988:	2d00      	cmp	r5, #0
 800098a:	d1f2      	bne.n	8000972 <__gesf2+0x2e>
 800098c:	2800      	cmp	r0, #0
 800098e:	d1f6      	bne.n	800097e <__gesf2+0x3a>
 8000990:	2001      	movs	r0, #1
 8000992:	4240      	negs	r0, r0
 8000994:	e7f3      	b.n	800097e <__gesf2+0x3a>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d117      	bne.n	80009ca <__gesf2+0x86>
 800099a:	2cff      	cmp	r4, #255	; 0xff
 800099c:	d0f0      	beq.n	8000980 <__gesf2+0x3c>
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d1e7      	bne.n	8000972 <__gesf2+0x2e>
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d1e5      	bne.n	8000972 <__gesf2+0x2e>
 80009a6:	e7e6      	b.n	8000976 <__gesf2+0x32>
 80009a8:	2000      	movs	r0, #0
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e7      	beq.n	800097e <__gesf2+0x3a>
 80009ae:	e7e2      	b.n	8000976 <__gesf2+0x32>
 80009b0:	42a2      	cmp	r2, r4
 80009b2:	dc05      	bgt.n	80009c0 <__gesf2+0x7c>
 80009b4:	dbea      	blt.n	800098c <__gesf2+0x48>
 80009b6:	42b5      	cmp	r5, r6
 80009b8:	d802      	bhi.n	80009c0 <__gesf2+0x7c>
 80009ba:	d3e7      	bcc.n	800098c <__gesf2+0x48>
 80009bc:	2000      	movs	r0, #0
 80009be:	e7de      	b.n	800097e <__gesf2+0x3a>
 80009c0:	4243      	negs	r3, r0
 80009c2:	4158      	adcs	r0, r3
 80009c4:	0040      	lsls	r0, r0, #1
 80009c6:	3801      	subs	r0, #1
 80009c8:	e7d9      	b.n	800097e <__gesf2+0x3a>
 80009ca:	2002      	movs	r0, #2
 80009cc:	4240      	negs	r0, r0
 80009ce:	e7d6      	b.n	800097e <__gesf2+0x3a>

080009d0 <__lesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d00b      	beq.n	8000a02 <__lesf2+0x32>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00d      	beq.n	8000a0a <__lesf2+0x3a>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11f      	bne.n	8000a32 <__lesf2+0x62>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d116      	bne.n	8000a24 <__lesf2+0x54>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d114      	bne.n	8000a24 <__lesf2+0x54>
 80009fa:	2000      	movs	r0, #0
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	d010      	beq.n	8000a22 <__lesf2+0x52>
 8000a00:	e009      	b.n	8000a16 <__lesf2+0x46>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d10c      	bne.n	8000a20 <__lesf2+0x50>
 8000a06:	2cff      	cmp	r4, #255	; 0xff
 8000a08:	d113      	bne.n	8000a32 <__lesf2+0x62>
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d108      	bne.n	8000a20 <__lesf2+0x50>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d008      	beq.n	8000a24 <__lesf2+0x54>
 8000a12:	4283      	cmp	r3, r0
 8000a14:	d012      	beq.n	8000a3c <__lesf2+0x6c>
 8000a16:	2102      	movs	r1, #2
 8000a18:	1e58      	subs	r0, r3, #1
 8000a1a:	4008      	ands	r0, r1
 8000a1c:	3801      	subs	r0, #1
 8000a1e:	e000      	b.n	8000a22 <__lesf2+0x52>
 8000a20:	2002      	movs	r0, #2
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d1f4      	bne.n	8000a12 <__lesf2+0x42>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d1fa      	bne.n	8000a22 <__lesf2+0x52>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4240      	negs	r0, r0
 8000a30:	e7f7      	b.n	8000a22 <__lesf2+0x52>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d1ed      	bne.n	8000a12 <__lesf2+0x42>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d1eb      	bne.n	8000a12 <__lesf2+0x42>
 8000a3a:	e7ec      	b.n	8000a16 <__lesf2+0x46>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__lesf2+0x7c>
 8000a40:	dbf2      	blt.n	8000a28 <__lesf2+0x58>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__lesf2+0x7c>
 8000a46:	d3ef      	bcc.n	8000a28 <__lesf2+0x58>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7ea      	b.n	8000a22 <__lesf2+0x52>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7e5      	b.n	8000a22 <__lesf2+0x52>
 8000a56:	46c0      	nop			; (mov r8, r8)

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b7f      	cmp	r3, #127	; 0x7f
 8000a6a:	d809      	bhi.n	8000a80 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	001a      	movs	r2, r3
 8000a72:	231f      	movs	r3, #31
 8000a74:	401a      	ands	r2, r3
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_EnableIRQ+0x30>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4091      	lsls	r1, r2
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	0002      	movs	r2, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa0:	d828      	bhi.n	8000af4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa2:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <__NVIC_SetPriority+0xd4>)
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	33c0      	adds	r3, #192	; 0xc0
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	589b      	ldr	r3, [r3, r2]
 8000ab2:	1dfa      	adds	r2, r7, #7
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	400a      	ands	r2, r1
 8000abc:	00d2      	lsls	r2, r2, #3
 8000abe:	21ff      	movs	r1, #255	; 0xff
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	019b      	lsls	r3, r3, #6
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2303      	movs	r3, #3
 8000ada:	4003      	ands	r3, r0
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae0:	481f      	ldr	r0, [pc, #124]	; (8000b60 <__NVIC_SetPriority+0xd4>)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	430a      	orrs	r2, r1
 8000aec:	33c0      	adds	r3, #192	; 0xc0
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000af2:	e031      	b.n	8000b58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <__NVIC_SetPriority+0xd8>)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0019      	movs	r1, r3
 8000afc:	230f      	movs	r3, #15
 8000afe:	400b      	ands	r3, r1
 8000b00:	3b08      	subs	r3, #8
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3306      	adds	r3, #6
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1dfa      	adds	r2, r7, #7
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	0011      	movs	r1, r2
 8000b14:	2203      	movs	r2, #3
 8000b16:	400a      	ands	r2, r1
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	401a      	ands	r2, r3
 8000b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	019b      	lsls	r3, r3, #6
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	2303      	movs	r3, #3
 8000b36:	4003      	ands	r3, r0
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <__NVIC_SetPriority+0xd8>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	001c      	movs	r4, r3
 8000b44:	230f      	movs	r3, #15
 8000b46:	4023      	ands	r3, r4
 8000b48:	3b08      	subs	r3, #8
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	3306      	adds	r3, #6
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	18c3      	adds	r3, r0, r3
 8000b54:	3304      	adds	r3, #4
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8000b78:	401a      	ands	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	611a      	str	r2, [r3, #16]
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	dfffffff 	.word	0xdfffffff

08000b90 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	2107      	movs	r1, #7
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4099      	lsls	r1, r3
 8000bba:	000b      	movs	r3, r1
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000bdc:	401a      	ands	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	431a      	orrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60da      	str	r2, [r3, #12]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	ffdfffff 	.word	0xffdfffff

08000bf4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	211f      	movs	r1, #31
 8000c08:	400a      	ands	r2, r1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	0e9b      	lsrs	r3, r3, #26
 8000c18:	210f      	movs	r1, #15
 8000c1a:	4019      	ands	r1, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	201f      	movs	r0, #31
 8000c20:	4003      	ands	r3, r0
 8000c22:	4099      	lsls	r1, r3
 8000c24:	000b      	movs	r3, r1
 8000c26:	431a      	orrs	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b004      	add	sp, #16
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	0212      	lsls	r2, r2, #8
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	400b      	ands	r3, r1
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c56:	400b      	ands	r3, r1
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	07ffff00 	.word	0x07ffff00

08000c6c <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4393      	bics	r3, r2
 8000c7e:	001a      	movs	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	0552      	lsls	r2, r2, #21
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	6fffffe8 	.word	0x6fffffe8

08000cb8 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	401a      	ands	r2, r3
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d101      	bne.n	8000cd6 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2204      	movs	r2, #4
 8000d06:	4393      	bics	r3, r2
 8000d08:	001a      	movs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2208      	movs	r2, #8
 8000d24:	4393      	bics	r3, r2
 8000d26:	001a      	movs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	605a      	str	r2, [r3, #4]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <LL_RCC_HSI_Enable+0x18>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <LL_RCC_HSI_Enable+0x18>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0049      	lsls	r1, r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000

08000d50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <LL_RCC_HSI_IsReady+0x24>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d101      	bne.n	8000d6a <LL_RCC_HSI_IsReady+0x1a>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <LL_RCC_HSI_IsReady+0x1c>
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LL_RCC_SetSysClkSource+0x24>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2207      	movs	r2, #7
 8000d86:	4393      	bics	r3, r2
 8000d88:	0019      	movs	r1, r3
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <LL_RCC_SetSysClkSource+0x24>)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	609a      	str	r2, [r3, #8]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000

08000da0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <LL_RCC_GetSysClkSource+0x14>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2238      	movs	r2, #56	; 0x38
 8000daa:	4013      	ands	r3, r2
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40021000 	.word	0x40021000

08000db8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <LL_RCC_SetAHBPrescaler+0x28>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	609a      	str	r2, [r3, #8]
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	fffff0ff 	.word	0xfffff0ff

08000de4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	0019      	movs	r1, r3
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	609a      	str	r2, [r3, #8]
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	ffff8fff 	.word	0xffff8fff

08000e10 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	0c12      	lsrs	r2, r2, #16
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	401a      	ands	r2, r3
 8000e24:	0011      	movs	r1, r2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0c1a      	lsrs	r2, r3, #16
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0449      	lsls	r1, r1, #17
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <LL_RCC_PLL_IsReady+0x24>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	049b      	lsls	r3, r3, #18
 8000e68:	401a      	ands	r2, r3
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	049b      	lsls	r3, r3, #18
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d101      	bne.n	8000e76 <LL_RCC_PLL_IsReady+0x1a>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_RCC_PLL_IsReady+0x1c>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	1fff808c 	.word	0x1fff808c

08000ec4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	0549      	lsls	r1, r1, #21
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	60da      	str	r2, [r3, #12]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4013      	ands	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4013      	ands	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4013      	ands	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000

08000f64 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <LL_FLASH_SetLatency+0x24>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2207      	movs	r2, #7
 8000f72:	4393      	bics	r3, r2
 8000f74:	0019      	movs	r1, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <LL_FLASH_SetLatency+0x24>)
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40022000 	.word	0x40022000

08000f8c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <LL_FLASH_GetLatency+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2207      	movs	r2, #7
 8000f96:	4013      	ands	r3, r2
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <LL_USART_DisableFIFO+0x1c>)
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	dfffffff 	.word	0xdfffffff

08000fe0 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fea:	f3ef 8310 	mrs	r3, PRIMASK
 8000fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f383 8810 	msr	PRIMASK, r3
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	075b      	lsls	r3, r3, #29
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	f383 8810 	msr	PRIMASK, r3
}
 800101c:	46c0      	nop			; (mov r8, r8)
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b006      	add	sp, #24
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001032:	f3ef 8310 	mrs	r3, PRIMASK
 8001036:	60bb      	str	r3, [r7, #8]
  return(result);
 8001038:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f383 8810 	msr	PRIMASK, r3
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <LL_USART_SetRXFIFOThreshold+0x48>)
 800104e:	401a      	ands	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	065b      	lsls	r3, r3, #25
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	f383 8810 	msr	PRIMASK, r3
}
 8001064:	46c0      	nop			; (mov r8, r8)
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b006      	add	sp, #24
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	f1ffffff 	.word	0xf1ffffff

08001074 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <LL_USART_ConfigAsyncMode+0x2c>)
 8001082:	401a      	ands	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	222a      	movs	r2, #42	; 0x2a
 800108e:	4393      	bics	r3, r2
 8001090:	001a      	movs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	ffffb7ff 	.word	0xffffb7ff

080010a4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	039b      	lsls	r3, r3, #14
 80010b4:	401a      	ands	r2, r3
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	039b      	lsls	r3, r3, #14
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d101      	bne.n	80010c2 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_USART_IsActiveFlag_TEACK+0x20>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	03db      	lsls	r3, r3, #15
 80010dc:	401a      	ands	r2, r3
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	03db      	lsls	r3, r3, #15
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d101      	bne.n	80010ea <LL_USART_IsActiveFlag_REACK+0x1e>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_USART_IsActiveFlag_REACK+0x20>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fefb 	bl	8000f0c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	055b      	lsls	r3, r3, #21
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fee0 	bl	8000ee0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f80a 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 f9ae 	bl	8001484 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001128:	f000 f90a 	bl	8001340 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800112c:	f000 f844 	bl	80011b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  EcuM_MainFunction();
 8001130:	f001 fbfc 	bl	800292c <EcuM_MainFunction>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001134:	e7fe      	b.n	8001134 <main+0x28>
	...

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800113c:	2002      	movs	r0, #2
 800113e:	f7ff ff11 	bl	8000f64 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	f7ff ff22 	bl	8000f8c <LL_FLASH_GetLatency>
 8001148:	0003      	movs	r3, r0
 800114a:	2b02      	cmp	r3, #2
 800114c:	d1fa      	bne.n	8001144 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 800114e:	f7ff fdf1 	bl	8000d34 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	f7ff fdfc 	bl	8000d50 <LL_RCC_HSI_IsReady>
 8001158:	0003      	movs	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d1fa      	bne.n	8001154 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	059b      	lsls	r3, r3, #22
 8001162:	2208      	movs	r2, #8
 8001164:	2100      	movs	r1, #0
 8001166:	2002      	movs	r0, #2
 8001168:	f7ff fe8c 	bl	8000e84 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800116c:	f7ff fe68 	bl	8000e40 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8001170:	f7ff fea8 	bl	8000ec4 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	f7ff fe71 	bl	8000e5c <LL_RCC_PLL_IsReady>
 800117a:	0003      	movs	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d1fa      	bne.n	8001176 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe19 	bl	8000db8 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001186:	2002      	movs	r0, #2
 8001188:	f7ff fdf6 	bl	8000d78 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	f7ff fe07 	bl	8000da0 <LL_RCC_GetSysClkSource>
 8001192:	0003      	movs	r3, r0
 8001194:	2b10      	cmp	r3, #16
 8001196:	d1fa      	bne.n	800118e <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe23 	bl	8000de4 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(64000000);
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SystemClock_Config+0x7c>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 f843 	bl	800222c <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <SystemClock_Config+0x7c>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 f84f 	bl	800224c <LL_SetSystemCoreClock>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	03d09000 	.word	0x03d09000

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b093      	sub	sp, #76	; 0x4c
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80011be:	2434      	movs	r4, #52	; 0x34
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	2310      	movs	r3, #16
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f002 fca5 	bl	8003b18 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80011ce:	231c      	movs	r3, #28
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	0018      	movs	r0, r3
 80011d4:	2318      	movs	r3, #24
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f002 fc9d 	bl	8003b18 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2318      	movs	r3, #24
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f002 fc96 	bl	8003b18 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	035b      	lsls	r3, r3, #13
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fe8b 	bl	8000f0c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff fe9e 	bl	8000f38 <LL_IOP_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2203      	movs	r2, #3
 8001206:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	1d3a      	adds	r2, r7, #4
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fc91 	bl	8001b3e <LL_GPIO_Init>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	05d2      	lsls	r2, r2, #23
 8001222:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800122a:	193b      	adds	r3, r7, r4
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001230:	193b      	adds	r3, r7, r4
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001236:	193b      	adds	r3, r7, r4
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <MX_ADC1_Init+0x178>)
 800123a:	0019      	movs	r1, r3
 800123c:	0010      	movs	r0, r2
 800123e:	f000 fb2b 	bl	8001898 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_CONFIGURABLE);
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	039b      	lsls	r3, r3, #14
 8001246:	4a3a      	ldr	r2, [pc, #232]	; (8001330 <MX_ADC1_Init+0x178>)
 8001248:	0019      	movs	r1, r3
 800124a:	0010      	movs	r0, r2
 800124c:	f7ff fcbe 	bl	8000bcc <LL_ADC_REG_SetSequencerConfigurable>

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <MX_ADC1_Init+0x178>)
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fd2f 	bl	8000cb8 <LL_ADC_IsActiveFlag_CCRDY>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d0f9      	beq.n	8001252 <MX_ADC1_Init+0x9a>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <MX_ADC1_Init+0x178>)
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fd3d 	bl	8000ce0 <LL_ADC_ClearFlag_CCRDY>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001266:	211c      	movs	r1, #28
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	22f0      	movs	r2, #240	; 0xf0
 8001272:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	0252      	lsls	r2, r2, #9
 800127a:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800128e:	187b      	adds	r3, r7, r1
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <MX_ADC1_Init+0x178>)
 8001292:	0019      	movs	r1, r3
 8001294:	0010      	movs	r0, r2
 8001296:	f000 fb35 	bl	8001904 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_ADC1_Init+0x178>)
 800129c:	2100      	movs	r1, #0
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff fce4 	bl	8000c6c <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_ADC1_Init+0x178>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fc5d 	bl	8000b68 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_ADC1_Init+0x178>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fc6b 	bl	8000b90 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012ba:	491e      	ldr	r1, [pc, #120]	; (8001334 <MX_ADC1_Init+0x17c>)
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_ADC1_Init+0x178>)
 80012be:	2200      	movs	r2, #0
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fc65 	bl	8000b90 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_ADC1_Init+0x178>)
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fd15 	bl	8000cf8 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_ADC1_Init+0x178>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fd20 	bl	8000d16 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_ADC1_Init+0x178>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fcd9 	bl	8000c90 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_ADC1_Init+0x180>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4916      	ldr	r1, [pc, #88]	; (800133c <MX_ADC1_Init+0x184>)
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7fe ff17 	bl	8000118 <__udivsi3>
 80012ea:	0003      	movs	r3, r0
 80012ec:	001a      	movs	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	210a      	movs	r1, #10
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7fe ff0d 	bl	8000118 <__udivsi3>
 80012fe:	0003      	movs	r3, r0
 8001300:	647b      	str	r3, [r7, #68]	; 0x44
   while(wait_loop_index != 0)
 8001302:	e002      	b.n	800130a <MX_ADC1_Init+0x152>
     {
   wait_loop_index--;
 8001304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001306:	3b01      	subs	r3, #1
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
   while(wait_loop_index != 0)
 800130a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f9      	bne.n	8001304 <MX_ADC1_Init+0x14c>
     }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_ADC1_Init+0x178>)
 8001312:	2201      	movs	r2, #1
 8001314:	2100      	movs	r1, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff fc6c 	bl	8000bf4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_COMMON_1);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <MX_ADC1_Init+0x178>)
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fc86 	bl	8000c34 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b013      	add	sp, #76	; 0x4c
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	40012400 	.word	0x40012400
 8001334:	07ffff04 	.word	0x07ffff04
 8001338:	20000000 	.word	0x20000000
 800133c:	00030d40 	.word	0x00030d40

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08f      	sub	sp, #60	; 0x3c
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001346:	2418      	movs	r4, #24
 8001348:	193b      	adds	r3, r7, r4
 800134a:	0018      	movs	r0, r3
 800134c:	2320      	movs	r3, #32
 800134e:	001a      	movs	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	f002 fbe1 	bl	8003b18 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	003b      	movs	r3, r7
 8001358:	0018      	movs	r0, r3
 800135a:	2318      	movs	r3, #24
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f002 fbda 	bl	8003b18 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001364:	23c0      	movs	r3, #192	; 0xc0
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fd51 	bl	8000e10 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	01db      	lsls	r3, r3, #7
 8001372:	0018      	movs	r0, r3
 8001374:	f7ff fdca 	bl	8000f0c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001378:	2004      	movs	r0, #4
 800137a:	f7ff fddd 	bl	8000f38 <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800137e:	003b      	movs	r3, r7
 8001380:	2210      	movs	r2, #16
 8001382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001384:	003b      	movs	r3, r7
 8001386:	2202      	movs	r2, #2
 8001388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800138a:	003b      	movs	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001390:	003b      	movs	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001396:	003b      	movs	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800139c:	003b      	movs	r3, r7
 800139e:	2201      	movs	r2, #1
 80013a0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	003b      	movs	r3, r7
 80013a4:	4a35      	ldr	r2, [pc, #212]	; (800147c <MX_USART1_UART_Init+0x13c>)
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f000 fbc8 	bl	8001b3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80013ae:	003b      	movs	r3, r7
 80013b0:	2220      	movs	r2, #32
 80013b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013b4:	003b      	movs	r3, r7
 80013b6:	2202      	movs	r2, #2
 80013b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013ba:	003b      	movs	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c0:	003b      	movs	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c6:	003b      	movs	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80013cc:	003b      	movs	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	003b      	movs	r3, r7
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <MX_USART1_UART_Init+0x13c>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f000 fbb0 	bl	8001b3e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 80013de:	2100      	movs	r1, #0
 80013e0:	201b      	movs	r0, #27
 80013e2:	f7ff fb53 	bl	8000a8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80013e6:	201b      	movs	r0, #27
 80013e8:	f7ff fb36 	bl	8000a58 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	22e1      	movs	r2, #225	; 0xe1
 80013f6:	0252      	lsls	r2, r2, #9
 80013f8:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013fa:	0021      	movs	r1, r4
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	220c      	movs	r2, #12
 8001412:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001420:	187b      	adds	r3, r7, r1
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <MX_USART1_UART_Init+0x140>)
 8001424:	0019      	movs	r1, r3
 8001426:	0010      	movs	r0, r2
 8001428:	f000 fe58 	bl	80020dc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART1_UART_Init+0x140>)
 800142e:	2100      	movs	r1, #0
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fdd5 	bl	8000fe0 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_USART1_UART_Init+0x140>)
 8001438:	2100      	movs	r1, #0
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fdf4 	bl	8001028 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USART1_UART_Init+0x140>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fdbc 	bl	8000fc0 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_USART1_UART_Init+0x140>)
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff fe12 	bl	8001074 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART1_UART_Init+0x140>)
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fda6 	bl	8000fa4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART1_UART_Init+0x140>)
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fe21 	bl	80010a4 <LL_USART_IsActiveFlag_TEACK>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d0f9      	beq.n	800145a <MX_USART1_UART_Init+0x11a>
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART1_UART_Init+0x140>)
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fe2f 	bl	80010cc <LL_USART_IsActiveFlag_REACK>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d0f3      	beq.n	800145a <MX_USART1_UART_Init+0x11a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b00f      	add	sp, #60	; 0x3c
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	50000800 	.word	0x50000800
 8001480:	40013800 	.word	0x40013800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	003b      	movs	r3, r7
 800148c:	0018      	movs	r0, r3
 800148e:	2318      	movs	r3, #24
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f002 fb40 	bl	8003b18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001498:	2004      	movs	r0, #4
 800149a:	f7ff fd4d 	bl	8000f38 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 800149e:	2020      	movs	r0, #32
 80014a0:	f7ff fd4a 	bl	8000f38 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fd47 	bl	8000f38 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff fd44 	bl	8000f38 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2120      	movs	r1, #32
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff fe1c 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fe16 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff fe10 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED3_GPIO_Port, LED_RED3_Pin);
 80014d4:	4b96      	ldr	r3, [pc, #600]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fe0b 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED3B1_GPIO_Port, LED_RED3B1_Pin);
 80014de:	4b94      	ldr	r3, [pc, #592]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80014e0:	2102      	movs	r1, #2
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff fe06 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED4_GPIO_Port, LED_RED4_Pin);
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4a90      	ldr	r2, [pc, #576]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80014ee:	0019      	movs	r1, r3
 80014f0:	0010      	movs	r0, r2
 80014f2:	f7ff fdff 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	005a      	lsls	r2, r3, #1
 80014fa:	23a0      	movs	r3, #160	; 0xa0
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fdf7 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_RED4C7_GPIO_Port, LED_RED4C7_Pin);
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <MX_GPIO_Init+0x2b0>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fdf2 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8001510:	4b87      	ldr	r3, [pc, #540]	; (8001730 <MX_GPIO_Init+0x2ac>)
 8001512:	2108      	movs	r1, #8
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fded 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 800151a:	4b85      	ldr	r3, [pc, #532]	; (8001730 <MX_GPIO_Init+0x2ac>)
 800151c:	2110      	movs	r1, #16
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fde8 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8001524:	4b82      	ldr	r3, [pc, #520]	; (8001730 <MX_GPIO_Init+0x2ac>)
 8001526:	2120      	movs	r1, #32
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fde3 	bl	80010f4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800152e:	003b      	movs	r3, r7
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0192      	lsls	r2, r2, #6
 8001534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001536:	003b      	movs	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800153c:	003b      	movs	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001542:	003b      	movs	r3, r7
 8001544:	4a7b      	ldr	r2, [pc, #492]	; (8001734 <MX_GPIO_Init+0x2b0>)
 8001546:	0019      	movs	r1, r3
 8001548:	0010      	movs	r0, r2
 800154a:	f000 faf8 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800154e:	003b      	movs	r3, r7
 8001550:	2220      	movs	r2, #32
 8001552:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001554:	003b      	movs	r3, r7
 8001556:	2201      	movs	r2, #1
 8001558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800155a:	003b      	movs	r3, r7
 800155c:	2202      	movs	r2, #2
 800155e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001560:	003b      	movs	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001566:	003b      	movs	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800156c:	003a      	movs	r2, r7
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 fae2 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED1_Pin;
 800157a:	003b      	movs	r3, r7
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001580:	003b      	movs	r3, r7
 8001582:	2201      	movs	r2, #1
 8001584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001586:	003b      	movs	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800158c:	003b      	movs	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001592:	003b      	movs	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED1_GPIO_Port, &GPIO_InitStruct);
 8001598:	003a      	movs	r2, r7
 800159a:	23a0      	movs	r3, #160	; 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	0011      	movs	r1, r2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 facc 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED2_Pin;
 80015a6:	003b      	movs	r3, r7
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ac:	003b      	movs	r3, r7
 80015ae:	2201      	movs	r2, #1
 80015b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015b2:	003b      	movs	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015b8:	003b      	movs	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015be:	003b      	movs	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED2_GPIO_Port, &GPIO_InitStruct);
 80015c4:	003a      	movs	r2, r7
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 fab6 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED3_Pin;
 80015d2:	003b      	movs	r3, r7
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015d8:	003b      	movs	r3, r7
 80015da:	2201      	movs	r2, #1
 80015dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015de:	003b      	movs	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e4:	003b      	movs	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ea:	003b      	movs	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED3_GPIO_Port, &GPIO_InitStruct);
 80015f0:	003b      	movs	r3, r7
 80015f2:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80015f4:	0019      	movs	r1, r3
 80015f6:	0010      	movs	r0, r2
 80015f8:	f000 faa1 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED3B1_Pin;
 80015fc:	003b      	movs	r3, r7
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001602:	003b      	movs	r3, r7
 8001604:	2201      	movs	r2, #1
 8001606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001608:	003b      	movs	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800160e:	003b      	movs	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001614:	003b      	movs	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED3B1_GPIO_Port, &GPIO_InitStruct);
 800161a:	003b      	movs	r3, r7
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <MX_GPIO_Init+0x2ac>)
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f000 fa8c 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED4_Pin;
 8001626:	003b      	movs	r3, r7
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800162e:	003b      	movs	r3, r7
 8001630:	2201      	movs	r2, #1
 8001632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001634:	003b      	movs	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800163a:	003b      	movs	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001640:	003b      	movs	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED4_GPIO_Port, &GPIO_InitStruct);
 8001646:	003b      	movs	r3, r7
 8001648:	4a39      	ldr	r2, [pc, #228]	; (8001730 <MX_GPIO_Init+0x2ac>)
 800164a:	0019      	movs	r1, r3
 800164c:	0010      	movs	r0, r2
 800164e:	f000 fa76 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_PIN1_Pin;
 8001652:	003b      	movs	r3, r7
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	0052      	lsls	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800165a:	003b      	movs	r3, r7
 800165c:	2201      	movs	r2, #1
 800165e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001660:	003b      	movs	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001666:	003b      	movs	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800166c:	003b      	movs	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MOTOR_PIN1_GPIO_Port, &GPIO_InitStruct);
 8001672:	003a      	movs	r2, r7
 8001674:	23a0      	movs	r3, #160	; 0xa0
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f000 fa5f 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED4C7_Pin;
 8001680:	003b      	movs	r3, r7
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001686:	003b      	movs	r3, r7
 8001688:	2201      	movs	r2, #1
 800168a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800168c:	003b      	movs	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001692:	003b      	movs	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001698:	003b      	movs	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_RED4C7_GPIO_Port, &GPIO_InitStruct);
 800169e:	003b      	movs	r3, r7
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <MX_GPIO_Init+0x2b0>)
 80016a2:	0019      	movs	r1, r3
 80016a4:	0010      	movs	r0, r2
 80016a6:	f000 fa4a 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_PIN4_Pin;
 80016aa:	003b      	movs	r3, r7
 80016ac:	2208      	movs	r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016b0:	003b      	movs	r3, r7
 80016b2:	2201      	movs	r2, #1
 80016b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016b6:	003b      	movs	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016bc:	003b      	movs	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016c2:	003b      	movs	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MOTOR_PIN4_GPIO_Port, &GPIO_InitStruct);
 80016c8:	003b      	movs	r3, r7
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80016cc:	0019      	movs	r1, r3
 80016ce:	0010      	movs	r0, r2
 80016d0:	f000 fa35 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_PIN2_Pin;
 80016d4:	003b      	movs	r3, r7
 80016d6:	2210      	movs	r2, #16
 80016d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016da:	003b      	movs	r3, r7
 80016dc:	2201      	movs	r2, #1
 80016de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016e0:	003b      	movs	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016e6:	003b      	movs	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016ec:	003b      	movs	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MOTOR_PIN2_GPIO_Port, &GPIO_InitStruct);
 80016f2:	003b      	movs	r3, r7
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <MX_GPIO_Init+0x2ac>)
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f000 fa20 	bl	8001b3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOTOR_PIN3_Pin;
 80016fe:	003b      	movs	r3, r7
 8001700:	2220      	movs	r2, #32
 8001702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001704:	003b      	movs	r3, r7
 8001706:	2201      	movs	r2, #1
 8001708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800170a:	003b      	movs	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001710:	003b      	movs	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001716:	003b      	movs	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MOTOR_PIN3_GPIO_Port, &GPIO_InitStruct);
 800171c:	003b      	movs	r3, r7
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <MX_GPIO_Init+0x2ac>)
 8001720:	0019      	movs	r1, r3
 8001722:	0010      	movs	r0, r2
 8001724:	f000 fa0b 	bl	8001b3e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b006      	add	sp, #24
 800172e:	bd80      	pop	{r7, pc}
 8001730:	50000400 	.word	0x50000400
 8001734:	50000800 	.word	0x50000800

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	EcuM_SysTickCallBack();
 800175c:	f001 f8c2 	bl	80028e4 <EcuM_SysTickCallBack>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_SysCallBack();
 800176a:	f001 ff3b 	bl	80035e4 <USART_SysCallBack>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f002 f98e 	bl	8003ac4 <__errno>
 80017a8:	0003      	movs	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	425b      	negs	r3, r3
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	18d2      	adds	r2, r2, r3
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <_sbrk+0x64>)
 80017c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b006      	add	sp, #24
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20009000 	.word	0x20009000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20000768 	.word	0x20000768
 80017dc:	200008d8 	.word	0x200008d8

080017e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f0:	f7ff fff6 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800181a:	f002 f959 	bl	8003ad0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800181e:	f7ff fc75 	bl	800110c <main>

08001822 <LoopForever>:

LoopForever:
  b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000074c 	.word	0x2000074c
  ldr r2, =_sidata
 8001830:	08004540 	.word	0x08004540
  ldr r2, =_sbss
 8001834:	2000074c 	.word	0x2000074c
  ldr r4, =_ebss
 8001838:	200008d4 	.word	0x200008d4

0800183c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_COMP_IRQHandler>

0800183e <LL_ADC_REG_GetSequencerConfigurable>:
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	039b      	lsls	r3, r3, #14
 800184e:	4013      	ands	r3, r2
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <LL_ADC_REG_SetSequencerLength>:
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}

08001876 <LL_ADC_IsEnabled>:
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <LL_ADC_IsEnabled+0x18>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsEnabled+0x1a>
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}

08001898 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80018a2:	230f      	movs	r3, #15
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff ffe2 	bl	8001876 <LL_ADC_IsEnabled>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d118      	bne.n	80018e8 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <LL_ADC_Init+0x68>)
 80018bc:	401a      	ands	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6859      	ldr	r1, [r3, #4]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4319      	orrs	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
               pADC_InitStruct->Resolution
               | pADC_InitStruct->DataAlignment
               | pADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	089a      	lsrs	r2, r3, #2
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	e003      	b.n	80018f0 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80018f0:	230f      	movs	r3, #15
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	ffff3fc7 	.word	0xffff3fc7

08001904 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(pADC_RegInitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(pADC_RegInitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff90 	bl	800183e <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(pADC_RegInitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ff8c 	bl	800183e <LL_ADC_REG_GetSequencerConfigurable>
                 || (pADC_RegInitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ffa4 	bl	8001876 <LL_ADC_IsEnabled>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d13f      	bne.n	80019b2 <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff ff82 	bl	800183e <LL_ADC_REG_GetSequencerConfigurable>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d003      	beq.n	8001946 <LL_ADC_REG_Init+0x42>
        || (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2bf0      	cmp	r3, #240	; 0xf0
 8001944:	d015      	beq.n	8001972 <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <LL_ADC_REG_Init+0xc4>)
 800194c:	401a      	ands	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4319      	orrs	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4319      	orrs	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	4319      	orrs	r1, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	430b      	orrs	r3, r1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e011      	b.n	8001996 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <LL_ADC_REG_Init+0xc4>)
 8001978:	401a      	ands	r2, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	4319      	orrs	r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	4319      	orrs	r1, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	430b      	orrs	r3, r1
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff ff50 	bl	800183e <LL_ADC_REG_GetSequencerConfigurable>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d00b      	beq.n	80019ba <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0011      	movs	r1, r2
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff ff54 	bl	8001858 <LL_ADC_REG_SetSequencerLength>
 80019b0:	e003      	b.n	80019ba <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80019b2:	230f      	movs	r3, #15
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80019ba:	230f      	movs	r3, #15
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781b      	ldrb	r3, [r3, #0]
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fffec23c 	.word	0xfffec23c

080019cc <LL_GPIO_SetPinMode>:
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	435b      	muls	r3, r3
 80019e0:	001a      	movs	r2, r3
 80019e2:	0013      	movs	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	43db      	mvns	r3, r3
 80019ea:	400b      	ands	r3, r1
 80019ec:	001a      	movs	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	435b      	muls	r3, r3
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	434b      	muls	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LL_GPIO_SetPinOutputType>:
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	43d2      	mvns	r2, r2
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	434b      	muls	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	605a      	str	r2, [r3, #4]
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <LL_GPIO_SetPinSpeed>:
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	435b      	muls	r3, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	189b      	adds	r3, r3, r2
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	001a      	movs	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	435b      	muls	r3, r3
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	434b      	muls	r3, r1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	609a      	str	r2, [r3, #8]
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <LL_GPIO_SetPinPull>:
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	435b      	muls	r3, r3
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	43db      	mvns	r3, r3
 8001a84:	400b      	ands	r3, r1
 8001a86:	001a      	movs	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	435b      	muls	r3, r3
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	434b      	muls	r3, r1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	60da      	str	r2, [r3, #12]
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <LL_GPIO_SetAFPin_0_7>:
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a19      	ldr	r1, [r3, #32]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	435b      	muls	r3, r3
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4353      	muls	r3, r2
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	435a      	muls	r2, r3
 8001aba:	0013      	movs	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	435b      	muls	r3, r3
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	434b      	muls	r3, r1
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	434b      	muls	r3, r1
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	434b      	muls	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	621a      	str	r2, [r3, #32]
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LL_GPIO_SetAFPin_8_15>:
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	0a12      	lsrs	r2, r2, #8
 8001afc:	4353      	muls	r3, r2
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	0a12      	lsrs	r2, r2, #8
 8001b02:	4353      	muls	r3, r2
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	0a12      	lsrs	r2, r2, #8
 8001b08:	435a      	muls	r2, r3
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	43db      	mvns	r3, r3
 8001b12:	400b      	ands	r3, r1
 8001b14:	001a      	movs	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	0a09      	lsrs	r1, r1, #8
 8001b1e:	434b      	muls	r3, r1
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	0a09      	lsrs	r1, r1, #8
 8001b24:	434b      	muls	r3, r1
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	0a09      	lsrs	r1, r1, #8
 8001b2a:	434b      	muls	r3, r1
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	434b      	muls	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b4c:	e047      	b.n	8001bde <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4091      	lsls	r1, r2
 8001b58:	000a      	movs	r2, r1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d039      	beq.n	8001bd8 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d003      	beq.n	8001b74 <LL_GPIO_Init+0x36>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d10d      	bne.n	8001b90 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff ff56 	bl	8001a2e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff ff3a 	bl	8001a04 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ff64 	bl	8001a66 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d111      	bne.n	8001bca <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d807      	bhi.n	8001bbc <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff72 	bl	8001a9e <LL_GPIO_SetAFPin_0_7>
 8001bba:	e006      	b.n	8001bca <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff ff8d 	bl	8001ae4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff fefa 	bl	80019cc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	40da      	lsrs	r2, r3
 8001be6:	1e13      	subs	r3, r2, #0
 8001be8:	d1b1      	bne.n	8001b4e <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <LL_RCC_HSI_IsReady>:
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <LL_RCC_HSI_IsReady+0x24>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	401a      	ands	r2, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d101      	bne.n	8001c0e <LL_RCC_HSI_IsReady+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_RCC_HSI_IsReady+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_LSE_IsReady>:
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <LL_RCC_LSE_IsReady+0x1c>)
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d101      	bne.n	8001c30 <LL_RCC_LSE_IsReady+0x14>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_RCC_LSE_IsReady+0x16>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000

08001c3c <LL_RCC_GetSysClkSource>:
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <LL_RCC_GetSysClkSource+0x14>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2238      	movs	r2, #56	; 0x38
 8001c46:	4013      	ands	r3, r2
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000

08001c54 <LL_RCC_GetAHBPrescaler>:
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <LL_RCC_GetAHBPrescaler+0x14>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	23f0      	movs	r3, #240	; 0xf0
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4013      	ands	r3, r2
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <LL_RCC_GetAPB1Prescaler>:
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	23e0      	movs	r3, #224	; 0xe0
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4013      	ands	r3, r2
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000

08001c84 <LL_RCC_GetUSARTClockSource>:
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <LL_RCC_GetUSARTClockSource+0x20>)
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	4313      	orrs	r3, r2
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <LL_RCC_PLL_GetN>:
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <LL_RCC_PLL_GetN+0x14>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	227f      	movs	r2, #127	; 0x7f
 8001cb4:	4013      	ands	r3, r2
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <LL_RCC_PLL_GetR>:
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <LL_RCC_PLL_GetR+0x14>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0f5b      	lsrs	r3, r3, #29
 8001cca:	075b      	lsls	r3, r3, #29
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_RCC_PLL_GetMainSource>:
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <LL_RCC_PLL_GetMainSource+0x14>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000

08001cf0 <LL_RCC_PLL_GetDivider>:
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <LL_RCC_PLL_GetDivider+0x14>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2270      	movs	r2, #112	; 0x70
 8001cfa:	4013      	ands	r3, r2
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40021000 	.word	0x40021000

08001d08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001d10:	f000 f8a8 	bl	8001e64 <RCC_GetSystemClockFreq>
 8001d14:	0002      	movs	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f8ce 	bl	8001ec0 <RCC_GetHCLKClockFreq>
 8001d24:	0002      	movs	r2, r0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f8de 	bl	8001ef0 <RCC_GetPCLK1ClockFreq>
 8001d34:	0002      	movs	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	609a      	str	r2, [r3, #8]
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d134      	bne.n	8001dc0 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff93 	bl	8001c84 <LL_RCC_GetUSARTClockSource>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d016      	beq.n	8001d94 <LL_RCC_GetUSARTClockFreq+0x50>
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d81c      	bhi.n	8001da6 <LL_RCC_GetUSARTClockFreq+0x62>
 8001d6c:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <LL_RCC_GetUSARTClockFreq+0x108>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <LL_RCC_GetUSARTClockFreq+0x36>
 8001d72:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d005      	beq.n	8001d84 <LL_RCC_GetUSARTClockFreq+0x40>
 8001d78:	e015      	b.n	8001da6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001d7a:	f000 f873 	bl	8001e64 <RCC_GetSystemClockFreq>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	60fb      	str	r3, [r7, #12]
        break;
 8001d82:	e05c      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001d84:	f7ff ff36 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d150      	bne.n	8001e30 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <LL_RCC_GetUSARTClockFreq+0x110>)
 8001d90:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d92:	e04d      	b.n	8001e30 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001d94:	f7ff ff42 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d14a      	bne.n	8001e34 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001da4:	e046      	b.n	8001e34 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001da6:	f000 f85d 	bl	8001e64 <RCC_GetSystemClockFreq>
 8001daa:	0003      	movs	r3, r0
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f887 	bl	8001ec0 <RCC_GetHCLKClockFreq>
 8001db2:	0003      	movs	r3, r0
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 f89b 	bl	8001ef0 <RCC_GetPCLK1ClockFreq>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	60fb      	str	r3, [r7, #12]
        break;
 8001dbe:	e03e      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d13b      	bne.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff ff5b 	bl	8001c84 <LL_RCC_GetUSARTClockSource>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d016      	beq.n	8001e04 <LL_RCC_GetUSARTClockFreq+0xc0>
 8001dd6:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d81c      	bhi.n	8001e16 <LL_RCC_GetUSARTClockFreq+0xd2>
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <LL_RCC_GetUSARTClockFreq+0x118>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <LL_RCC_GetUSARTClockFreq+0xa6>
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d005      	beq.n	8001df4 <LL_RCC_GetUSARTClockFreq+0xb0>
 8001de8:	e015      	b.n	8001e16 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001dea:	f000 f83b 	bl	8001e64 <RCC_GetSystemClockFreq>
 8001dee:	0003      	movs	r3, r0
 8001df0:	60fb      	str	r3, [r7, #12]
        break;
 8001df2:	e024      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001df4:	f7ff fefe 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d11c      	bne.n	8001e38 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <LL_RCC_GetUSARTClockFreq+0x110>)
 8001e00:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e02:	e019      	b.n	8001e38 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001e04:	f7ff ff0a 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d116      	bne.n	8001e3c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e14:	e012      	b.n	8001e3c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e16:	f000 f825 	bl	8001e64 <RCC_GetSystemClockFreq>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f84f 	bl	8001ec0 <RCC_GetHCLKClockFreq>
 8001e22:	0003      	movs	r3, r0
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f863 	bl	8001ef0 <RCC_GetPCLK1ClockFreq>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	60fb      	str	r3, [r7, #12]
        break;
 8001e2e:	e006      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	e004      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	e002      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	e000      	b.n	8001e3e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001e3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	00030003 	.word	0x00030003
 8001e4c:	00030001 	.word	0x00030001
 8001e50:	00030002 	.word	0x00030002
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	000c000c 	.word	0x000c000c
 8001e5c:	000c0004 	.word	0x000c0004
 8001e60:	000c0008 	.word	0x000c0008

08001e64 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e6a:	f7ff fee7 	bl	8001c3c <LL_RCC_GetSysClkSource>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d002      	beq.n	8001e7a <RCC_GetSystemClockFreq+0x16>
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d003      	beq.n	8001e80 <RCC_GetSystemClockFreq+0x1c>
 8001e78:	e007      	b.n	8001e8a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <RCC_GetSystemClockFreq+0x50>)
 8001e7c:	607b      	str	r3, [r7, #4]
      break;
 8001e7e:	e014      	b.n	8001eaa <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e80:	f000 f84c 	bl	8001f1c <RCC_PLL_GetFreqDomain_SYS>
 8001e84:	0003      	movs	r3, r0
 8001e86:	607b      	str	r3, [r7, #4]
      break;
 8001e88:	e00f      	b.n	8001eaa <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <RCC_GetSystemClockFreq+0x54>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0adb      	lsrs	r3, r3, #11
 8001e90:	2207      	movs	r2, #7
 8001e92:	4013      	ands	r3, r2
 8001e94:	2201      	movs	r2, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <RCC_GetSystemClockFreq+0x58>)
 8001ea0:	f7fe f93a 	bl	8000118 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	607b      	str	r3, [r7, #4]
      break;
 8001ea8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001eaa:	687b      	ldr	r3, [r7, #4]
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	00f42400 	.word	0x00f42400

08001ec0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001ec8:	f7ff fec4 	bl	8001c54 <LL_RCC_GetAHBPrescaler>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <RCC_GetHCLKClockFreq+0x2c>)
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	58d3      	ldr	r3, [r2, r3]
 8001eda:	221f      	movs	r2, #31
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	40da      	lsrs	r2, r3
 8001ee2:	0013      	movs	r3, r2
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	08004460 	.word	0x08004460

08001ef0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ef8:	f7ff feb8 	bl	8001c6c <LL_RCC_GetAPB1Prescaler>
 8001efc:	0003      	movs	r3, r0
 8001efe:	0b1a      	lsrs	r2, r3, #12
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <RCC_GetPCLK1ClockFreq+0x28>)
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	58d3      	ldr	r3, [r2, r3]
 8001f06:	221f      	movs	r2, #31
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	40da      	lsrs	r2, r3
 8001f0e:	0013      	movs	r3, r2
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	080044a0 	.word	0x080044a0

08001f1c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001f22:	f7ff fed9 	bl	8001cd8 <LL_RCC_PLL_GetMainSource>
 8001f26:	0003      	movs	r3, r0
 8001f28:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d003      	beq.n	8001f38 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d003      	beq.n	8001f3e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001f36:	e005      	b.n	8001f44 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001f3a:	607b      	str	r3, [r7, #4]
      break;
 8001f3c:	e005      	b.n	8001f4a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001f40:	607b      	str	r3, [r7, #4]
      break;
 8001f42:	e002      	b.n	8001f4a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001f46:	607b      	str	r3, [r7, #4]
      break;
 8001f48:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001f4a:	f7ff fead 	bl	8001ca8 <LL_RCC_PLL_GetN>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4353      	muls	r3, r2
 8001f54:	001c      	movs	r4, r3
 8001f56:	f7ff fecb 	bl	8001cf0 <LL_RCC_PLL_GetDivider>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	3301      	adds	r3, #1
 8001f60:	0019      	movs	r1, r3
 8001f62:	0020      	movs	r0, r4
 8001f64:	f7fe f8d8 	bl	8000118 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	001c      	movs	r4, r3
 8001f6c:	f7ff fea8 	bl	8001cc0 <LL_RCC_PLL_GetR>
 8001f70:	0003      	movs	r3, r0
 8001f72:	0f5b      	lsrs	r3, r3, #29
 8001f74:	3301      	adds	r3, #1
 8001f76:	0019      	movs	r1, r3
 8001f78:	0020      	movs	r0, r4
 8001f7a:	f7fe f8cd 	bl	8000118 <__udivsi3>
 8001f7e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b003      	add	sp, #12
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <LL_USART_IsEnabled>:
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <LL_USART_IsEnabled+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_USART_IsEnabled+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <LL_USART_SetPrescaler>:
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <LL_USART_SetStopBitsLength>:
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <LL_USART_SetStopBitsLength+0x24>)
 8001fe8:	401a      	ands	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	605a      	str	r2, [r3, #4]
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	ffffcfff 	.word	0xffffcfff

08002000 <LL_USART_SetHWFlowCtrl>:
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <LL_USART_SetHWFlowCtrl+0x24>)
 8002010:	401a      	ands	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	fffffcff 	.word	0xfffffcff

08002028 <LL_USART_SetBaudRate>:
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0b      	cmp	r3, #11
 800203a:	d846      	bhi.n	80020ca <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d043      	beq.n	80020ca <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	429a      	cmp	r2, r3
 800204a:	d126      	bne.n	800209a <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	001a      	movs	r2, r3
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <LL_USART_SetBaudRate+0xac>)
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	58d3      	ldr	r3, [r2, r3]
 8002058:	0019      	movs	r1, r3
 800205a:	68b8      	ldr	r0, [r7, #8]
 800205c:	f7fe f85c 	bl	8000118 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	005a      	lsls	r2, r3, #1
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	18d3      	adds	r3, r2, r3
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe f853 	bl	8000118 <__udivsi3>
 8002072:	0003      	movs	r3, r0
 8002074:	b29b      	uxth	r3, r3
 8002076:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <LL_USART_SetBaudRate+0xb0>)
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	b29b      	uxth	r3, r3
 8002086:	001a      	movs	r2, r3
 8002088:	2307      	movs	r3, #7
 800208a:	4013      	ands	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	60da      	str	r2, [r3, #12]
}
 8002098:	e017      	b.n	80020ca <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	001a      	movs	r2, r3
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <LL_USART_SetBaudRate+0xac>)
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	58d3      	ldr	r3, [r2, r3]
 80020a6:	0019      	movs	r1, r3
 80020a8:	68b8      	ldr	r0, [r7, #8]
 80020aa:	f7fe f835 	bl	8000118 <__udivsi3>
 80020ae:	0003      	movs	r3, r0
 80020b0:	001a      	movs	r2, r3
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	18d3      	adds	r3, r2, r3
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7fe f82c 	bl	8000118 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	001a      	movs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	60da      	str	r2, [r3, #12]
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b006      	add	sp, #24
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	080044c0 	.word	0x080044c0
 80020d8:	0000fff0 	.word	0x0000fff0

080020dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b08b      	sub	sp, #44	; 0x2c
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020e6:	231f      	movs	r3, #31
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ff4b 	bl	8001f90 <LL_USART_IsEnabled>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d16a      	bne.n	80021d4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a38      	ldr	r2, [pc, #224]	; (80021e4 <LL_USART_Init+0x108>)
 8002104:	401a      	ands	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4319      	orrs	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	4319      	orrs	r1, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	430b      	orrs	r3, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff ff54 	bl	8001fd8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ff61 	bl	8002000 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <LL_USART_Init+0x10c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002146:	2003      	movs	r0, #3
 8002148:	f7ff fdfc 	bl	8001d44 <LL_RCC_GetUSARTClockFreq>
 800214c:	0003      	movs	r3, r0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e022      	b.n	8002198 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <LL_USART_Init+0x110>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d105      	bne.n	8002166 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800215a:	200c      	movs	r0, #12
 800215c:	f7ff fdf2 	bl	8001d44 <LL_RCC_GetUSARTClockFreq>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e018      	b.n	8002198 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <LL_USART_Init+0x114>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800216e:	240c      	movs	r4, #12
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff fdc8 	bl	8001d08 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002178:	193b      	adds	r3, r7, r4
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e00b      	b.n	8002198 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <LL_USART_Init+0x118>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d107      	bne.n	8002198 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002188:	240c      	movs	r4, #12
 800218a:	193b      	adds	r3, r7, r4
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fdbb 	bl	8001d08 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002192:	193b      	adds	r3, r7, r4
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d013      	beq.n	80021c6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00f      	beq.n	80021c6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80021a6:	231f      	movs	r3, #31
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	69dc      	ldr	r4, [r3, #28]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	0023      	movs	r3, r4
 80021c2:	f7ff ff31 	bl	8002028 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff feef 	bl	8001fb2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80021d4:	231f      	movs	r3, #31
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b009      	add	sp, #36	; 0x24
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	efff69f3 	.word	0xefff69f3
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40004800 	.word	0x40004800
 80021f4:	40004c00 	.word	0x40004c00

080021f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fd ff87 	bl	8000118 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	001a      	movs	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <LL_InitTick+0x30>)
 8002210:	3a01      	subs	r2, #1
 8002212:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <LL_InitTick+0x30>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <LL_InitTick+0x30>)
 800221c:	2205      	movs	r2, #5
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000e010 	.word	0xe000e010

0800222c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002234:	23fa      	movs	r3, #250	; 0xfa
 8002236:	009a      	lsls	r2, r3, #2
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff ffdb 	bl	80021f8 <LL_InitTick>
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b002      	add	sp, #8
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <LL_SetSystemCoreClock+0x18>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000000 	.word	0x20000000

08002268 <Adc_ConverterValue_Init>:
#define ADC_VOLTAGE(ADC_GetData)	((ADC_GetData * VREFANALOG_VOLTAGE) / ADC_RESOLUTION)

uint16_t u16VolageAdc;

void Adc_ConverterValue_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	u16VolageAdc = 0;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <Adc_ConverterValue_Init+0x10>)
 800226e:	2200      	movs	r2, #0
 8002270:	801a      	strh	r2, [r3, #0]
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000076c 	.word	0x2000076c

0800227c <AdcCalculateVOLTAGE>:

uint16_t AdcCalculateVOLTAGE(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	return u16VolageAdc = ADC_VOLTAGE(AdcSetConverter_Value());
 8002280:	f000 f8f2 	bl	8002468 <AdcSetConverter_Value>
 8002284:	0003      	movs	r3, r0
 8002286:	001a      	movs	r2, r3
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <AdcCalculateVOLTAGE+0x2c>)
 800228a:	4353      	muls	r3, r2
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <AdcCalculateVOLTAGE+0x30>)
 800228e:	0018      	movs	r0, r3
 8002290:	f7fd ff42 	bl	8000118 <__udivsi3>
 8002294:	0003      	movs	r3, r0
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <AdcCalculateVOLTAGE+0x34>)
 800229a:	801a      	strh	r2, [r3, #0]
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <AdcCalculateVOLTAGE+0x34>)
 800229e:	881b      	ldrh	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	00000ce4 	.word	0x00000ce4
 80022ac:	00000fff 	.word	0x00000fff
 80022b0:	2000076c 	.word	0x2000076c

080022b4 <AdcConverterValue_MainFunction>:


void AdcConverterValue_MainFunction(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	AdcCalculateVOLTAGE();
 80022b8:	f7ff ffe0 	bl	800227c <AdcCalculateVOLTAGE>
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <LL_ADC_Enable>:
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <LL_ADC_Enable+0x20>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	2201      	movs	r2, #1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	7fffffe8 	.word	0x7fffffe8

080022e8 <LL_ADC_StartCalibration>:
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <LL_ADC_StartCalibration+0x24>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	0612      	lsls	r2, r2, #24
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	7fffffe8 	.word	0x7fffffe8

08002310 <LL_ADC_IsCalibrationOnGoing>:
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	0fdb      	lsrs	r3, r3, #31
 800231e:	07da      	lsls	r2, r3, #31
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	429a      	cmp	r2, r3
 8002326:	d101      	bne.n	800232c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800232c:	2300      	movs	r3, #0
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <LL_ADC_REG_StartConversion>:
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <LL_ADC_REG_StartConversion+0x20>)
 8002346:	4013      	ands	r3, r2
 8002348:	2204      	movs	r2, #4
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}
 8002358:	7fffffe8 	.word	0x7fffffe8

0800235c <LL_ADC_REG_ReadConversionData12>:
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	b29b      	uxth	r3, r3
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b002      	add	sp, #8
 8002370:	bd80      	pop	{r7, pc}

08002372 <LL_ADC_IsActiveFlag_EOC>:
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2204      	movs	r2, #4
 8002380:	4013      	ands	r3, r2
 8002382:	2b04      	cmp	r3, #4
 8002384:	d101      	bne.n	800238a <LL_ADC_IsActiveFlag_EOC+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_IsActiveFlag_EOC+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <AdcDrv_Init>:
uint8_t u8Index = 0;
uint16_t u16AdcGetData = 0;


void AdcDrv_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1);
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <AdcDrv_Init+0x28>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff ffa4 	bl	80022e8 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)){}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <AdcDrv_Init+0x28>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff ffb3 	bl	8002310 <LL_ADC_IsCalibrationOnGoing>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d1f9      	bne.n	80023a2 <AdcDrv_Init+0xe>
	LL_ADC_Enable(ADC1);
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <AdcDrv_Init+0x28>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ff87 	bl	80022c4 <LL_ADC_Enable>
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40012400 	.word	0x40012400

080023c0 <AdcDrv_MainFunction>:

/*---------------------------------------------------------*/

void AdcDrv_MainFunction(void)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
	uint16_t lu16LocalVarInArray;
	uint8_t lu8LocalIndex;
	LL_ADC_REG_StartConversion(ADC1);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <AdcDrv_MainFunction+0x98>)
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ffb5 	bl	8002338 <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADC1)){}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <AdcDrv_MainFunction+0x98>)
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7ff ffcd 	bl	8002372 <LL_ADC_IsActiveFlag_EOC>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d0f9      	beq.n	80023d0 <AdcDrv_MainFunction+0x10>

	u16ArrayElementsAdc[u8Index] = LL_ADC_REG_ReadConversionData12(ADC1);
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <AdcDrv_MainFunction+0x9c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	001c      	movs	r4, r3
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <AdcDrv_MainFunction+0x98>)
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff ffb9 	bl	800235c <LL_ADC_REG_ReadConversionData12>
 80023ea:	0003      	movs	r3, r0
 80023ec:	0019      	movs	r1, r3
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <AdcDrv_MainFunction+0xa0>)
 80023f0:	0062      	lsls	r2, r4, #1
 80023f2:	52d1      	strh	r1, [r2, r3]
	u8Index++;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <AdcDrv_MainFunction+0x9c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <AdcDrv_MainFunction+0x9c>)
 80023fe:	701a      	strb	r2, [r3, #0]
	if(u8Index == ELEMENTS_OF_ARRAY)
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <AdcDrv_MainFunction+0x9c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b0a      	cmp	r3, #10
 8002406:	d102      	bne.n	800240e <AdcDrv_MainFunction+0x4e>
	{

		u8Index = 0;
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <AdcDrv_MainFunction+0x9c>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
	}

	for(lu8LocalIndex = 0; lu8LocalIndex < ELEMENTS_OF_ARRAY; lu8LocalIndex++)
 800240e:	1d7b      	adds	r3, r7, #5
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e00e      	b.n	8002434 <AdcDrv_MainFunction+0x74>
	{
		lu16LocalVarInArray += u16ArrayElementsAdc[lu8LocalIndex];
 8002416:	1d7b      	adds	r3, r7, #5
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <AdcDrv_MainFunction+0xa0>)
 800241c:	0052      	lsls	r2, r2, #1
 800241e:	5ad1      	ldrh	r1, [r2, r3]
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	1dba      	adds	r2, r7, #6
 8002424:	8812      	ldrh	r2, [r2, #0]
 8002426:	188a      	adds	r2, r1, r2
 8002428:	801a      	strh	r2, [r3, #0]
	for(lu8LocalIndex = 0; lu8LocalIndex < ELEMENTS_OF_ARRAY; lu8LocalIndex++)
 800242a:	1d7b      	adds	r3, r7, #5
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	1d7b      	adds	r3, r7, #5
 8002430:	3201      	adds	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	1d7b      	adds	r3, r7, #5
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d9ec      	bls.n	8002416 <AdcDrv_MainFunction+0x56>

	}
	u16AdcGetData = lu16LocalVarInArray / ELEMENTS_OF_ARRAY;
 800243c:	1dbb      	adds	r3, r7, #6
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	210a      	movs	r1, #10
 8002442:	0018      	movs	r0, r3
 8002444:	f7fd fe68 	bl	8000118 <__udivsi3>
 8002448:	0003      	movs	r3, r0
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <AdcDrv_MainFunction+0xa4>)
 800244e:	801a      	strh	r2, [r3, #0]
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b003      	add	sp, #12
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	40012400 	.word	0x40012400
 800245c:	20000784 	.word	0x20000784
 8002460:	20000770 	.word	0x20000770
 8002464:	20000786 	.word	0x20000786

08002468 <AdcSetConverter_Value>:

/*---------------------------------------------------------*/

uint16_t AdcSetConverter_Value(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	return u16AdcGetData;
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <AdcSetConverter_Value+0x10>)
 800246e:	881b      	ldrh	r3, [r3, #0]
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	20000786 	.word	0x20000786

0800247c <LL_GPIO_IsInputPinSet>:
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d101      	bne.n	8002498 <LL_GPIO_IsInputPinSet+0x1c>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <LL_GPIO_IsInputPinSet+0x1e>
 8002498:	2300      	movs	r3, #0
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <ButtonDrv_Init>:

ButtonConfig buttonConfig;


void ButtonDrv_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	buttonConfig.Port = USER_BTN_GPIO_Port;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <ButtonDrv_Init+0x24>)
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <ButtonDrv_Init+0x28>)
 80024ac:	601a      	str	r2, [r3, #0]
	buttonConfig.Pin = USER_BTN_Pin;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <ButtonDrv_Init+0x24>)
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0192      	lsls	r2, r2, #6
 80024b4:	605a      	str	r2, [r3, #4]
	buttonConfig.PrevState = RESET;
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <ButtonDrv_Init+0x24>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	811a      	strh	r2, [r3, #8]
	ru32_SysClickBtn = 0;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <ButtonDrv_Init+0x2c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000790 	.word	0x20000790
 80024cc:	50000800 	.word	0x50000800
 80024d0:	20000788 	.word	0x20000788

080024d4 <f_GetReturnValuePeriod>:

uint32_t f_GetReturnValuePeriod()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	return ru32_TickBtn;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <f_GetReturnValuePeriod+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	2000078c 	.word	0x2000078c

080024e8 <SetPeriod>:

void SetPeriod(uint16_t u16StateBtn)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dbb      	adds	r3, r7, #6
 80024f2:	801a      	strh	r2, [r3, #0]
	if (u16StateBtn == SET)
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10f      	bne.n	800251c <SetPeriod+0x34>
	{
		if(buttonConfig.PrevState != u16StateBtn)
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <SetPeriod+0x58>)
 80024fe:	891b      	ldrh	r3, [r3, #8]
 8002500:	1dba      	adds	r2, r7, #6
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d012      	beq.n	800252e <SetPeriod+0x46>
		{
			ru32_TickBtn = ru32_SysClickBtn;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <SetPeriod+0x5c>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <SetPeriod+0x60>)
 800250e:	601a      	str	r2, [r3, #0]
			f_GetReturnValuePeriod();
 8002510:	f7ff ffe0 	bl	80024d4 <f_GetReturnValuePeriod>
			ru32_SysClickBtn = 0u;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <SetPeriod+0x5c>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e008      	b.n	800252e <SetPeriod+0x46>
		}
	}
	else if (u16StateBtn == RESET)
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <SetPeriod+0x46>
	{
		ru32_SysClickBtn++;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <SetPeriod+0x5c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SetPeriod+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
	}
	buttonConfig.PrevState = u16StateBtn;
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SetPeriod+0x58>)
 8002530:	1dba      	adds	r2, r7, #6
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	811a      	strh	r2, [r3, #8]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	20000790 	.word	0x20000790
 8002544:	20000788 	.word	0x20000788
 8002548:	2000078c 	.word	0x2000078c

0800254c <ButtonDrv_MainFunction>:



void ButtonDrv_MainFunction()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	ru16_StateBtn = LL_GPIO_IsInputPinSet(buttonConfig.Port, buttonConfig.Pin);
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <ButtonDrv_MainFunction+0x2c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <ButtonDrv_MainFunction+0x2c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0019      	movs	r1, r3
 800255a:	0010      	movs	r0, r2
 800255c:	f7ff ff8e 	bl	800247c <LL_GPIO_IsInputPinSet>
 8002560:	0003      	movs	r3, r0
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <ButtonDrv_MainFunction+0x30>)
 8002566:	801a      	strh	r2, [r3, #0]

	SetPeriod(ru16_StateBtn);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <ButtonDrv_MainFunction+0x30>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f7ff ffbb 	bl	80024e8 <SetPeriod>
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000790 	.word	0x20000790
 800257c:	20000004 	.word	0x20000004

08002580 <Thermistor_InitFunction>:
};

uint16_t numRows;

void Thermistor_InitFunction(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	u32ResistanceOfSensor = 0;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <Thermistor_InitFunction+0x18>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
	u16VoltageOfSensor = 0;
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <Thermistor_InitFunction+0x1c>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	2000079c 	.word	0x2000079c
 800259c:	200007a0 	.word	0x200007a0

080025a0 <Thermistor_CalculateResistance>:

void Thermistor_CalculateResistance(void)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	u16VoltageOfSensor = AdcCalculateVOLTAGE();
 80025a4:	f7ff fe6a 	bl	800227c <AdcCalculateVOLTAGE>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <Thermistor_CalculateResistance+0x68>)
 80025ae:	801a      	strh	r2, [r3, #0]
	u32ResistanceOfSensor = ((u16VoltageOfSensor* RESOLUTION_SCALE) / (((uint32_t)(VREFANALOG_VOLTAGE-u16VoltageOfSensor) * RESOLUTION_SCALE) / RESISTENCE_VALUE));
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <Thermistor_CalculateResistance+0x68>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	0019      	movs	r1, r3
 80025b6:	000a      	movs	r2, r1
 80025b8:	0152      	lsls	r2, r2, #5
 80025ba:	1a52      	subs	r2, r2, r1
 80025bc:	0193      	lsls	r3, r2, #6
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	185b      	adds	r3, r3, r1
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	001c      	movs	r4, r3
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <Thermistor_CalculateResistance+0x68>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	0019      	movs	r1, r3
 80025ce:	000a      	movs	r2, r1
 80025d0:	0152      	lsls	r2, r2, #5
 80025d2:	1a52      	subs	r2, r2, r1
 80025d4:	0193      	lsls	r3, r2, #6
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	185b      	adds	r3, r3, r1
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	425b      	negs	r3, r3
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <Thermistor_CalculateResistance+0x6c>)
 80025e2:	4694      	mov	ip, r2
 80025e4:	4463      	add	r3, ip
 80025e6:	490a      	ldr	r1, [pc, #40]	; (8002610 <Thermistor_CalculateResistance+0x70>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fd fd95 	bl	8000118 <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	0019      	movs	r1, r3
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7fd fd90 	bl	8000118 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <Thermistor_CalculateResistance+0x74>)
 80025fe:	601a      	str	r2, [r3, #0]

}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bdb0      	pop	{r4, r5, r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	200007a0 	.word	0x200007a0
 800260c:	c4b20100 	.word	0xc4b20100
 8002610:	00002710 	.word	0x00002710
 8002614:	2000079c 	.word	0x2000079c

08002618 <Thermistor_CalculateGradeCelsius>:

void Thermistor_CalculateGradeCelsius(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    for (u16IndexForARRAY = 0; u16IndexForARRAY < ROWS; u16IndexForARRAY++) {
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	e02c      	b.n	800267e <Thermistor_CalculateGradeCelsius+0x66>

        if((u32ResistanceOfSensor < u16TabelsOfGrades[u16IndexForARRAY + 1][1]) && (u32ResistanceOfSensor < u16TabelsOfGrades[u16IndexForARRAY - 1][1]))
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <Thermistor_CalculateGradeCelsius+0x7c>)
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	18d3      	adds	r3, r2, r3
 8002630:	3304      	adds	r3, #4
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <Thermistor_CalculateGradeCelsius+0x80>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d91a      	bls.n	8002672 <Thermistor_CalculateGradeCelsius+0x5a>
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <Thermistor_CalculateGradeCelsius+0x7c>)
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	18d3      	adds	r3, r2, r3
 8002648:	3304      	adds	r3, #4
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <Thermistor_CalculateGradeCelsius+0x80>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d90e      	bls.n	8002672 <Thermistor_CalculateGradeCelsius+0x5a>
		{
            u16TemperatureOnTheSensor = (u16TabelsOfGrades[u16IndexForARRAY][0]) / 1000;
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	001a      	movs	r2, r3
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <Thermistor_CalculateGradeCelsius+0x7c>)
 800265c:	00d2      	lsls	r2, r2, #3
 800265e:	58d3      	ldr	r3, [r2, r3]
 8002660:	22fa      	movs	r2, #250	; 0xfa
 8002662:	0091      	lsls	r1, r2, #2
 8002664:	0018      	movs	r0, r3
 8002666:	f7fd fd57 	bl	8000118 <__udivsi3>
 800266a:	0003      	movs	r3, r0
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <Thermistor_CalculateGradeCelsius+0x84>)
 8002670:	801a      	strh	r2, [r3, #0]
    for (u16IndexForARRAY = 0; u16IndexForARRAY < ROWS; u16IndexForARRAY++) {
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <Thermistor_CalculateGradeCelsius+0x78>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	2bdb      	cmp	r3, #219	; 0xdb
 8002684:	d9ce      	bls.n	8002624 <Thermistor_CalculateGradeCelsius+0xc>
		}
    }
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	200007a2 	.word	0x200007a2
 8002694:	20000008 	.word	0x20000008
 8002698:	2000079c 	.word	0x2000079c
 800269c:	200007a4 	.word	0x200007a4

080026a0 <Thermistor_MainFunction>:

void Thermistor_MainFunction(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	Thermistor_CalculateResistance();
 80026a4:	f7ff ff7c 	bl	80025a0 <Thermistor_CalculateResistance>
	Thermistor_CalculateGradeCelsius();
 80026a8:	f7ff ffb6 	bl	8002618 <Thermistor_CalculateGradeCelsius>
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <f_isFullFIFOBuffer>:
#include "CircularBuffer.h"



bool f_isFullFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	if (CircularFIFOBuffer->u16_BufferSize == (BUFFER_SIZE - 1))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b31      	cmp	r3, #49	; 0x31
 80026c0:	d101      	bne.n	80026c6 <f_isFullFIFOBuffer+0x14>
	{
		return true ;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <f_isFullFIFOBuffer+0x16>
	}
	else
	{
		return false;
 80026c6:	2300      	movs	r3, #0
	}
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <f_isEmptyFIFOBuffer>:

bool f_isEmptyFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if (CircularFIFOBuffer->u16_BufferSize == 0)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <f_isEmptyFIFOBuffer+0x14>

	{
		return true ;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <f_isEmptyFIFOBuffer+0x16>
	}
	else
	{
		return false;
 80026e4:	2300      	movs	r3, #0
	}
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <f_addElemFIFOBuffer>:


bool f_addElemFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer, uint8_t data)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	000a      	movs	r2, r1
 80026f8:	1cfb      	adds	r3, r7, #3
 80026fa:	701a      	strb	r2, [r3, #0]
	if (f_isFullFIFOBuffer(CircularFIFOBuffer) != true)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff ffd7 	bl	80026b2 <f_isFullFIFOBuffer>
 8002704:	0003      	movs	r3, r0
 8002706:	001a      	movs	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	4053      	eors	r3, r2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01d      	beq.n	800274e <f_addElemFIFOBuffer+0x60>
	{
		CircularFIFOBuffer->Buffer[CircularFIFOBuffer->u16Head] = data;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	889b      	ldrh	r3, [r3, #4]
 8002716:	001a      	movs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	189b      	adds	r3, r3, r2
 800271c:	1cfa      	adds	r2, r7, #3
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	719a      	strb	r2, [r3, #6]

		if (CircularFIFOBuffer->u16Head < (BUFFER_SIZE - 1) )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	889b      	ldrh	r3, [r3, #4]
 8002726:	2b30      	cmp	r3, #48	; 0x30
 8002728:	d806      	bhi.n	8002738 <f_addElemFIFOBuffer+0x4a>
		{
			CircularFIFOBuffer->u16Head++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	889b      	ldrh	r3, [r3, #4]
 800272e:	3301      	adds	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	809a      	strh	r2, [r3, #4]
 8002736:	e002      	b.n	800273e <f_addElemFIFOBuffer+0x50>

		}
		else
		{
			CircularFIFOBuffer->u16Head = 0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	809a      	strh	r2, [r3, #4]
		}
		CircularFIFOBuffer->u16_BufferSize++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	801a      	strh	r2, [r3, #0]
		return true;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <f_addElemFIFOBuffer+0x62>
	}
	else
	{
		return false;
 800274e:	2300      	movs	r3, #0
	}
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <f_getElemFIFOBuffer>:

bool f_getElemFIFOBuffer(CircularFIFOBuffer* CircularFIFOBuffer, uint8_t* theElement)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	if (f_isEmptyFIFOBuffer(CircularFIFOBuffer) != true)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ffb3 	bl	80026d0 <f_isEmptyFIFOBuffer>
 800276a:	0003      	movs	r3, r0
 800276c:	001a      	movs	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	4053      	eors	r3, r2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01d      	beq.n	80027b4 <f_getElemFIFOBuffer+0x5c>
	{
		*theElement = CircularFIFOBuffer->Buffer[CircularFIFOBuffer->u16Tail];
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	885b      	ldrh	r3, [r3, #2]
 800277c:	001a      	movs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	189b      	adds	r3, r3, r2
 8002782:	799a      	ldrb	r2, [r3, #6]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	701a      	strb	r2, [r3, #0]
		if (CircularFIFOBuffer->u16Tail < (BUFFER_SIZE-1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d806      	bhi.n	800279e <f_getElemFIFOBuffer+0x46>
		{
			CircularFIFOBuffer->u16Tail++;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	3301      	adds	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	805a      	strh	r2, [r3, #2]
 800279c:	e002      	b.n	80027a4 <f_getElemFIFOBuffer+0x4c>
		}
		else
		{
			CircularFIFOBuffer->u16Tail = 0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	805a      	strh	r2, [r3, #2]
		}
		CircularFIFOBuffer->u16_BufferSize--;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		return false;
	}
	return true;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <f_getElemFIFOBuffer+0x5e>
		return false;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <__NVIC_SetPriority>:
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b7f      	cmp	r3, #127	; 0x7f
 80027d4:	d828      	bhi.n	8002828 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <__NVIC_SetPriority+0xd4>)
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	33c0      	adds	r3, #192	; 0xc0
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	589b      	ldr	r3, [r3, r2]
 80027e6:	1dfa      	adds	r2, r7, #7
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	0011      	movs	r1, r2
 80027ec:	2203      	movs	r2, #3
 80027ee:	400a      	ands	r2, r1
 80027f0:	00d2      	lsls	r2, r2, #3
 80027f2:	21ff      	movs	r1, #255	; 0xff
 80027f4:	4091      	lsls	r1, r2
 80027f6:	000a      	movs	r2, r1
 80027f8:	43d2      	mvns	r2, r2
 80027fa:	401a      	ands	r2, r3
 80027fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	401a      	ands	r2, r3
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	2303      	movs	r3, #3
 800280e:	4003      	ands	r3, r0
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002814:	481f      	ldr	r0, [pc, #124]	; (8002894 <__NVIC_SetPriority+0xd4>)
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	430a      	orrs	r2, r1
 8002820:	33c0      	adds	r3, #192	; 0xc0
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	501a      	str	r2, [r3, r0]
}
 8002826:	e031      	b.n	800288c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <__NVIC_SetPriority+0xd8>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	0019      	movs	r1, r3
 8002830:	230f      	movs	r3, #15
 8002832:	400b      	ands	r3, r1
 8002834:	3b08      	subs	r3, #8
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3306      	adds	r3, #6
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	18d3      	adds	r3, r2, r3
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1dfa      	adds	r2, r7, #7
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	0011      	movs	r1, r2
 8002848:	2203      	movs	r2, #3
 800284a:	400a      	ands	r2, r1
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	21ff      	movs	r1, #255	; 0xff
 8002850:	4091      	lsls	r1, r2
 8002852:	000a      	movs	r2, r1
 8002854:	43d2      	mvns	r2, r2
 8002856:	401a      	ands	r2, r3
 8002858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	22ff      	movs	r2, #255	; 0xff
 8002860:	401a      	ands	r2, r3
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	2303      	movs	r3, #3
 800286a:	4003      	ands	r3, r0
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002870:	4809      	ldr	r0, [pc, #36]	; (8002898 <__NVIC_SetPriority+0xd8>)
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	001c      	movs	r4, r3
 8002878:	230f      	movs	r3, #15
 800287a:	4023      	ands	r3, r4
 800287c:	3b08      	subs	r3, #8
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	430a      	orrs	r2, r1
 8002882:	3306      	adds	r3, #6
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	18c3      	adds	r3, r0, r3
 8002888:	3304      	adds	r3, #4
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b003      	add	sp, #12
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	045b      	lsls	r3, r3, #17
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d301      	bcc.n	80028b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b0:	2301      	movs	r3, #1
 80028b2:	e010      	b.n	80028d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <SysTick_Config+0x44>)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	3a01      	subs	r2, #1
 80028ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028bc:	2301      	movs	r3, #1
 80028be:	425b      	negs	r3, r3
 80028c0:	2103      	movs	r1, #3
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff ff7c 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x44>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x44>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <EcuM_SysTickCallBack>:
void EcuM_Init(void);
void EcuM_MainFunction(void);


void EcuM_SysTickCallBack(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	ru32_SysTick++;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <EcuM_SysTickCallBack+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <EcuM_SysTickCallBack+0x14>)
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200007a8 	.word	0x200007a8

080028fc <EcuM_Init>:

void EcuM_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff f9ff 	bl	8001d08 <LL_RCC_GetSystemClocksFreq>
	SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000);
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	22fa      	movs	r2, #250	; 0xfa
 8002910:	0091      	lsls	r1, r2, #2
 8002912:	0018      	movs	r0, r3
 8002914:	f7fd fc00 	bl	8000118 <__udivsi3>
 8002918:	0003      	movs	r3, r0
 800291a:	0018      	movs	r0, r3
 800291c:	f7ff ffbe 	bl	800289c <SysTick_Config>
	f_Ecum_InitBaseTask();
 8002920:	f000 f83c 	bl	800299c <f_Ecum_InitBaseTask>
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}

0800292c <EcuM_MainFunction>:


void EcuM_MainFunction(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	EcuM_Init();
 8002930:	f7ff ffe4 	bl	80028fc <EcuM_Init>

	while(1)
	{

		if (ru32_OldSysTick ^ ru32_SysTick)
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <EcuM_MainFunction+0x68>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <EcuM_MainFunction+0x6c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0f9      	beq.n	8002934 <EcuM_MainFunction+0x8>
		{
			ru32_OldSysTick = ru32_SysTick;
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <EcuM_MainFunction+0x6c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <EcuM_MainFunction+0x68>)
 8002946:	601a      	str	r2, [r3, #0]

			f_Ecum_BaseRecurenceTask();
 8002948:	f000 f86e 	bl	8002a28 <f_Ecum_BaseRecurenceTask>
			if(ru32_OldSysTick & SCHM_BASE_DIV_2)
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <EcuM_MainFunction+0x68>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d001      	beq.n	800295a <EcuM_MainFunction+0x2e>
			{
				f_Ecum_BaseRecurenceTaskDiv2();
 8002956:	f000 f870 	bl	8002a3a <f_Ecum_BaseRecurenceTaskDiv2>
			}
			if(ru32_OldSysTick & SCHM_BASE_DIV_4)
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <EcuM_MainFunction+0x68>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d001      	beq.n	8002968 <EcuM_MainFunction+0x3c>
			{
				f_Ecum_BaseRecurenceTaskDiv4();
 8002964:	f000 f870 	bl	8002a48 <f_Ecum_BaseRecurenceTaskDiv4>
			}
			if(ru32_OldSysTick & SCHM_BASE_DIV_8)
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <EcuM_MainFunction+0x68>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2204      	movs	r2, #4
 800296e:	4013      	ands	r3, r2
 8002970:	d001      	beq.n	8002976 <EcuM_MainFunction+0x4a>
			{
				f_Ecum_BaseRecurenceTaskDiv8();
 8002972:	f000 f885 	bl	8002a80 <f_Ecum_BaseRecurenceTaskDiv8>

			}
			if(ru32_OldSysTick & SCHM_BASE_DIV_16)
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <EcuM_MainFunction+0x68>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2208      	movs	r2, #8
 800297c:	4013      	ands	r3, r2
 800297e:	d001      	beq.n	8002984 <EcuM_MainFunction+0x58>
			{
				f_Ecum_BaseRecurenceTaskDiv16();
 8002980:	f000 f883 	bl	8002a8a <f_Ecum_BaseRecurenceTaskDiv16>

			}
			if(ru32_OldSysTick & SCHM_BASE_DIV_32)
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <EcuM_MainFunction+0x68>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	d0d2      	beq.n	8002934 <EcuM_MainFunction+0x8>
			{
				f_Ecum_BaseRecurenceTaskDiv32();
 800298e:	f000 f883 	bl	8002a98 <f_Ecum_BaseRecurenceTaskDiv32>
		if (ru32_OldSysTick ^ ru32_SysTick)
 8002992:	e7cf      	b.n	8002934 <EcuM_MainFunction+0x8>
 8002994:	200007ac 	.word	0x200007ac
 8002998:	200007a8 	.word	0x200007a8

0800299c <f_Ecum_InitBaseTask>:
extern TS_MotorConfig MotorConfigPin2;
extern TS_MotorConfig MotorConfigPin3;
extern TS_MotorConfig MotorConfigPin4;

void f_Ecum_InitBaseTask(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	ButtonDrv_Init();
 80029a0:	f7ff fd80 	bl	80024a4 <ButtonDrv_Init>
	LedDrv_Init(&ledConfig1, LED_RED1_GPIO_Port, LED_RED1_Pin);
 80029a4:	23a0      	movs	r3, #160	; 0xa0
 80029a6:	05d9      	lsls	r1, r3, #23
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <f_Ecum_InitBaseTask+0x7c>)
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 f88f 	bl	8002ad0 <LedDrv_Init>
	LedDrv_Init(&ledConfig2, LED_RED2_GPIO_Port, LED_RED2_Pin);
 80029b2:	23a0      	movs	r3, #160	; 0xa0
 80029b4:	05d9      	lsls	r1, r3, #23
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <f_Ecum_InitBaseTask+0x80>)
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f888 	bl	8002ad0 <LedDrv_Init>
	f_MotorSteperDrv_Init(&MotorConfigPin1, MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	005a      	lsls	r2, r3, #1
 80029c4:	23a0      	movs	r3, #160	; 0xa0
 80029c6:	05d9      	lsls	r1, r3, #23
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <f_Ecum_InitBaseTask+0x84>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f8e0 	bl	8002b90 <f_MotorSteperDrv_Init>
	f_MotorSteperDrv_Init(&MotorConfigPin1, MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 80029d0:	4914      	ldr	r1, [pc, #80]	; (8002a24 <f_Ecum_InitBaseTask+0x88>)
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <f_Ecum_InitBaseTask+0x84>)
 80029d4:	2210      	movs	r2, #16
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f8da 	bl	8002b90 <f_MotorSteperDrv_Init>
	f_MotorSteperDrv_Init(&MotorConfigPin1, MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 80029dc:	4911      	ldr	r1, [pc, #68]	; (8002a24 <f_Ecum_InitBaseTask+0x88>)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <f_Ecum_InitBaseTask+0x84>)
 80029e0:	2220      	movs	r2, #32
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f8d4 	bl	8002b90 <f_MotorSteperDrv_Init>
	f_MotorSteperDrv_Init(&MotorConfigPin1, MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <f_Ecum_InitBaseTask+0x88>)
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <f_Ecum_InitBaseTask+0x84>)
 80029ec:	2208      	movs	r2, #8
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f8ce 	bl	8002b90 <f_MotorSteperDrv_Init>
	f_USARTCommProt_Init();
 80029f4:	f000 feea 	bl	80037cc <f_USARTCommProt_Init>
	USARTDrv_Init();
 80029f8:	f000 fd62 	bl	80034c0 <USARTDrv_Init>
	TheApp_Init();
 80029fc:	f000 fb0a 	bl	8003014 <TheApp_Init>
	AdcDrv_Init();
 8002a00:	f7ff fcc8 	bl	8002394 <AdcDrv_Init>
	Adc_ConverterValue_Init();
 8002a04:	f7ff fc30 	bl	8002268 <Adc_ConverterValue_Init>
	Thermistor_InitFunction();
 8002a08:	f7ff fdba 	bl	8002580 <Thermistor_InitFunction>
	Motor_ConvDegreeTeStep_Init();
 8002a0c:	f000 fabe 	bl	8002f8c <Motor_ConvDegreeTeStep_Init>
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	200007b0 	.word	0x200007b0
 8002a1c:	200007bc 	.word	0x200007bc
 8002a20:	200007d4 	.word	0x200007d4
 8002a24:	50000400 	.word	0x50000400

08002a28 <f_Ecum_BaseRecurenceTask>:

void f_Ecum_BaseRecurenceTask(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	AdcDrv_MainFunction();
 8002a2c:	f7ff fcc8 	bl	80023c0 <AdcDrv_MainFunction>
	USARTDrv_MainFunction();
 8002a30:	f000 fd66 	bl	8003500 <USARTDrv_MainFunction>

}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <f_Ecum_BaseRecurenceTaskDiv2>:
void f_Ecum_BaseRecurenceTaskDiv2(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
	TheAPP_MainFunction();
 8002a3e:	f000 faf7 	bl	8003030 <TheAPP_MainFunction>

}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <f_Ecum_BaseRecurenceTaskDiv4>:
void f_Ecum_BaseRecurenceTaskDiv4(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	ButtonDrv_MainFunction();
 8002a4c:	f7ff fd7e 	bl	800254c <ButtonDrv_MainFunction>
	LedDrv_MainFunction(&ledConfig1);
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <f_Ecum_BaseRecurenceTaskDiv4+0x30>)
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f867 	bl	8002b26 <LedDrv_MainFunction>
	LedDrv_MainFunction(&ledConfig2);
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <f_Ecum_BaseRecurenceTaskDiv4+0x34>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f863 	bl	8002b26 <LedDrv_MainFunction>
	AdcConverterValue_MainFunction();
 8002a60:	f7ff fc28 	bl	80022b4 <AdcConverterValue_MainFunction>
	Thermistor_MainFunction();
 8002a64:	f7ff fe1c 	bl	80026a0 <Thermistor_MainFunction>
	f_MotorSteperDrv_MainFunction();
 8002a68:	f000 fa4a 	bl	8002f00 <f_MotorSteperDrv_MainFunction>
	Motor_ConvDegreeTeStep_MainFunction();
 8002a6c:	f000 fac4 	bl	8002ff8 <Motor_ConvDegreeTeStep_MainFunction>

}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	200007b0 	.word	0x200007b0
 8002a7c:	200007bc 	.word	0x200007bc

08002a80 <f_Ecum_BaseRecurenceTaskDiv8>:
void f_Ecum_BaseRecurenceTaskDiv8(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <f_Ecum_BaseRecurenceTaskDiv16>:
void f_Ecum_BaseRecurenceTaskDiv16(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
	f_USARTCommProt_Main();
 8002a8e:	f000 fea7 	bl	80037e0 <f_USARTCommProt_Main>

}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <f_Ecum_BaseRecurenceTaskDiv32>:
void f_Ecum_BaseRecurenceTaskDiv32(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LedDrv_Init>:
TS_LedConfig ledConfig2;
TS_LedConfig ledConfig3;
TS_LedConfig ledConfig4;

void LedDrv_Init(TS_LedConfig* ledConfig, GPIO_TypeDef* Port, uint16_t Pin)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	801a      	strh	r2, [r3, #0]
	ledConfig->LedPort = Port;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	601a      	str	r2, [r3, #0]
	ledConfig->u32LedPin = Pin;
 8002ae4:	1dbb      	adds	r3, r7, #6
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
	ledConfig->u16LedPeriod = 0;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	811a      	strh	r2, [r3, #8]
	ledConfig->u16LedTimer = 0;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	815a      	strh	r2, [r3, #10]

	Port ->BRR = Pin;
 8002af8:	1dbb      	adds	r3, r7, #6
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <f_SetValuePeriod>:



void f_SetValuePeriod(TS_LedConfig* ledConfig, uint16_t u16BlinkLed)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cbb      	adds	r3, r7, #2
 8002b14:	801a      	strh	r2, [r3, #0]
	ledConfig->u16LedPeriod = u16BlinkLed;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	1cba      	adds	r2, r7, #2
 8002b1a:	8812      	ldrh	r2, [r2, #0]
 8002b1c:	811a      	strh	r2, [r3, #8]
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <LedDrv_MainFunction>:

void LedDrv_MainFunction(TS_LedConfig* ledConfig)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 	if(ledConfig->u16LedPeriod <= ledConfig->u16LedTimer++)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	891a      	ldrh	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	895b      	ldrh	r3, [r3, #10]
 8002b36:	1c59      	adds	r1, r3, #1
 8002b38:	b288      	uxth	r0, r1
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	8148      	strh	r0, [r1, #10]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d80a      	bhi.n	8002b58 <LedDrv_MainFunction+0x32>
	{
		LL_GPIO_TogglePin(ledConfig->LedPort, ledConfig->u32LedPin);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f7ff ffa8 	bl	8002aa2 <LL_GPIO_TogglePin>
		ledConfig->u16LedTimer = 0;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	815a      	strh	r2, [r3, #10]
	}
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <LL_GPIO_SetOutputPin>:
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	619a      	str	r2, [r3, #24]
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <LL_GPIO_ResetOutputPin>:
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <f_MotorSteperDrv_Init>:
TS_MotorConfig MotorConfigPin3;
TS_MotorConfig MotorConfigPin4;


void f_MotorSteperDrv_Init(TS_MotorConfig* MotorConfig, GPIO_TypeDef* PORT, uint16_t u16PIN)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	1dbb      	adds	r3, r7, #6
 8002b9c:	801a      	strh	r2, [r3, #0]
	u16StepNumber = 0;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <f_MotorSteperDrv_Init+0x50>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]
	u16TimerTick = 0;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <f_MotorSteperDrv_Init+0x54>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	801a      	strh	r2, [r3, #0]
    u32ActualStep = 0;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <f_MotorSteperDrv_Init+0x58>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    u32RequestedStep = 0;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <f_MotorSteperDrv_Init+0x5c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

	MotorConfig->PORT = PORT;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	601a      	str	r2, [r3, #0]
	MotorConfig->u16PIN = u16PIN;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1dba      	adds	r2, r7, #6
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	809a      	strh	r2, [r3, #4]
	MotorConfig->u8ROTATE = ROTATE_REPAUS;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	719a      	strb	r2, [r3, #6]
	MotorConfig->u8PERIOD = 0;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	71da      	strb	r2, [r3, #7]

	PORT ->BRR = u16PIN;
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b004      	add	sp, #16
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200007c8 	.word	0x200007c8
 8002be4:	200007ca 	.word	0x200007ca
 8002be8:	200007cc 	.word	0x200007cc
 8002bec:	200007d0 	.word	0x200007d0

08002bf0 <f_MotorSteperDrv_StepSetting>:

void f_MotorSteperDrv_StepSetting(uint8_t u8DirectionRotate)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
	if(u8DirectionRotate == ROTATE_LEFT)
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d000      	beq.n	8002c06 <f_MotorSteperDrv_StepSetting+0x16>
 8002c04:	e06b      	b.n	8002cde <f_MotorSteperDrv_StepSetting+0xee>
	{
		switch (u16StepNumber) {
 8002c06:	4bb1      	ldr	r3, [pc, #708]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d04f      	beq.n	8002cae <f_MotorSteperDrv_StepSetting+0xbe>
 8002c0e:	dd00      	ble.n	8002c12 <f_MotorSteperDrv_StepSetting+0x22>
 8002c10:	e14c      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d033      	beq.n	8002c7e <f_MotorSteperDrv_StepSetting+0x8e>
 8002c16:	dd00      	ble.n	8002c1a <f_MotorSteperDrv_StepSetting+0x2a>
 8002c18:	e148      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <f_MotorSteperDrv_StepSetting+0x34>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d015      	beq.n	8002c4e <f_MotorSteperDrv_StepSetting+0x5e>
 8002c22:	e143      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 0:

				MotorConfigPin1.PORT ->BSRR = MotorConfigPin1.u16PIN;
 8002c24:	4baa      	ldr	r3, [pc, #680]	; (8002ed0 <f_MotorSteperDrv_StepSetting+0x2e0>)
 8002c26:	889a      	ldrh	r2, [r3, #4]
 8002c28:	4ba9      	ldr	r3, [pc, #676]	; (8002ed0 <f_MotorSteperDrv_StepSetting+0x2e0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	619a      	str	r2, [r3, #24]
				MotorConfigPin2.PORT ->BRR = MotorConfigPin2.u16PIN;
 8002c2e:	4ba9      	ldr	r3, [pc, #676]	; (8002ed4 <f_MotorSteperDrv_StepSetting+0x2e4>)
 8002c30:	889a      	ldrh	r2, [r3, #4]
 8002c32:	4ba8      	ldr	r3, [pc, #672]	; (8002ed4 <f_MotorSteperDrv_StepSetting+0x2e4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
				MotorConfigPin3.PORT ->BRR = MotorConfigPin3.u16PIN;
 8002c38:	4ba7      	ldr	r3, [pc, #668]	; (8002ed8 <f_MotorSteperDrv_StepSetting+0x2e8>)
 8002c3a:	889a      	ldrh	r2, [r3, #4]
 8002c3c:	4ba6      	ldr	r3, [pc, #664]	; (8002ed8 <f_MotorSteperDrv_StepSetting+0x2e8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
				MotorConfigPin4.PORT ->BRR = MotorConfigPin4.u16PIN;
 8002c42:	4ba6      	ldr	r3, [pc, #664]	; (8002edc <f_MotorSteperDrv_StepSetting+0x2ec>)
 8002c44:	889a      	ldrh	r2, [r3, #4]
 8002c46:	4ba5      	ldr	r3, [pc, #660]	; (8002edc <f_MotorSteperDrv_StepSetting+0x2ec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28

//				LL_GPIO_SetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
//				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
//				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
//				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
				break;
 8002c4c:	e12e      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 1:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	005a      	lsls	r2, r3, #1
 8002c52:	23a0      	movs	r3, #160	; 0xa0
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff ff8d 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002c5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002c60:	2110      	movs	r1, #16
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff ff7c 	bl	8002b60 <LL_GPIO_SetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002c68:	4b9d      	ldr	r3, [pc, #628]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff ff83 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002c72:	4b9b      	ldr	r3, [pc, #620]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002c74:	2108      	movs	r1, #8
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff ff7e 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002c7c:	e116      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 2:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	23a0      	movs	r3, #160	; 0xa0
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ff75 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002c8e:	4b94      	ldr	r3, [pc, #592]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002c90:	2110      	movs	r1, #16
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff70 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002c98:	4b91      	ldr	r3, [pc, #580]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ff5f 	bl	8002b60 <LL_GPIO_SetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002ca2:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002ca4:	2108      	movs	r1, #8
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff ff66 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002cac:	e0fe      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 3:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	005a      	lsls	r2, r3, #1
 8002cb2:	23a0      	movs	r3, #160	; 0xa0
 8002cb4:	05db      	lsls	r3, r3, #23
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff ff58 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002cc8:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002cca:	2120      	movs	r1, #32
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff ff53 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002cd2:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff ff42 	bl	8002b60 <LL_GPIO_SetOutputPin>
				break;
 8002cdc:	e0e6      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
		}
	}
	else if(u8DirectionRotate == ROTATE_RIGHT)
 8002cde:	1dfb      	adds	r3, r7, #7
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d000      	beq.n	8002ce8 <f_MotorSteperDrv_StepSetting+0xf8>
 8002ce6:	e06e      	b.n	8002dc6 <f_MotorSteperDrv_StepSetting+0x1d6>
	{
		switch (u16StepNumber) {
 8002ce8:	4b78      	ldr	r3, [pc, #480]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d052      	beq.n	8002d96 <f_MotorSteperDrv_StepSetting+0x1a6>
 8002cf0:	dd00      	ble.n	8002cf4 <f_MotorSteperDrv_StepSetting+0x104>
 8002cf2:	e0db      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d036      	beq.n	8002d66 <f_MotorSteperDrv_StepSetting+0x176>
 8002cf8:	dd00      	ble.n	8002cfc <f_MotorSteperDrv_StepSetting+0x10c>
 8002cfa:	e0d7      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <f_MotorSteperDrv_StepSetting+0x116>
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d018      	beq.n	8002d36 <f_MotorSteperDrv_StepSetting+0x146>
 8002d04:	e0d2      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 0:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	005a      	lsls	r2, r3, #1
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff ff31 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002d16:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d18:	2110      	movs	r1, #16
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7ff ff2c 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d22:	2120      	movs	r1, #32
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff ff27 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff ff16 	bl	8002b60 <LL_GPIO_SetOutputPin>
				break;
 8002d34:	e0ba      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 1:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	005a      	lsls	r2, r3, #1
 8002d3a:	23a0      	movs	r3, #160	; 0xa0
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	0011      	movs	r1, r2
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff ff19 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002d46:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d48:	2110      	movs	r1, #16
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7ff ff14 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002d50:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d52:	2120      	movs	r1, #32
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff ff03 	bl	8002b60 <LL_GPIO_SetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d5c:	2108      	movs	r1, #8
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff ff0a 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002d64:	e0a2      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 2:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	005a      	lsls	r2, r3, #1
 8002d6a:	23a0      	movs	r3, #160	; 0xa0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	0011      	movs	r1, r2
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff ff01 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_SetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d78:	2110      	movs	r1, #16
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff fef0 	bl	8002b60 <LL_GPIO_SetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002d80:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d82:	2120      	movs	r1, #32
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff fef7 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002d8a:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff fef2 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002d94:	e08a      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 3:
				LL_GPIO_SetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	005a      	lsls	r2, r3, #1
 8002d9a:	23a0      	movs	r3, #160	; 0xa0
 8002d9c:	05db      	lsls	r3, r3, #23
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff fedd 	bl	8002b60 <LL_GPIO_SetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002da6:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002da8:	2110      	movs	r1, #16
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff fee4 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002db2:	2120      	movs	r1, #32
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff fedf 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002dba:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7ff feda 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002dc4:	e072      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
		}
	}
	else if(u8DirectionRotate == ROTATE_REPAUS)
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d000      	beq.n	8002dd0 <f_MotorSteperDrv_StepSetting+0x1e0>
 8002dce:	e06c      	b.n	8002eaa <f_MotorSteperDrv_StepSetting+0x2ba>
	{
		switch (u16StepNumber) {
 8002dd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d050      	beq.n	8002e7a <f_MotorSteperDrv_StepSetting+0x28a>
 8002dd8:	dc68      	bgt.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d035      	beq.n	8002e4a <f_MotorSteperDrv_StepSetting+0x25a>
 8002dde:	dc65      	bgt.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <f_MotorSteperDrv_StepSetting+0x1fa>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d018      	beq.n	8002e1a <f_MotorSteperDrv_StepSetting+0x22a>
 8002de8:	e060      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 0:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	005a      	lsls	r2, r3, #1
 8002dee:	23a0      	movs	r3, #160	; 0xa0
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	0011      	movs	r1, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff febf 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff feba 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e06:	2120      	movs	r1, #32
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff feb5 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e10:	2108      	movs	r1, #8
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff feb0 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002e18:	e048      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 1:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	005a      	lsls	r2, r3, #1
 8002e1e:	23a0      	movs	r3, #160	; 0xa0
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fea7 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff fea2 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002e34:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e36:	2120      	movs	r1, #32
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff fe9d 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e40:	2108      	movs	r1, #8
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff fe98 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002e48:	e030      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 2:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	005a      	lsls	r2, r3, #1
 8002e4e:	23a0      	movs	r3, #160	; 0xa0
 8002e50:	05db      	lsls	r3, r3, #23
 8002e52:	0011      	movs	r1, r2
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fe8f 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff fe8a 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e66:	2120      	movs	r1, #32
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff fe85 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e70:	2108      	movs	r1, #8
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fe80 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002e78:	e018      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
			case 3:
				LL_GPIO_ResetOutputPin(MOTOR_PIN1_GPIO_Port, MOTOR_PIN1_Pin);
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	005a      	lsls	r2, r3, #1
 8002e7e:	23a0      	movs	r3, #160	; 0xa0
 8002e80:	05db      	lsls	r3, r3, #23
 8002e82:	0011      	movs	r1, r2
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fe77 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN2_GPIO_Port, MOTOR_PIN2_Pin);
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff fe72 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN3_GPIO_Port, MOTOR_PIN3_Pin);
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002e96:	2120      	movs	r1, #32
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff fe6d 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin(MOTOR_PIN4_GPIO_Port, MOTOR_PIN4_Pin);
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <f_MotorSteperDrv_StepSetting+0x2f0>)
 8002ea0:	2108      	movs	r1, #8
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff fe68 	bl	8002b78 <LL_GPIO_ResetOutputPin>
				break;
 8002ea8:	e000      	b.n	8002eac <f_MotorSteperDrv_StepSetting+0x2bc>
		}
	}
 8002eaa:	46c0      	nop			; (mov r8, r8)

	if(u16StepNumber++ >= 3)
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002eb6:	8011      	strh	r1, [r2, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <f_MotorSteperDrv_StepSetting+0x2d2>
	{
		u16StepNumber = 0;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <f_MotorSteperDrv_StepSetting+0x2dc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	801a      	strh	r2, [r3, #0]
	}
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	200007c8 	.word	0x200007c8
 8002ed0:	200007d4 	.word	0x200007d4
 8002ed4:	200007dc 	.word	0x200007dc
 8002ed8:	200007e4 	.word	0x200007e4
 8002edc:	200007ec 	.word	0x200007ec
 8002ee0:	50000400 	.word	0x50000400

08002ee4 <f_MotorSteperDrv_SetStep>:

void f_MotorSteperDrv_SetStep(uint32_t u32ValueRotation)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	u32RequestedStep = u32ValueRotation;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <f_MotorSteperDrv_SetStep+0x18>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200007d0 	.word	0x200007d0

08002f00 <f_MotorSteperDrv_MainFunction>:

void f_MotorSteperDrv_MainFunction(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	if (u32ActualStep < u32RequestedStep)
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <f_MotorSteperDrv_MainFunction+0x84>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d212      	bcs.n	8002f36 <f_MotorSteperDrv_MainFunction+0x36>
	{
		if(TIME_STEPS_TASK > u16TimerTick++)
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	b291      	uxth	r1, r2
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f1a:	8011      	strh	r1, [r2, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d80a      	bhi.n	8002f36 <f_MotorSteperDrv_MainFunction+0x36>
		{
			f_MotorSteperDrv_StepSetting(ROTATE_LEFT);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff fe65 	bl	8002bf0 <f_MotorSteperDrv_StepSetting>
			u32ActualStep++;
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f2e:	601a      	str	r2, [r3, #0]
			u16TimerTick = 0;
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]
		}

	}
	if (u32ActualStep > u32RequestedStep)
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <f_MotorSteperDrv_MainFunction+0x84>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d912      	bls.n	8002f68 <f_MotorSteperDrv_MainFunction+0x68>
	{
		if(TIME_STEPS_TASK > u16TimerTick++)
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	b291      	uxth	r1, r2
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f4c:	8011      	strh	r1, [r2, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d80a      	bhi.n	8002f68 <f_MotorSteperDrv_MainFunction+0x68>
		{
			f_MotorSteperDrv_StepSetting(ROTATE_RIGHT);
 8002f52:	2002      	movs	r0, #2
 8002f54:	f7ff fe4c 	bl	8002bf0 <f_MotorSteperDrv_StepSetting>
			u32ActualStep--;
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1e5a      	subs	r2, r3, #1
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f60:	601a      	str	r2, [r3, #0]
			u16TimerTick = 0;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <f_MotorSteperDrv_MainFunction+0x88>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	801a      	strh	r2, [r3, #0]
		}

	}
	if (u32ActualStep == u32RequestedStep)
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <f_MotorSteperDrv_MainFunction+0x80>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <f_MotorSteperDrv_MainFunction+0x84>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d102      	bne.n	8002f7a <f_MotorSteperDrv_MainFunction+0x7a>
	{
		f_MotorSteperDrv_StepSetting(ROTATE_REPAUS);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fe3b 	bl	8002bf0 <f_MotorSteperDrv_StepSetting>
	}
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200007cc 	.word	0x200007cc
 8002f84:	200007d0 	.word	0x200007d0
 8002f88:	200007ca 	.word	0x200007ca

08002f8c <Motor_ConvDegreeTeStep_Init>:
#define COMPLITE_ROTATION	(6.28) // 2PI
#define FULL_ROTATION_STEPS	(2048u)
#define FULL_ROTATION_DEGREE (360u)

void Motor_ConvDegreeTeStep_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	fValueDegree = 0.0f;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <Motor_ConvDegreeTeStep_Init+0x10>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200007f4 	.word	0x200007f4

08002fa0 <Motor_ConvDegreeToStep_GETValueFromUSART>:

void Motor_ConvDegreeToStep_GETValueFromUSART(float* fDegree)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	fValueDegree = *fDegree;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b02      	ldr	r3, [pc, #8]	; (8002fb8 <Motor_ConvDegreeToStep_GETValueFromUSART+0x18>)
 8002fae:	601a      	str	r2, [r3, #0]
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200007f4 	.word	0x200007f4

08002fbc <Motor_ConvDegreeTeStep_SETValueStep>:

void Motor_ConvDegreeTeStep_SETValueStep(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
//	ResultValueToStep = ((uint16_t)(FULL_ROTATION_STEPS * fValueDegree) / COMPLITE_ROTATION);		//When we enter the steps
	ResultValueToStep = ((uint32_t)(FULL_ROTATION_STEPS * fValueDegree) / FULL_ROTATION_DEGREE);	//When we enter the degree
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <Motor_ConvDegreeTeStep_SETValueStep+0x34>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	218a      	movs	r1, #138	; 0x8a
 8002fc6:	05c9      	lsls	r1, r1, #23
 8002fc8:	1c18      	adds	r0, r3, #0
 8002fca:	f7fd f949 	bl	8000260 <__aeabi_fmul>
 8002fce:	1c03      	adds	r3, r0, #0
 8002fd0:	1c18      	adds	r0, r3, #0
 8002fd2:	f7fd f92d 	bl	8000230 <__aeabi_f2uiz>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	23b4      	movs	r3, #180	; 0xb4
 8002fda:	0059      	lsls	r1, r3, #1
 8002fdc:	0010      	movs	r0, r2
 8002fde:	f7fd f89b 	bl	8000118 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <Motor_ConvDegreeTeStep_SETValueStep+0x38>)
 8002fe8:	601a      	str	r2, [r3, #0]


}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200007f4 	.word	0x200007f4
 8002ff4:	200007f8 	.word	0x200007f8

08002ff8 <Motor_ConvDegreeTeStep_MainFunction>:

void Motor_ConvDegreeTeStep_MainFunction()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	Motor_ConvDegreeTeStep_SETValueStep();
 8002ffc:	f7ff ffde 	bl	8002fbc <Motor_ConvDegreeTeStep_SETValueStep>
	f_MotorSteperDrv_SetStep(ResultValueToStep);
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <Motor_ConvDegreeTeStep_MainFunction+0x18>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff6d 	bl	8002ee4 <f_MotorSteperDrv_SetStep>
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200007f8 	.word	0x200007f8

08003014 <TheApp_Init>:


ByteBitField byteBitField;

void TheApp_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	byteBitField.BytesofData.u8FirstBit = 0;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <TheApp_Init+0x18>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
	byteBitField.BytesofData.u8SecondBit = 0;
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <TheApp_Init+0x18>)
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	20000810 	.word	0x20000810

08003030 <TheAPP_MainFunction>:


void TheAPP_MainFunction(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	TheAPP_GetClickButton();
 8003034:	f000 f828 	bl	8003088 <TheAPP_GetClickButton>

	if(u16FlagCallBack == true)
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <TheAPP_MainFunction+0x44>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <TheAPP_MainFunction+0x3e>
	{

		if(u8CMD_DataUSART == DATA_FOR_LED)
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <TheAPP_MainFunction+0x48>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <TheAPP_MainFunction+0x28>
		{
		    f_SetValuePeriod(&ledConfig1, u16ValueUSART);
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <TheAPP_MainFunction+0x4c>)
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <TheAPP_MainFunction+0x50>)
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fd59 	bl	8002b08 <f_SetValuePeriod>
 8003056:	e007      	b.n	8003068 <TheAPP_MainFunction+0x38>
		}
		else if(u8CMD_DataUSART == DATA_FOR_STEP_MOTOR)
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <TheAPP_MainFunction+0x48>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d103      	bne.n	8003068 <TheAPP_MainFunction+0x38>
		{
			Motor_ConvDegreeToStep_GETValueFromUSART(&fValueUSARTForMotor);
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <TheAPP_MainFunction+0x54>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff ff9c 	bl	8002fa0 <Motor_ConvDegreeToStep_GETValueFromUSART>
		}
		u16FlagCallBack = false;
 8003068:	4b02      	ldr	r3, [pc, #8]	; (8003074 <TheAPP_MainFunction+0x44>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
	}

}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000802 	.word	0x20000802
 8003078:	2000080c 	.word	0x2000080c
 800307c:	20000804 	.word	0x20000804
 8003080:	200007b0 	.word	0x200007b0
 8003084:	20000808 	.word	0x20000808

08003088 <TheAPP_GetClickButton>:


void TheAPP_GetClickButton(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	u16SysClickBtn = f_GetReturnValuePeriod();
 800308c:	f7ff fa22 	bl	80024d4 <f_GetReturnValuePeriod>
 8003090:	0002      	movs	r2, r0
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <TheAPP_GetClickButton+0x3c>)
 8003094:	601a      	str	r2, [r3, #0]
	if(u16PreviousValueBlinkBtn != u16SysClickBtn)
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <TheAPP_GetClickButton+0x40>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	001a      	movs	r2, r3
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <TheAPP_GetClickButton+0x3c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d00c      	beq.n	80030be <TheAPP_GetClickButton+0x36>
	{
	    f_SetValuePeriod(&ledConfig2, u16SysClickBtn);
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <TheAPP_GetClickButton+0x3c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <TheAPP_GetClickButton+0x44>)
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fd2a 	bl	8002b08 <f_SetValuePeriod>
		u16PreviousValueBlinkBtn = u16SysClickBtn;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <TheAPP_GetClickButton+0x3c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <TheAPP_GetClickButton+0x40>)
 80030bc:	801a      	strh	r2, [r3, #0]
	}
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200007fc 	.word	0x200007fc
 80030c8:	20000800 	.word	0x20000800
 80030cc:	200007bc 	.word	0x200007bc

080030d0 <TheAPP_CallBack>:

void TheAPP_CallBack(uint8_t u8CMDData, uint16_t u16Value)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	0002      	movs	r2, r0
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	1c0a      	adds	r2, r1, #0
 80030e0:	801a      	strh	r2, [r3, #0]
	u16FlagCallBack = true;
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <TheAPP_CallBack+0x30>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
	u16ValueUSART = u16Value;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <TheAPP_CallBack+0x34>)
 80030ea:	1d3a      	adds	r2, r7, #4
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	801a      	strh	r2, [r3, #0]
	u8CMD_DataUSART = u8CMDData;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <TheAPP_CallBack+0x38>)
 80030f2:	1dfa      	adds	r2, r7, #7
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	701a      	strb	r2, [r3, #0]
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000802 	.word	0x20000802
 8003104:	20000804 	.word	0x20000804
 8003108:	2000080c 	.word	0x2000080c

0800310c <TheAPP_CallBack_Motor>:

void TheAPP_CallBack_Motor(uint8_t u8CMDDataMotor, float* fValue)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	0002      	movs	r2, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	701a      	strb	r2, [r3, #0]
	u16FlagCallBack = true;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <TheAPP_CallBack_Motor+0x2c>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
	fValueUSARTForMotor =  (*fValue);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <TheAPP_CallBack_Motor+0x30>)
 8003126:	601a      	str	r2, [r3, #0]
	u8CMD_DataUSART = u8CMDDataMotor;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <TheAPP_CallBack_Motor+0x34>)
 800312a:	1dfa      	adds	r2, r7, #7
 800312c:	7812      	ldrb	r2, [r2, #0]
 800312e:	701a      	strb	r2, [r3, #0]
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000802 	.word	0x20000802
 800313c:	20000808 	.word	0x20000808
 8003140:	2000080c 	.word	0x2000080c

08003144 <LL_USART_IsActiveFlag_PE>:
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <LL_USART_IsActiveFlag_PE+0x18>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_USART_IsActiveFlag_PE+0x1a>
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}

08003166 <LL_USART_IsActiveFlag_FE>:
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d101      	bne.n	800317e <LL_USART_IsActiveFlag_FE+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_USART_IsActiveFlag_FE+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}

08003188 <LL_USART_IsActiveFlag_NE>:
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	2b04      	cmp	r3, #4
 800319a:	d101      	bne.n	80031a0 <LL_USART_IsActiveFlag_NE+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_USART_IsActiveFlag_NE+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}

080031aa <LL_USART_IsActiveFlag_ORE>:
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2208      	movs	r2, #8
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d101      	bne.n	80031c2 <LL_USART_IsActiveFlag_ORE+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_USART_IsActiveFlag_ORE+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2220      	movs	r2, #32
 80031da:	4013      	ands	r3, r2
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d101      	bne.n	80031e4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}

080031ee <LL_USART_IsActiveFlag_TC>:
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d101      	bne.n	8003206 <LL_USART_IsActiveFlag_TC+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_USART_IsActiveFlag_TC+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	4013      	ands	r3, r2
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d101      	bne.n	8003228 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}

08003232 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}

0800325e <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2208      	movs	r2, #8
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}

0800328a <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ae:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	2301      	movs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b006      	add	sp, #24
 80032dc:	bd80      	pop	{r7, pc}

080032de <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ec:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	2301      	movs	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2240      	movs	r2, #64	; 0x40
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			; (mov r8, r8)
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}

0800331c <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	60bb      	str	r3, [r7, #8]
  return(result);
 800332a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	2301      	movs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			; (mov r8, r8)
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b006      	add	sp, #24
 8003358:	bd80      	pop	{r7, pc}

0800335a <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003362:	f3ef 8310 	mrs	r3, PRIMASK
 8003366:	60bb      	str	r3, [r7, #8]
  return(result);
 8003368:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	2301      	movs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	4393      	bics	r3, r2
 8003380:	001a      	movs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			; (mov r8, r8)
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}

0800339a <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2301      	movs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	4393      	bics	r3, r2
 80033c0:	001a      	movs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f383 8810 	msr	PRIMASK, r3
}
 80033d0:	46c0      	nop			; (mov r8, r8)
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b006      	add	sp, #24
 80033d8:	bd80      	pop	{r7, pc}

080033da <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2220      	movs	r2, #32
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d101      	bne.n	80033f2 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2240      	movs	r2, #64	; 0x40
 800340a:	4013      	ands	r3, r2
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d101      	bne.n	8003414 <LL_USART_IsEnabledIT_TC+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_USART_IsEnabledIT_TC+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}

0800341e <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	4013      	ands	r3, r2
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d101      	bne.n	8003436 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <LL_USART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(const USART_TypeDef *USARTx)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	401a      	ands	r2, r3
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	429a      	cmp	r2, r3
 8003458:	d101      	bne.n	800345e <LL_USART_IsEnabledIT_PE+0x1e>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_USART_IsEnabledIT_PE+0x20>
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <LL_USART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <LL_USART_IsEnabledIT_ERROR+0x18>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <LL_USART_IsEnabledIT_ERROR+0x1a>
 8003480:	2300      	movs	r3, #0
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}

0800348a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2db      	uxtb	r3, r3
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}

080034a0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	000a      	movs	r2, r1
 80034aa:	1cfb      	adds	r3, r7, #3
 80034ac:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80034ae:	1cfb      	adds	r3, r7, #3
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <USARTDrv_Init>:
CircularFIFOBuffer Rx_CircularFIFOBuffer;

/*---------------------------------------------------------*/

void USARTDrv_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART1);
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <USARTDrv_Init+0x30>)
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7ff feea 	bl	80032a0 <LL_USART_EnableIT_RXNE_RXFNE>
	u16Temp = 10;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <USARTDrv_Init+0x34>)
 80034ce:	220a      	movs	r2, #10
 80034d0:	801a      	strh	r2, [r3, #0]
	Tx_CircularFIFOBuffer.u16Head = 0u;
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <USARTDrv_Init+0x38>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	809a      	strh	r2, [r3, #4]
	Tx_CircularFIFOBuffer.u16Tail = 0u;
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <USARTDrv_Init+0x38>)
 80034da:	2200      	movs	r2, #0
 80034dc:	805a      	strh	r2, [r3, #2]

	Rx_CircularFIFOBuffer.u16Head = 0u;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <USARTDrv_Init+0x3c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	809a      	strh	r2, [r3, #4]
	Rx_CircularFIFOBuffer.u16Tail = 0u;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <USARTDrv_Init+0x3c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	805a      	strh	r2, [r3, #2]
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	20000864 	.word	0x20000864
 80034f8:	2000082c 	.word	0x2000082c
 80034fc:	20000868 	.word	0x20000868

08003500 <USARTDrv_MainFunction>:


/*---------------------------------------------------------*/

void USARTDrv_MainFunction(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	 uint16_t u16_length = 0u;
 8003506:	1dbb      	adds	r3, r7, #6
 8003508:	2200      	movs	r2, #0
 800350a:	801a      	strh	r2, [r3, #0]

	 if(u16USART_Timer > TIMER_TASK)
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <USARTDrv_MainFunction+0x50>)
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	23fa      	movs	r3, #250	; 0xfa
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d911      	bls.n	800353c <USARTDrv_MainFunction+0x3c>
	 {
		 u16USART_Timer=0;
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <USARTDrv_MainFunction+0x50>)
 800351a:	2200      	movs	r2, #0
 800351c:	801a      	strh	r2, [r3, #0]
		 counter++;
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <USARTDrv_MainFunction+0x54>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <USARTDrv_MainFunction+0x54>)
 8003526:	601a      	str	r2, [r3, #0]
		 u16_length = sprintf((uint8_t *)BufferTx, "String :%d\n", counter);
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <USARTDrv_MainFunction+0x54>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	490a      	ldr	r1, [pc, #40]	; (8003558 <USARTDrv_MainFunction+0x58>)
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <USARTDrv_MainFunction+0x5c>)
 8003530:	0018      	movs	r0, r3
 8003532:	f000 faf9 	bl	8003b28 <siprintf>
 8003536:	0002      	movs	r2, r0
 8003538:	1dbb      	adds	r3, r7, #6
 800353a:	801a      	strh	r2, [r3, #0]

//		 USART_SendBuffer(BufferTx, 15, &u16_length);

	}
	 u16USART_Timer++;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <USARTDrv_MainFunction+0x50>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <USARTDrv_MainFunction+0x50>)
 8003546:	801a      	strh	r2, [r3, #0]
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000824 	.word	0x20000824
 8003554:	20000828 	.word	0x20000828
 8003558:	08004414 	.word	0x08004414
 800355c:	20000814 	.word	0x20000814

08003560 <USART_SendBuffer>:

/*---------------------------------------------------------*/

void USART_SendBuffer(uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	230a      	movs	r3, #10
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	1c0a      	adds	r2, r1, #0
 8003570:	801a      	strh	r2, [r3, #0]
	uint16_t u16_Len = 0u;
 8003572:	2316      	movs	r3, #22
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2200      	movs	r2, #0
 8003578:	801a      	strh	r2, [r3, #0]
	*RecievedLen = 0u;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	801a      	strh	r2, [r3, #0]

	while( (!f_isFullFIFOBuffer(&Tx_CircularFIFOBuffer)) &&  (Len > (u16_Len)) )
 8003580:	e015      	b.n	80035ae <USART_SendBuffer+0x4e>
	{
		f_addElemFIFOBuffer(&Tx_CircularFIFOBuffer, *Data);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <USART_SendBuffer+0x80>)
 8003588:	0011      	movs	r1, r2
 800358a:	0018      	movs	r0, r3
 800358c:	f7ff f8af 	bl	80026ee <f_addElemFIFOBuffer>
		Data++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
		u16_Len++;
 8003596:	2116      	movs	r1, #22
 8003598:	187b      	adds	r3, r7, r1
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	187b      	adds	r3, r7, r1
 800359e:	3201      	adds	r2, #1
 80035a0:	801a      	strh	r2, [r3, #0]
		(*RecievedLen)++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	801a      	strh	r2, [r3, #0]
	while( (!f_isFullFIFOBuffer(&Tx_CircularFIFOBuffer)) &&  (Len > (u16_Len)) )
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <USART_SendBuffer+0x80>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff f87e 	bl	80026b2 <f_isFullFIFOBuffer>
 80035b6:	0003      	movs	r3, r0
 80035b8:	001a      	movs	r2, r3
 80035ba:	2301      	movs	r3, #1
 80035bc:	4053      	eors	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <USART_SendBuffer+0x74>
 80035c4:	230a      	movs	r3, #10
 80035c6:	18fa      	adds	r2, r7, r3
 80035c8:	2316      	movs	r3, #22
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8d6      	bhi.n	8003582 <USART_SendBuffer+0x22>
	}
	USART_TxHandlerIsr();
 80035d4:	f000 f896 	bl	8003704 <USART_TxHandlerIsr>
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	2000082c 	.word	0x2000082c

080035e4 <USART_SysCallBack>:

/*---------------------------------------------------------*/


void USART_SysCallBack(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	  /*Reset parity error*/
	  	if( (0u != LL_USART_IsActiveFlag_PE(USART1)) && (0u != LL_USART_IsEnabledIT_PE(USART1)) )
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <USART_SysCallBack+0xf4>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff fdaa 	bl	8003144 <LL_USART_IsActiveFlag_PE>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d009      	beq.n	8003608 <USART_SysCallBack+0x24>
 80035f4:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <USART_SysCallBack+0xf4>)
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff22 	bl	8003440 <LL_USART_IsEnabledIT_PE>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d003      	beq.n	8003608 <USART_SysCallBack+0x24>
	  	{
	  		LL_USART_ClearFlag_PE(USART1);
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fe15 	bl	8003232 <LL_USART_ClearFlag_PE>
	  	}

	  	/*Reset frame error*/
	  	if( (0u != LL_USART_IsActiveFlag_FE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <USART_SysCallBack+0xf4>)
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff fdab 	bl	8003166 <LL_USART_IsActiveFlag_FE>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d009      	beq.n	8003628 <USART_SysCallBack+0x44>
 8003614:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff ff26 	bl	8003468 <LL_USART_IsEnabledIT_ERROR>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d003      	beq.n	8003628 <USART_SysCallBack+0x44>
	  	{
	  		LL_USART_ClearFlag_FE(USART1);
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fe10 	bl	8003248 <LL_USART_ClearFlag_FE>
	  	}

	  	/*Reset noise error*/
	  	if( (0u != LL_USART_IsActiveFlag_NE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <USART_SysCallBack+0xf4>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fdac 	bl	8003188 <LL_USART_IsActiveFlag_NE>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d009      	beq.n	8003648 <USART_SysCallBack+0x64>
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff ff16 	bl	8003468 <LL_USART_IsEnabledIT_ERROR>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d003      	beq.n	8003648 <USART_SysCallBack+0x64>
	  	{
	  		LL_USART_ClearFlag_NE(USART1);
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003642:	0018      	movs	r0, r3
 8003644:	f7ff fe0b 	bl	800325e <LL_USART_ClearFlag_NE>
	  	}

	  	/*Reset Over-run error*/
	  	if( (0u != LL_USART_IsActiveFlag_ORE(USART1)) && (0u != LL_USART_IsEnabledIT_ERROR(USART1)) )
 8003648:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <USART_SysCallBack+0xf4>)
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fdad 	bl	80031aa <LL_USART_IsActiveFlag_ORE>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d009      	beq.n	8003668 <USART_SysCallBack+0x84>
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff ff06 	bl	8003468 <LL_USART_IsEnabledIT_ERROR>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d003      	beq.n	8003668 <USART_SysCallBack+0x84>
	  	{
	  		LL_USART_ClearFlag_ORE(USART1);
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff fe06 	bl	8003274 <LL_USART_ClearFlag_ORE>
	  	}

	  	/*RX interrupt*/
	  	if( (0u != LL_USART_IsActiveFlag_RXNE(USART1)) && (0u != LL_USART_IsEnabledIT_RXNE(USART1)) )
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <USART_SysCallBack+0xf4>)
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff fdae 	bl	80031cc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d007      	beq.n	8003684 <USART_SysCallBack+0xa0>
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff feaf 	bl	80033da <LL_USART_IsEnabledIT_RXNE_RXFNE>
 800367c:	1e03      	subs	r3, r0, #0
 800367e:	d001      	beq.n	8003684 <USART_SysCallBack+0xa0>
	  	{
	  		USART_RxHandlerIsr();
 8003680:	f000 f82c 	bl	80036dc <USART_RxHandlerIsr>
	  	}

	  	/*TX buffer empty interrupt*/
		if( (0u != LL_USART_IsActiveFlag_TXE(USART1)) && (0u != LL_USART_IsEnabledIT_TXE(USART1)) )
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003686:	0018      	movs	r0, r3
 8003688:	f7ff fdc2 	bl	8003210 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d00b      	beq.n	80036a8 <USART_SysCallBack+0xc4>
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <USART_SysCallBack+0xf4>)
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fec3 	bl	800341e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d005      	beq.n	80036a8 <USART_SysCallBack+0xc4>
	  	{
	  		LL_USART_DisableIT_TXE(USART1);
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <USART_SysCallBack+0xf4>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff fe7b 	bl	800339a <LL_USART_DisableIT_TXE_TXFNF>
	  		USART_TxHandlerIsr();
 80036a4:	f000 f82e 	bl	8003704 <USART_TxHandlerIsr>

	  	}

	  	/*TX completed interrupt*/
	  	if( (0u != LL_USART_IsActiveFlag_TC(USART1)) && (0u != LL_USART_IsEnabledIT_TC(USART1)) )
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <USART_SysCallBack+0xf4>)
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff fd9f 	bl	80031ee <LL_USART_IsActiveFlag_TC>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d00d      	beq.n	80036d0 <USART_SysCallBack+0xec>
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <USART_SysCallBack+0xf4>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff fea0 	bl	80033fc <LL_USART_IsEnabledIT_TC>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d007      	beq.n	80036d0 <USART_SysCallBack+0xec>
	  	{
	  		LL_USART_DisableIT_TC(USART1);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <USART_SysCallBack+0xf4>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7ff fe49 	bl	800335a <LL_USART_DisableIT_TC>
	  		LL_USART_ClearFlag_TC(USART1);
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <USART_SysCallBack+0xf4>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff fddd 	bl	800328a <LL_USART_ClearFlag_TC>
	  	}
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40013800 	.word	0x40013800

080036dc <USART_RxHandlerIsr>:

/*---------------------------------------------------------*/

void USART_RxHandlerIsr(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	f_addElemFIFOBuffer(&Rx_CircularFIFOBuffer, LL_USART_ReceiveData8(USART1));
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <USART_RxHandlerIsr+0x20>)
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7ff fed1 	bl	800348a <LL_USART_ReceiveData8>
 80036e8:	0003      	movs	r3, r0
 80036ea:	001a      	movs	r2, r3
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <USART_RxHandlerIsr+0x24>)
 80036ee:	0011      	movs	r1, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7fe fffc 	bl	80026ee <f_addElemFIFOBuffer>
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40013800 	.word	0x40013800
 8003700:	20000868 	.word	0x20000868

08003704 <USART_TxHandlerIsr>:

/*---------------------------------------------------------*/

void USART_TxHandlerIsr(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
	uint8_t u8LocalElements;
	while( (!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer)) && ( 0u != LL_USART_IsActiveFlag_TXE(USART1) ) )
 800370a:	e00c      	b.n	8003726 <USART_TxHandlerIsr+0x22>
	{
		f_getElemFIFOBuffer(&Tx_CircularFIFOBuffer, &u8LocalElements);
 800370c:	1dfa      	adds	r2, r7, #7
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <USART_TxHandlerIsr+0x74>)
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff f820 	bl	8002758 <f_getElemFIFOBuffer>
		LL_USART_TransmitData8(USART1, u8LocalElements);
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <USART_TxHandlerIsr+0x78>)
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f7ff febd 	bl	80034a0 <LL_USART_TransmitData8>
	while( (!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer)) && ( 0u != LL_USART_IsActiveFlag_TXE(USART1) ) )
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <USART_TxHandlerIsr+0x74>)
 8003728:	0018      	movs	r0, r3
 800372a:	f7fe ffd1 	bl	80026d0 <f_isEmptyFIFOBuffer>
 800372e:	0003      	movs	r3, r0
 8003730:	001a      	movs	r2, r3
 8003732:	2301      	movs	r3, #1
 8003734:	4053      	eors	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <USART_TxHandlerIsr+0x44>
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <USART_TxHandlerIsr+0x78>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff fd66 	bl	8003210 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d1e1      	bne.n	800370c <USART_TxHandlerIsr+0x8>
	}

	if(!f_isEmptyFIFOBuffer(&Tx_CircularFIFOBuffer))
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <USART_TxHandlerIsr+0x74>)
 800374a:	0018      	movs	r0, r3
 800374c:	f7fe ffc0 	bl	80026d0 <f_isEmptyFIFOBuffer>
 8003750:	0003      	movs	r3, r0
 8003752:	001a      	movs	r2, r3
 8003754:	2301      	movs	r3, #1
 8003756:	4053      	eors	r3, r2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <USART_TxHandlerIsr+0x64>
	{
		LL_USART_EnableIT_TXE(USART1);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <USART_TxHandlerIsr+0x78>)
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fddb 	bl	800331c <LL_USART_EnableIT_TXE_TXFNF>
	}
	else
	{
		LL_USART_EnableIT_TC(USART1);
	}
}
 8003766:	e003      	b.n	8003770 <USART_TxHandlerIsr+0x6c>
		LL_USART_EnableIT_TC(USART1);
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <USART_TxHandlerIsr+0x78>)
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff fdb7 	bl	80032de <LL_USART_EnableIT_TC>
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000082c 	.word	0x2000082c
 800377c:	40013800 	.word	0x40013800

08003780 <f_USART_GetCharData>:

/*---------------------------------------------------------*/

bool f_USART_GetCharData(uint8_t* u8DataInformation)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	bool lbReturnValue = false;
 8003788:	240f      	movs	r4, #15
 800378a:	193b      	adds	r3, r7, r4
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
	if(!f_isEmptyFIFOBuffer(&Rx_CircularFIFOBuffer))
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <f_USART_GetCharData+0x48>)
 8003792:	0018      	movs	r0, r3
 8003794:	f7fe ff9c 	bl	80026d0 <f_isEmptyFIFOBuffer>
 8003798:	0003      	movs	r3, r0
 800379a:	001a      	movs	r2, r3
 800379c:	2301      	movs	r3, #1
 800379e:	4053      	eors	r3, r2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <f_USART_GetCharData+0x38>
	{
		f_getElemFIFOBuffer(&Rx_CircularFIFOBuffer, u8DataInformation);
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <f_USART_GetCharData+0x48>)
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fe ffd3 	bl	8002758 <f_getElemFIFOBuffer>
		lbReturnValue = true;
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
	}
	return lbReturnValue;
 80037b8:	230f      	movs	r3, #15
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	781b      	ldrb	r3, [r3, #0]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b005      	add	sp, #20
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000868 	.word	0x20000868

080037cc <f_USARTCommProt_Init>:
uint16_t u16Index = 0;

/*---------------------------------------------------------*/

void f_USARTCommProt_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	Tu_ValuePacketUSARTMotor.fValuePacketUSARTMotor = 0.f;
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <f_USARTCommProt_Init+0x10>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200008b8 	.word	0x200008b8

080037e0 <f_USARTCommProt_Main>:
/*---------------------------------------------------------*/

void f_USARTCommProt_Main(void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
	bool IsNotEmpty = false;
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
	uint8_t u8DataReceived = 0u;
 80037ec:	1d7b      	adds	r3, r7, #5
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
	uint8_t u8CRCResult;
	do
	{
		IsNotEmpty = f_USART_GetCharData(&u8DataReceived);
 80037f2:	1dfc      	adds	r4, r7, #7
 80037f4:	1d7b      	adds	r3, r7, #5
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff ffc2 	bl	8003780 <f_USART_GetCharData>
 80037fc:	0003      	movs	r3, r0
 80037fe:	7023      	strb	r3, [r4, #0]
		if(IsNotEmpty != false)
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d100      	bne.n	800380a <f_USARTCommProt_Main+0x2a>
 8003808:	e08c      	b.n	8003924 <f_USARTCommProt_Main+0x144>
		{
			switch(ActualState)
 800380a:	4b55      	ldr	r3, [pc, #340]	; (8003960 <f_USARTCommProt_Main+0x180>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d900      	bls.n	8003814 <f_USARTCommProt_Main+0x34>
 8003812:	e095      	b.n	8003940 <f_USARTCommProt_Main+0x160>
 8003814:	009a      	lsls	r2, r3, #2
 8003816:	4b53      	ldr	r3, [pc, #332]	; (8003964 <f_USARTCommProt_Main+0x184>)
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	469f      	mov	pc, r3
			{
				case WAIT_StartByte:
				{
					if(USART_IS_START_BYTE(u8DataReceived))
 800381e:	1d7b      	adds	r3, r7, #5
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2baa      	cmp	r3, #170	; 0xaa
 8003824:	d000      	beq.n	8003828 <f_USARTCommProt_Main+0x48>
 8003826:	e088      	b.n	800393a <f_USARTCommProt_Main+0x15a>
					{
						TU_CommPacketData.ST_USART_Packet.StartByte = u8DataReceived;
 8003828:	1d7b      	adds	r3, r7, #5
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <f_USARTCommProt_Main+0x188>)
 800382e:	701a      	strb	r2, [r3, #0]
						ActualState = WAIT_CommandByte;
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <f_USARTCommProt_Main+0x180>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
					}
					break;
 8003836:	e080      	b.n	800393a <f_USARTCommProt_Main+0x15a>
				}
				case WAIT_CommandByte:
				{
					if(USART_IS_SUPPORTED_CMD(u8DataReceived, CMD_SET_LED_PERIOD) || USART_IS_SUPPORTED_CMD(u8DataReceived, CMD_SET_STEP_MOTOR))
 8003838:	1d7b      	adds	r3, r7, #5
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d003      	beq.n	8003848 <f_USARTCommProt_Main+0x68>
 8003840:	1d7b      	adds	r3, r7, #5
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d107      	bne.n	8003858 <f_USARTCommProt_Main+0x78>
					{
						TU_CommPacketData.ST_USART_Packet.CmdByte = u8DataReceived;
 8003848:	1d7b      	adds	r3, r7, #5
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <f_USARTCommProt_Main+0x188>)
 800384e:	705a      	strb	r2, [r3, #1]
						ActualState = WAIT_LengthByte;
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <f_USARTCommProt_Main+0x180>)
 8003852:	2202      	movs	r2, #2
 8003854:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						ActualState = WAIT_StartByte;
					}
					break;
 8003856:	e073      	b.n	8003940 <f_USARTCommProt_Main+0x160>
						ActualState = WAIT_StartByte;
 8003858:	4b41      	ldr	r3, [pc, #260]	; (8003960 <f_USARTCommProt_Main+0x180>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
					break;
 800385e:	e06f      	b.n	8003940 <f_USARTCommProt_Main+0x160>
				}
				case WAIT_LengthByte:
				{
					if (u8DataReceived > LENGTH_USART_DATA)
 8003860:	1d7b      	adds	r3, r7, #5
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d90a      	bls.n	800387e <f_USARTCommProt_Main+0x9e>
					{

						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, STATE_NEDETERMINATION$);
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <f_USARTCommProt_Main+0x18c>)
 800386a:	2124      	movs	r1, #36	; 0x24
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f905 	bl	8003a7c <f_USARTCommProt_IsDatPacketTightening>
						 USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 8003872:	4a3f      	ldr	r2, [pc, #252]	; (8003970 <f_USARTCommProt_Main+0x190>)
 8003874:	4b3d      	ldr	r3, [pc, #244]	; (800396c <f_USARTCommProt_Main+0x18c>)
 8003876:	2105      	movs	r1, #5
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff fe71 	bl	8003560 <USART_SendBuffer>
					}
					TU_CommPacketData.ST_USART_Packet.LengthByte = u8DataReceived;
 800387e:	1d7b      	adds	r3, r7, #5
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <f_USARTCommProt_Main+0x188>)
 8003884:	709a      	strb	r2, [r3, #2]
					ActualState = WAIT_DataByte;
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <f_USARTCommProt_Main+0x180>)
 8003888:	2203      	movs	r2, #3
 800388a:	701a      	strb	r2, [r3, #0]
					break;
 800388c:	e058      	b.n	8003940 <f_USARTCommProt_Main+0x160>
				}
				case WAIT_DataByte:
				{

					TU_CommPacketData.ST_USART_Packet.DataByte[u16Index] = u8DataReceived;
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <f_USARTCommProt_Main+0x194>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	0019      	movs	r1, r3
 8003894:	1d7b      	adds	r3, r7, #5
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	4b33      	ldr	r3, [pc, #204]	; (8003968 <f_USARTCommProt_Main+0x188>)
 800389a:	185b      	adds	r3, r3, r1
 800389c:	70da      	strb	r2, [r3, #3]
					u16Index++;
 800389e:	4b35      	ldr	r3, [pc, #212]	; (8003974 <f_USARTCommProt_Main+0x194>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <f_USARTCommProt_Main+0x194>)
 80038a8:	801a      	strh	r2, [r3, #0]
					if(u16Index == TU_CommPacketData.ST_USART_Packet.LengthByte)
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <f_USARTCommProt_Main+0x188>)
 80038ac:	789b      	ldrb	r3, [r3, #2]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	4b30      	ldr	r3, [pc, #192]	; (8003974 <f_USARTCommProt_Main+0x194>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d142      	bne.n	800393e <f_USARTCommProt_Main+0x15e>
					{
						ActualState = WAIT_CRCByte;
 80038b8:	4b29      	ldr	r3, [pc, #164]	; (8003960 <f_USARTCommProt_Main+0x180>)
 80038ba:	2204      	movs	r2, #4
 80038bc:	701a      	strb	r2, [r3, #0]
						u16Index = 0;
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <f_USARTCommProt_Main+0x194>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	801a      	strh	r2, [r3, #0]
					}

					break;
 80038c4:	e03b      	b.n	800393e <f_USARTCommProt_Main+0x15e>
				}
				case WAIT_CRCByte:
				{
				    u8CRCResult = f_USARTCommProt_IsCRCByte((&TU_CommPacketData.u8USARTByteArray), (HEADER_LENGTH + TU_CommPacketData.ST_USART_Packet.LengthByte));
 80038c6:	4b28      	ldr	r3, [pc, #160]	; (8003968 <f_USARTCommProt_Main+0x188>)
 80038c8:	789b      	ldrb	r3, [r3, #2]
 80038ca:	3303      	adds	r3, #3
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	1dbc      	adds	r4, r7, #6
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <f_USARTCommProt_Main+0x188>)
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f851 	bl	800397c <f_USARTCommProt_IsCRCByte>
 80038da:	0003      	movs	r3, r0
 80038dc:	7023      	strb	r3, [r4, #0]
					if(u8CRCResult == u8DataReceived)
 80038de:	1d7b      	adds	r3, r7, #5
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	1dba      	adds	r2, r7, #6
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <f_USARTCommProt_Main+0x126>
					{
						f_USARTCommProt_IsProcessData();
 80038ea:	f000 f879 	bl	80039e0 <f_USARTCommProt_IsProcessData>
						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, ACK_BYTE);
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <f_USARTCommProt_Main+0x18c>)
 80038f0:	2106      	movs	r1, #6
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f8c2 	bl	8003a7c <f_USARTCommProt_IsDatPacketTightening>
						USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <f_USARTCommProt_Main+0x190>)
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <f_USARTCommProt_Main+0x18c>)
 80038fc:	2105      	movs	r1, #5
 80038fe:	0018      	movs	r0, r3
 8003900:	f7ff fe2e 	bl	8003560 <USART_SendBuffer>
 8003904:	e00a      	b.n	800391c <f_USARTCommProt_Main+0x13c>

					}
					else
					{
						f_USARTCommProt_IsDatPacketTightening(u8PacketReceived, NACK_BYTE);
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <f_USARTCommProt_Main+0x18c>)
 8003908:	2115      	movs	r1, #21
 800390a:	0018      	movs	r0, r3
 800390c:	f000 f8b6 	bl	8003a7c <f_USARTCommProt_IsDatPacketTightening>
						USART_SendBuffer(u8PacketReceived, LENGTH_DATA_ARRAY_RECIVED, &u16UsartSentData);
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <f_USARTCommProt_Main+0x190>)
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <f_USARTCommProt_Main+0x18c>)
 8003914:	2105      	movs	r1, #5
 8003916:	0018      	movs	r0, r3
 8003918:	f7ff fe22 	bl	8003560 <USART_SendBuffer>
					}
					ActualState = WAIT_StartByte;
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <f_USARTCommProt_Main+0x180>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
					break;
 8003922:	e00d      	b.n	8003940 <f_USARTCommProt_Main+0x160>
				}
			}
		}
		else if(USART_CHECK_TIMEOUT(u16DelayDataBetween))
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <f_USARTCommProt_Main+0x198>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	2b63      	cmp	r3, #99	; 0x63
 800392a:	d909      	bls.n	8003940 <f_USARTCommProt_Main+0x160>
		{
			u16DelayDataBetween = 0u;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <f_USARTCommProt_Main+0x198>)
 800392e:	2200      	movs	r2, #0
 8003930:	801a      	strh	r2, [r3, #0]
			ActualState = WAIT_StartByte;
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <f_USARTCommProt_Main+0x180>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e002      	b.n	8003940 <f_USARTCommProt_Main+0x160>
					break;
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	e000      	b.n	8003940 <f_USARTCommProt_Main+0x160>
					break;
 800393e:	46c0      	nop			; (mov r8, r8)
		}

		u16DelayDataBetween++;
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <f_USARTCommProt_Main+0x198>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <f_USARTCommProt_Main+0x198>)
 800394a:	801a      	strh	r2, [r3, #0]
	}
	while(IsNotEmpty);
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d000      	beq.n	8003956 <f_USARTCommProt_Main+0x176>
 8003954:	e74d      	b.n	80037f2 <f_USARTCommProt_Main+0x12>
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b003      	add	sp, #12
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	200008a0 	.word	0x200008a0
 8003964:	080044f0 	.word	0x080044f0
 8003968:	200008a4 	.word	0x200008a4
 800396c:	200008b0 	.word	0x200008b0
 8003970:	200008be 	.word	0x200008be
 8003974:	200008c0 	.word	0x200008c0
 8003978:	200008bc 	.word	0x200008bc

0800397c <f_USARTCommProt_IsCRCByte>:

/*---------------------------------------------------------*/

uint8_t f_USARTCommProt_IsCRCByte(uint8_t* CommPacketData, uint8_t u8LengthPacket)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	000a      	movs	r2, r1
 8003986:	1cfb      	adds	r3, r7, #3
 8003988:	701a      	strb	r2, [r3, #0]
	uint8_t lu8Index = 0;
 800398a:	210f      	movs	r1, #15
 800398c:	187b      	adds	r3, r7, r1
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
	uint8_t lu8ResultCRC = 0u;
 8003992:	230e      	movs	r3, #14
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]

	for (lu8Index = 0; lu8Index < u8LengthPacket; lu8Index++)
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e010      	b.n	80039c4 <f_USARTCommProt_IsCRCByte+0x48>
	{
		lu8ResultCRC = CommPacketData[lu8Index] ^ lu8ResultCRC;
 80039a2:	200f      	movs	r0, #15
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	18d3      	adds	r3, r2, r3
 80039ac:	7819      	ldrb	r1, [r3, #0]
 80039ae:	220e      	movs	r2, #14
 80039b0:	18bb      	adds	r3, r7, r2
 80039b2:	18ba      	adds	r2, r7, r2
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	404a      	eors	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]
	for (lu8Index = 0; lu8Index < u8LengthPacket; lu8Index++)
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	3201      	adds	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fa      	adds	r2, r7, r3
 80039c8:	1cfb      	adds	r3, r7, #3
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3e7      	bcc.n	80039a2 <f_USARTCommProt_IsCRCByte+0x26>
	}
	return lu8ResultCRC;
 80039d2:	230e      	movs	r3, #14
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	781b      	ldrb	r3, [r3, #0]
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}

080039e0 <f_USARTCommProt_IsProcessData>:
}

/*---------------------------------------------------------*/

void f_USARTCommProt_IsProcessData()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
	uint16_t u16InformationData = 0;
 80039e6:	1cbb      	adds	r3, r7, #2
 80039e8:	2200      	movs	r2, #0
 80039ea:	801a      	strh	r2, [r3, #0]
	uint16_t u16IndexDataMotor;
	uint16_t u16IndexDataByte = 3;
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	2203      	movs	r2, #3
 80039f0:	801a      	strh	r2, [r3, #0]

	if(TU_CommPacketData.ST_USART_Packet.CmdByte == CMD_SET_LED_PERIOD)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <f_USARTCommProt_IsProcessData+0x94>)
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d113      	bne.n	8003a22 <f_USARTCommProt_IsProcessData+0x42>
	{
		u16InformationData = TU_CommPacketData.ST_USART_Packet.DataByte[0] << 8;
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <f_USARTCommProt_IsProcessData+0x94>)
 80039fc:	78db      	ldrb	r3, [r3, #3]
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	1cbb      	adds	r3, r7, #2
 8003a02:	0212      	lsls	r2, r2, #8
 8003a04:	801a      	strh	r2, [r3, #0]
		u16InformationData |= TU_CommPacketData.ST_USART_Packet.DataByte[1];
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <f_USARTCommProt_IsProcessData+0x94>)
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	b299      	uxth	r1, r3
 8003a0c:	1cbb      	adds	r3, r7, #2
 8003a0e:	1cba      	adds	r2, r7, #2
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	801a      	strh	r2, [r3, #0]
		TheAPP_CallBack(CMD_SET_LED_PERIOD, u16InformationData);
 8003a16:	1cbb      	adds	r3, r7, #2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f7ff fb57 	bl	80030d0 <TheAPP_CallBack>

	}
	if(TU_CommPacketData.ST_USART_Packet.CmdByte == CMD_SET_STEP_MOTOR)
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <f_USARTCommProt_IsProcessData+0x94>)
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d11f      	bne.n	8003a6a <f_USARTCommProt_IsProcessData+0x8a>
	{

		for (u16IndexDataMotor = 0; u16IndexDataMotor < DATA_LEGTH_MOTOR; u16IndexDataMotor++)
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e012      	b.n	8003a58 <f_USARTCommProt_IsProcessData+0x78>
		{
			Tu_ValuePacketUSARTMotor.TS_ValueUSART.u8ArrayDataMotor[u16IndexDataMotor] = TU_CommPacketData.ST_USART_Packet.DataByte[u16IndexDataByte];
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	1dbb      	adds	r3, r7, #6
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	490e      	ldr	r1, [pc, #56]	; (8003a74 <f_USARTCommProt_IsProcessData+0x94>)
 8003a3c:	188a      	adds	r2, r1, r2
 8003a3e:	78d1      	ldrb	r1, [r2, #3]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <f_USARTCommProt_IsProcessData+0x98>)
 8003a42:	54d1      	strb	r1, [r2, r3]
			u16IndexDataByte--;
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	3a01      	subs	r2, #1
 8003a4c:	801a      	strh	r2, [r3, #0]
		for (u16IndexDataMotor = 0; u16IndexDataMotor < DATA_LEGTH_MOTOR; u16IndexDataMotor++)
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	1dbb      	adds	r3, r7, #6
 8003a54:	3201      	adds	r2, #1
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	1dbb      	adds	r3, r7, #6
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d9e8      	bls.n	8003a32 <f_USARTCommProt_IsProcessData+0x52>
		}
		TheAPP_CallBack_Motor(CMD_SET_STEP_MOTOR, &Tu_ValuePacketUSARTMotor.fValuePacketUSARTMotor);
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <f_USARTCommProt_IsProcessData+0x98>)
 8003a62:	0019      	movs	r1, r3
 8003a64:	2002      	movs	r0, #2
 8003a66:	f7ff fb51 	bl	800310c <TheAPP_CallBack_Motor>
	}

}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200008a4 	.word	0x200008a4
 8003a78:	200008b8 	.word	0x200008b8

08003a7c <f_USARTCommProt_IsDatPacketTightening>:

/*---------------------------------------------------------*/


void f_USARTCommProt_IsDatPacketTightening(uint8_t* u8PacketReceived, uint8_t u8DataReceiver)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	000a      	movs	r2, r1
 8003a86:	1cfb      	adds	r3, r7, #3
 8003a88:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[0] = START_BYTE_VALUE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	22aa      	movs	r2, #170	; 0xaa
 8003a8e:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[1] = CMD_TRANSMISION_REQUEST;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3301      	adds	r3, #1
 8003a94:	2281      	movs	r2, #129	; 0x81
 8003a96:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[2] = SIZE_BYTE_LENGTH;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[3] = u8DataReceiver;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3303      	adds	r3, #3
 8003aa4:	1cfa      	adds	r2, r7, #3
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	701a      	strb	r2, [r3, #0]
	u8PacketReceived[4] = f_USARTCommProt_IsCRCByte(u8PacketReceived, (LENGTH_DATA_ARRAY_RECIVED - 1));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1d1c      	adds	r4, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff ff62 	bl	800397c <f_USARTCommProt_IsCRCByte>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	7023      	strb	r3, [r4, #0]

}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b003      	add	sp, #12
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <__errno>:
 8003ac4:	4b01      	ldr	r3, [pc, #4]	; (8003acc <__errno+0x8>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4770      	bx	lr
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	200006e8 	.word	0x200006e8

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	4d0c      	ldr	r5, [pc, #48]	; (8003b08 <__libc_init_array+0x38>)
 8003ad6:	4c0d      	ldr	r4, [pc, #52]	; (8003b0c <__libc_init_array+0x3c>)
 8003ad8:	1b64      	subs	r4, r4, r5
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	f000 fc8b 	bl	80043fc <_init>
 8003ae6:	4d0a      	ldr	r5, [pc, #40]	; (8003b10 <__libc_init_array+0x40>)
 8003ae8:	4c0a      	ldr	r4, [pc, #40]	; (8003b14 <__libc_init_array+0x44>)
 8003aea:	1b64      	subs	r4, r4, r5
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	00b3      	lsls	r3, r6, #2
 8003af6:	58eb      	ldr	r3, [r5, r3]
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	00b3      	lsls	r3, r6, #2
 8003b00:	58eb      	ldr	r3, [r5, r3]
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08004538 	.word	0x08004538
 8003b0c:	08004538 	.word	0x08004538
 8003b10:	08004538 	.word	0x08004538
 8003b14:	0800453c 	.word	0x0800453c

08003b18 <memset>:
 8003b18:	0003      	movs	r3, r0
 8003b1a:	1882      	adds	r2, r0, r2
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	7019      	strb	r1, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <siprintf>:
 8003b28:	b40e      	push	{r1, r2, r3}
 8003b2a:	b500      	push	{lr}
 8003b2c:	490b      	ldr	r1, [pc, #44]	; (8003b5c <siprintf+0x34>)
 8003b2e:	b09c      	sub	sp, #112	; 0x70
 8003b30:	ab1d      	add	r3, sp, #116	; 0x74
 8003b32:	9002      	str	r0, [sp, #8]
 8003b34:	9006      	str	r0, [sp, #24]
 8003b36:	9107      	str	r1, [sp, #28]
 8003b38:	9104      	str	r1, [sp, #16]
 8003b3a:	4809      	ldr	r0, [pc, #36]	; (8003b60 <siprintf+0x38>)
 8003b3c:	4909      	ldr	r1, [pc, #36]	; (8003b64 <siprintf+0x3c>)
 8003b3e:	cb04      	ldmia	r3!, {r2}
 8003b40:	9105      	str	r1, [sp, #20]
 8003b42:	6800      	ldr	r0, [r0, #0]
 8003b44:	a902      	add	r1, sp, #8
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	f000 f870 	bl	8003c2c <_svfiprintf_r>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9a02      	ldr	r2, [sp, #8]
 8003b50:	7013      	strb	r3, [r2, #0]
 8003b52:	b01c      	add	sp, #112	; 0x70
 8003b54:	bc08      	pop	{r3}
 8003b56:	b003      	add	sp, #12
 8003b58:	4718      	bx	r3
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	7fffffff 	.word	0x7fffffff
 8003b60:	200006e8 	.word	0x200006e8
 8003b64:	ffff0208 	.word	0xffff0208

08003b68 <__ssputs_r>:
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	688e      	ldr	r6, [r1, #8]
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	0007      	movs	r7, r0
 8003b70:	000c      	movs	r4, r1
 8003b72:	9203      	str	r2, [sp, #12]
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	429e      	cmp	r6, r3
 8003b78:	d83c      	bhi.n	8003bf4 <__ssputs_r+0x8c>
 8003b7a:	2390      	movs	r3, #144	; 0x90
 8003b7c:	898a      	ldrh	r2, [r1, #12]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	421a      	tst	r2, r3
 8003b82:	d034      	beq.n	8003bee <__ssputs_r+0x86>
 8003b84:	6909      	ldr	r1, [r1, #16]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	6960      	ldr	r0, [r4, #20]
 8003b8a:	1a5b      	subs	r3, r3, r1
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	2303      	movs	r3, #3
 8003b90:	4343      	muls	r3, r0
 8003b92:	0fdd      	lsrs	r5, r3, #31
 8003b94:	18ed      	adds	r5, r5, r3
 8003b96:	9b01      	ldr	r3, [sp, #4]
 8003b98:	9802      	ldr	r0, [sp, #8]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	181b      	adds	r3, r3, r0
 8003b9e:	106d      	asrs	r5, r5, #1
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	d900      	bls.n	8003ba6 <__ssputs_r+0x3e>
 8003ba4:	001d      	movs	r5, r3
 8003ba6:	0553      	lsls	r3, r2, #21
 8003ba8:	d532      	bpl.n	8003c10 <__ssputs_r+0xa8>
 8003baa:	0029      	movs	r1, r5
 8003bac:	0038      	movs	r0, r7
 8003bae:	f000 fb53 	bl	8004258 <_malloc_r>
 8003bb2:	1e06      	subs	r6, r0, #0
 8003bb4:	d109      	bne.n	8003bca <__ssputs_r+0x62>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	89a2      	ldrh	r2, [r4, #12]
 8003bc0:	4240      	negs	r0, r0
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	b005      	add	sp, #20
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bca:	9a02      	ldr	r2, [sp, #8]
 8003bcc:	6921      	ldr	r1, [r4, #16]
 8003bce:	f000 faba 	bl	8004146 <memcpy>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <__ssputs_r+0xc0>)
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	9b02      	ldr	r3, [sp, #8]
 8003be0:	6126      	str	r6, [r4, #16]
 8003be2:	18f6      	adds	r6, r6, r3
 8003be4:	6026      	str	r6, [r4, #0]
 8003be6:	6165      	str	r5, [r4, #20]
 8003be8:	9e01      	ldr	r6, [sp, #4]
 8003bea:	1aed      	subs	r5, r5, r3
 8003bec:	60a5      	str	r5, [r4, #8]
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	429e      	cmp	r6, r3
 8003bf2:	d900      	bls.n	8003bf6 <__ssputs_r+0x8e>
 8003bf4:	9e01      	ldr	r6, [sp, #4]
 8003bf6:	0032      	movs	r2, r6
 8003bf8:	9903      	ldr	r1, [sp, #12]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	f000 faac 	bl	8004158 <memmove>
 8003c00:	68a3      	ldr	r3, [r4, #8]
 8003c02:	2000      	movs	r0, #0
 8003c04:	1b9b      	subs	r3, r3, r6
 8003c06:	60a3      	str	r3, [r4, #8]
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	199e      	adds	r6, r3, r6
 8003c0c:	6026      	str	r6, [r4, #0]
 8003c0e:	e7da      	b.n	8003bc6 <__ssputs_r+0x5e>
 8003c10:	002a      	movs	r2, r5
 8003c12:	0038      	movs	r0, r7
 8003c14:	f000 fb96 	bl	8004344 <_realloc_r>
 8003c18:	1e06      	subs	r6, r0, #0
 8003c1a:	d1e0      	bne.n	8003bde <__ssputs_r+0x76>
 8003c1c:	0038      	movs	r0, r7
 8003c1e:	6921      	ldr	r1, [r4, #16]
 8003c20:	f000 faae 	bl	8004180 <_free_r>
 8003c24:	e7c7      	b.n	8003bb6 <__ssputs_r+0x4e>
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	fffffb7f 	.word	0xfffffb7f

08003c2c <_svfiprintf_r>:
 8003c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2e:	b0a1      	sub	sp, #132	; 0x84
 8003c30:	9003      	str	r0, [sp, #12]
 8003c32:	001d      	movs	r5, r3
 8003c34:	898b      	ldrh	r3, [r1, #12]
 8003c36:	000f      	movs	r7, r1
 8003c38:	0016      	movs	r6, r2
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	d511      	bpl.n	8003c62 <_svfiprintf_r+0x36>
 8003c3e:	690b      	ldr	r3, [r1, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10e      	bne.n	8003c62 <_svfiprintf_r+0x36>
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	f000 fb07 	bl	8004258 <_malloc_r>
 8003c4a:	6038      	str	r0, [r7, #0]
 8003c4c:	6138      	str	r0, [r7, #16]
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d105      	bne.n	8003c5e <_svfiprintf_r+0x32>
 8003c52:	230c      	movs	r3, #12
 8003c54:	9a03      	ldr	r2, [sp, #12]
 8003c56:	3801      	subs	r0, #1
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	b021      	add	sp, #132	; 0x84
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	2300      	movs	r3, #0
 8003c64:	ac08      	add	r4, sp, #32
 8003c66:	6163      	str	r3, [r4, #20]
 8003c68:	3320      	adds	r3, #32
 8003c6a:	7663      	strb	r3, [r4, #25]
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	76a3      	strb	r3, [r4, #26]
 8003c70:	9507      	str	r5, [sp, #28]
 8003c72:	0035      	movs	r5, r6
 8003c74:	782b      	ldrb	r3, [r5, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <_svfiprintf_r+0x52>
 8003c7a:	2b25      	cmp	r3, #37	; 0x25
 8003c7c:	d147      	bne.n	8003d0e <_svfiprintf_r+0xe2>
 8003c7e:	1bab      	subs	r3, r5, r6
 8003c80:	9305      	str	r3, [sp, #20]
 8003c82:	42b5      	cmp	r5, r6
 8003c84:	d00c      	beq.n	8003ca0 <_svfiprintf_r+0x74>
 8003c86:	0032      	movs	r2, r6
 8003c88:	0039      	movs	r1, r7
 8003c8a:	9803      	ldr	r0, [sp, #12]
 8003c8c:	f7ff ff6c 	bl	8003b68 <__ssputs_r>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d100      	bne.n	8003c96 <_svfiprintf_r+0x6a>
 8003c94:	e0ae      	b.n	8003df4 <_svfiprintf_r+0x1c8>
 8003c96:	6962      	ldr	r2, [r4, #20]
 8003c98:	9b05      	ldr	r3, [sp, #20]
 8003c9a:	4694      	mov	ip, r2
 8003c9c:	4463      	add	r3, ip
 8003c9e:	6163      	str	r3, [r4, #20]
 8003ca0:	782b      	ldrb	r3, [r5, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d100      	bne.n	8003ca8 <_svfiprintf_r+0x7c>
 8003ca6:	e0a5      	b.n	8003df4 <_svfiprintf_r+0x1c8>
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2300      	movs	r3, #0
 8003cac:	4252      	negs	r2, r2
 8003cae:	6062      	str	r2, [r4, #4]
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	3254      	adds	r2, #84	; 0x54
 8003cb4:	1852      	adds	r2, r2, r1
 8003cb6:	1c6e      	adds	r6, r5, #1
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	60e3      	str	r3, [r4, #12]
 8003cbc:	60a3      	str	r3, [r4, #8]
 8003cbe:	7013      	strb	r3, [r2, #0]
 8003cc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	7831      	ldrb	r1, [r6, #0]
 8003cc6:	4854      	ldr	r0, [pc, #336]	; (8003e18 <_svfiprintf_r+0x1ec>)
 8003cc8:	f000 fa32 	bl	8004130 <memchr>
 8003ccc:	1c75      	adds	r5, r6, #1
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d11f      	bne.n	8003d12 <_svfiprintf_r+0xe6>
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	06d3      	lsls	r3, r2, #27
 8003cd6:	d504      	bpl.n	8003ce2 <_svfiprintf_r+0xb6>
 8003cd8:	2353      	movs	r3, #83	; 0x53
 8003cda:	a904      	add	r1, sp, #16
 8003cdc:	185b      	adds	r3, r3, r1
 8003cde:	2120      	movs	r1, #32
 8003ce0:	7019      	strb	r1, [r3, #0]
 8003ce2:	0713      	lsls	r3, r2, #28
 8003ce4:	d504      	bpl.n	8003cf0 <_svfiprintf_r+0xc4>
 8003ce6:	2353      	movs	r3, #83	; 0x53
 8003ce8:	a904      	add	r1, sp, #16
 8003cea:	185b      	adds	r3, r3, r1
 8003cec:	212b      	movs	r1, #43	; 0x2b
 8003cee:	7019      	strb	r1, [r3, #0]
 8003cf0:	7833      	ldrb	r3, [r6, #0]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d016      	beq.n	8003d24 <_svfiprintf_r+0xf8>
 8003cf6:	0035      	movs	r5, r6
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	200a      	movs	r0, #10
 8003cfc:	68e3      	ldr	r3, [r4, #12]
 8003cfe:	782a      	ldrb	r2, [r5, #0]
 8003d00:	1c6e      	adds	r6, r5, #1
 8003d02:	3a30      	subs	r2, #48	; 0x30
 8003d04:	2a09      	cmp	r2, #9
 8003d06:	d94e      	bls.n	8003da6 <_svfiprintf_r+0x17a>
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	d111      	bne.n	8003d30 <_svfiprintf_r+0x104>
 8003d0c:	e017      	b.n	8003d3e <_svfiprintf_r+0x112>
 8003d0e:	3501      	adds	r5, #1
 8003d10:	e7b0      	b.n	8003c74 <_svfiprintf_r+0x48>
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <_svfiprintf_r+0x1ec>)
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	1ac0      	subs	r0, r0, r3
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4083      	lsls	r3, r0
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	002e      	movs	r6, r5
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e7ce      	b.n	8003cc2 <_svfiprintf_r+0x96>
 8003d24:	9b07      	ldr	r3, [sp, #28]
 8003d26:	1d19      	adds	r1, r3, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	9107      	str	r1, [sp, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	db01      	blt.n	8003d34 <_svfiprintf_r+0x108>
 8003d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d32:	e004      	b.n	8003d3e <_svfiprintf_r+0x112>
 8003d34:	425b      	negs	r3, r3
 8003d36:	60e3      	str	r3, [r4, #12]
 8003d38:	2302      	movs	r3, #2
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	782b      	ldrb	r3, [r5, #0]
 8003d40:	2b2e      	cmp	r3, #46	; 0x2e
 8003d42:	d10a      	bne.n	8003d5a <_svfiprintf_r+0x12e>
 8003d44:	786b      	ldrb	r3, [r5, #1]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d135      	bne.n	8003db6 <_svfiprintf_r+0x18a>
 8003d4a:	9b07      	ldr	r3, [sp, #28]
 8003d4c:	3502      	adds	r5, #2
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	9207      	str	r2, [sp, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db2b      	blt.n	8003db0 <_svfiprintf_r+0x184>
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	4e30      	ldr	r6, [pc, #192]	; (8003e1c <_svfiprintf_r+0x1f0>)
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	0030      	movs	r0, r6
 8003d60:	7829      	ldrb	r1, [r5, #0]
 8003d62:	f000 f9e5 	bl	8004130 <memchr>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d006      	beq.n	8003d78 <_svfiprintf_r+0x14c>
 8003d6a:	2340      	movs	r3, #64	; 0x40
 8003d6c:	1b80      	subs	r0, r0, r6
 8003d6e:	4083      	lsls	r3, r0
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	3501      	adds	r5, #1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	7829      	ldrb	r1, [r5, #0]
 8003d7a:	2206      	movs	r2, #6
 8003d7c:	4828      	ldr	r0, [pc, #160]	; (8003e20 <_svfiprintf_r+0x1f4>)
 8003d7e:	1c6e      	adds	r6, r5, #1
 8003d80:	7621      	strb	r1, [r4, #24]
 8003d82:	f000 f9d5 	bl	8004130 <memchr>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d03c      	beq.n	8003e04 <_svfiprintf_r+0x1d8>
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <_svfiprintf_r+0x1f8>)
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d125      	bne.n	8003ddc <_svfiprintf_r+0x1b0>
 8003d90:	2207      	movs	r2, #7
 8003d92:	9b07      	ldr	r3, [sp, #28]
 8003d94:	3307      	adds	r3, #7
 8003d96:	4393      	bics	r3, r2
 8003d98:	3308      	adds	r3, #8
 8003d9a:	9307      	str	r3, [sp, #28]
 8003d9c:	6963      	ldr	r3, [r4, #20]
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	6163      	str	r3, [r4, #20]
 8003da4:	e765      	b.n	8003c72 <_svfiprintf_r+0x46>
 8003da6:	4343      	muls	r3, r0
 8003da8:	0035      	movs	r5, r6
 8003daa:	2101      	movs	r1, #1
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	e7a6      	b.n	8003cfe <_svfiprintf_r+0xd2>
 8003db0:	2301      	movs	r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	e7d0      	b.n	8003d58 <_svfiprintf_r+0x12c>
 8003db6:	2300      	movs	r3, #0
 8003db8:	200a      	movs	r0, #10
 8003dba:	001a      	movs	r2, r3
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	6063      	str	r3, [r4, #4]
 8003dc0:	7829      	ldrb	r1, [r5, #0]
 8003dc2:	1c6e      	adds	r6, r5, #1
 8003dc4:	3930      	subs	r1, #48	; 0x30
 8003dc6:	2909      	cmp	r1, #9
 8003dc8:	d903      	bls.n	8003dd2 <_svfiprintf_r+0x1a6>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0c5      	beq.n	8003d5a <_svfiprintf_r+0x12e>
 8003dce:	9209      	str	r2, [sp, #36]	; 0x24
 8003dd0:	e7c3      	b.n	8003d5a <_svfiprintf_r+0x12e>
 8003dd2:	4342      	muls	r2, r0
 8003dd4:	0035      	movs	r5, r6
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	1852      	adds	r2, r2, r1
 8003dda:	e7f1      	b.n	8003dc0 <_svfiprintf_r+0x194>
 8003ddc:	ab07      	add	r3, sp, #28
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	003a      	movs	r2, r7
 8003de2:	0021      	movs	r1, r4
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_svfiprintf_r+0x1fc>)
 8003de6:	9803      	ldr	r0, [sp, #12]
 8003de8:	e000      	b.n	8003dec <_svfiprintf_r+0x1c0>
 8003dea:	bf00      	nop
 8003dec:	9004      	str	r0, [sp, #16]
 8003dee:	9b04      	ldr	r3, [sp, #16]
 8003df0:	3301      	adds	r3, #1
 8003df2:	d1d3      	bne.n	8003d9c <_svfiprintf_r+0x170>
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003df8:	065b      	lsls	r3, r3, #25
 8003dfa:	d400      	bmi.n	8003dfe <_svfiprintf_r+0x1d2>
 8003dfc:	e72d      	b.n	8003c5a <_svfiprintf_r+0x2e>
 8003dfe:	2001      	movs	r0, #1
 8003e00:	4240      	negs	r0, r0
 8003e02:	e72a      	b.n	8003c5a <_svfiprintf_r+0x2e>
 8003e04:	ab07      	add	r3, sp, #28
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	003a      	movs	r2, r7
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_svfiprintf_r+0x1fc>)
 8003e0e:	9803      	ldr	r0, [sp, #12]
 8003e10:	f000 f87c 	bl	8003f0c <_printf_i>
 8003e14:	e7ea      	b.n	8003dec <_svfiprintf_r+0x1c0>
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	08004504 	.word	0x08004504
 8003e1c:	0800450a 	.word	0x0800450a
 8003e20:	0800450e 	.word	0x0800450e
 8003e24:	00000000 	.word	0x00000000
 8003e28:	08003b69 	.word	0x08003b69

08003e2c <_printf_common>:
 8003e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e2e:	0015      	movs	r5, r2
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	688a      	ldr	r2, [r1, #8]
 8003e34:	690b      	ldr	r3, [r1, #16]
 8003e36:	000c      	movs	r4, r1
 8003e38:	9000      	str	r0, [sp, #0]
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	da00      	bge.n	8003e40 <_printf_common+0x14>
 8003e3e:	0013      	movs	r3, r2
 8003e40:	0022      	movs	r2, r4
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	3243      	adds	r2, #67	; 0x43
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d001      	beq.n	8003e50 <_printf_common+0x24>
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	d502      	bpl.n	8003e5c <_printf_common+0x30>
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	3302      	adds	r3, #2
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	2306      	movs	r3, #6
 8003e60:	0017      	movs	r7, r2
 8003e62:	401f      	ands	r7, r3
 8003e64:	421a      	tst	r2, r3
 8003e66:	d027      	beq.n	8003eb8 <_printf_common+0x8c>
 8003e68:	0023      	movs	r3, r4
 8003e6a:	3343      	adds	r3, #67	; 0x43
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	4193      	sbcs	r3, r2
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	0692      	lsls	r2, r2, #26
 8003e76:	d430      	bmi.n	8003eda <_printf_common+0xae>
 8003e78:	0022      	movs	r2, r4
 8003e7a:	9901      	ldr	r1, [sp, #4]
 8003e7c:	9800      	ldr	r0, [sp, #0]
 8003e7e:	9e08      	ldr	r6, [sp, #32]
 8003e80:	3243      	adds	r2, #67	; 0x43
 8003e82:	47b0      	blx	r6
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d025      	beq.n	8003ed4 <_printf_common+0xa8>
 8003e88:	2306      	movs	r3, #6
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	682a      	ldr	r2, [r5, #0]
 8003e8e:	68e1      	ldr	r1, [r4, #12]
 8003e90:	2500      	movs	r5, #0
 8003e92:	4003      	ands	r3, r0
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d103      	bne.n	8003ea0 <_printf_common+0x74>
 8003e98:	1a8d      	subs	r5, r1, r2
 8003e9a:	43eb      	mvns	r3, r5
 8003e9c:	17db      	asrs	r3, r3, #31
 8003e9e:	401d      	ands	r5, r3
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	6922      	ldr	r2, [r4, #16]
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	dd01      	ble.n	8003eac <_printf_common+0x80>
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	18ed      	adds	r5, r5, r3
 8003eac:	2700      	movs	r7, #0
 8003eae:	42bd      	cmp	r5, r7
 8003eb0:	d120      	bne.n	8003ef4 <_printf_common+0xc8>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e010      	b.n	8003ed8 <_printf_common+0xac>
 8003eb6:	3701      	adds	r7, #1
 8003eb8:	68e3      	ldr	r3, [r4, #12]
 8003eba:	682a      	ldr	r2, [r5, #0]
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	42bb      	cmp	r3, r7
 8003ec0:	ddd2      	ble.n	8003e68 <_printf_common+0x3c>
 8003ec2:	0022      	movs	r2, r4
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9901      	ldr	r1, [sp, #4]
 8003ec8:	9800      	ldr	r0, [sp, #0]
 8003eca:	9e08      	ldr	r6, [sp, #32]
 8003ecc:	3219      	adds	r2, #25
 8003ece:	47b0      	blx	r6
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d1f0      	bne.n	8003eb6 <_printf_common+0x8a>
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	4240      	negs	r0, r0
 8003ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eda:	2030      	movs	r0, #48	; 0x30
 8003edc:	18e1      	adds	r1, r4, r3
 8003ede:	3143      	adds	r1, #67	; 0x43
 8003ee0:	7008      	strb	r0, [r1, #0]
 8003ee2:	0021      	movs	r1, r4
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	3145      	adds	r1, #69	; 0x45
 8003ee8:	7809      	ldrb	r1, [r1, #0]
 8003eea:	18a2      	adds	r2, r4, r2
 8003eec:	3243      	adds	r2, #67	; 0x43
 8003eee:	3302      	adds	r3, #2
 8003ef0:	7011      	strb	r1, [r2, #0]
 8003ef2:	e7c1      	b.n	8003e78 <_printf_common+0x4c>
 8003ef4:	0022      	movs	r2, r4
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	9901      	ldr	r1, [sp, #4]
 8003efa:	9800      	ldr	r0, [sp, #0]
 8003efc:	9e08      	ldr	r6, [sp, #32]
 8003efe:	321a      	adds	r2, #26
 8003f00:	47b0      	blx	r6
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d0e6      	beq.n	8003ed4 <_printf_common+0xa8>
 8003f06:	3701      	adds	r7, #1
 8003f08:	e7d1      	b.n	8003eae <_printf_common+0x82>
	...

08003f0c <_printf_i>:
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0e:	b08b      	sub	sp, #44	; 0x2c
 8003f10:	9206      	str	r2, [sp, #24]
 8003f12:	000a      	movs	r2, r1
 8003f14:	3243      	adds	r2, #67	; 0x43
 8003f16:	9307      	str	r3, [sp, #28]
 8003f18:	9005      	str	r0, [sp, #20]
 8003f1a:	9204      	str	r2, [sp, #16]
 8003f1c:	7e0a      	ldrb	r2, [r1, #24]
 8003f1e:	000c      	movs	r4, r1
 8003f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f22:	2a78      	cmp	r2, #120	; 0x78
 8003f24:	d807      	bhi.n	8003f36 <_printf_i+0x2a>
 8003f26:	2a62      	cmp	r2, #98	; 0x62
 8003f28:	d809      	bhi.n	8003f3e <_printf_i+0x32>
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d100      	bne.n	8003f30 <_printf_i+0x24>
 8003f2e:	e0c1      	b.n	80040b4 <_printf_i+0x1a8>
 8003f30:	2a58      	cmp	r2, #88	; 0x58
 8003f32:	d100      	bne.n	8003f36 <_printf_i+0x2a>
 8003f34:	e08c      	b.n	8004050 <_printf_i+0x144>
 8003f36:	0026      	movs	r6, r4
 8003f38:	3642      	adds	r6, #66	; 0x42
 8003f3a:	7032      	strb	r2, [r6, #0]
 8003f3c:	e022      	b.n	8003f84 <_printf_i+0x78>
 8003f3e:	0010      	movs	r0, r2
 8003f40:	3863      	subs	r0, #99	; 0x63
 8003f42:	2815      	cmp	r0, #21
 8003f44:	d8f7      	bhi.n	8003f36 <_printf_i+0x2a>
 8003f46:	f7fc f8dd 	bl	8000104 <__gnu_thumb1_case_shi>
 8003f4a:	0016      	.short	0x0016
 8003f4c:	fff6001f 	.word	0xfff6001f
 8003f50:	fff6fff6 	.word	0xfff6fff6
 8003f54:	001ffff6 	.word	0x001ffff6
 8003f58:	fff6fff6 	.word	0xfff6fff6
 8003f5c:	fff6fff6 	.word	0xfff6fff6
 8003f60:	003600a8 	.word	0x003600a8
 8003f64:	fff6009a 	.word	0xfff6009a
 8003f68:	00b9fff6 	.word	0x00b9fff6
 8003f6c:	0036fff6 	.word	0x0036fff6
 8003f70:	fff6fff6 	.word	0xfff6fff6
 8003f74:	009e      	.short	0x009e
 8003f76:	0026      	movs	r6, r4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	3642      	adds	r6, #66	; 0x42
 8003f7c:	1d11      	adds	r1, r2, #4
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	7033      	strb	r3, [r6, #0]
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0a7      	b.n	80040d8 <_printf_i+0x1cc>
 8003f88:	6808      	ldr	r0, [r1, #0]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	1d0a      	adds	r2, r1, #4
 8003f8e:	0605      	lsls	r5, r0, #24
 8003f90:	d50b      	bpl.n	8003faa <_printf_i+0x9e>
 8003f92:	680d      	ldr	r5, [r1, #0]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	da03      	bge.n	8003fa2 <_printf_i+0x96>
 8003f9a:	232d      	movs	r3, #45	; 0x2d
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	426d      	negs	r5, r5
 8003fa0:	7013      	strb	r3, [r2, #0]
 8003fa2:	4b61      	ldr	r3, [pc, #388]	; (8004128 <_printf_i+0x21c>)
 8003fa4:	270a      	movs	r7, #10
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	e01b      	b.n	8003fe2 <_printf_i+0xd6>
 8003faa:	680d      	ldr	r5, [r1, #0]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	0641      	lsls	r1, r0, #25
 8003fb0:	d5f1      	bpl.n	8003f96 <_printf_i+0x8a>
 8003fb2:	b22d      	sxth	r5, r5
 8003fb4:	e7ef      	b.n	8003f96 <_printf_i+0x8a>
 8003fb6:	680d      	ldr	r5, [r1, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	1d08      	adds	r0, r1, #4
 8003fbc:	6018      	str	r0, [r3, #0]
 8003fbe:	062e      	lsls	r6, r5, #24
 8003fc0:	d501      	bpl.n	8003fc6 <_printf_i+0xba>
 8003fc2:	680d      	ldr	r5, [r1, #0]
 8003fc4:	e003      	b.n	8003fce <_printf_i+0xc2>
 8003fc6:	066d      	lsls	r5, r5, #25
 8003fc8:	d5fb      	bpl.n	8003fc2 <_printf_i+0xb6>
 8003fca:	680d      	ldr	r5, [r1, #0]
 8003fcc:	b2ad      	uxth	r5, r5
 8003fce:	4b56      	ldr	r3, [pc, #344]	; (8004128 <_printf_i+0x21c>)
 8003fd0:	2708      	movs	r7, #8
 8003fd2:	9303      	str	r3, [sp, #12]
 8003fd4:	2a6f      	cmp	r2, #111	; 0x6f
 8003fd6:	d000      	beq.n	8003fda <_printf_i+0xce>
 8003fd8:	3702      	adds	r7, #2
 8003fda:	0023      	movs	r3, r4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	3343      	adds	r3, #67	; 0x43
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db03      	blt.n	8003ff2 <_printf_i+0xe6>
 8003fea:	2204      	movs	r2, #4
 8003fec:	6821      	ldr	r1, [r4, #0]
 8003fee:	4391      	bics	r1, r2
 8003ff0:	6021      	str	r1, [r4, #0]
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	d102      	bne.n	8003ffc <_printf_i+0xf0>
 8003ff6:	9e04      	ldr	r6, [sp, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <_printf_i+0x10a>
 8003ffc:	9e04      	ldr	r6, [sp, #16]
 8003ffe:	0028      	movs	r0, r5
 8004000:	0039      	movs	r1, r7
 8004002:	f7fc f90f 	bl	8000224 <__aeabi_uidivmod>
 8004006:	9b03      	ldr	r3, [sp, #12]
 8004008:	3e01      	subs	r6, #1
 800400a:	5c5b      	ldrb	r3, [r3, r1]
 800400c:	7033      	strb	r3, [r6, #0]
 800400e:	002b      	movs	r3, r5
 8004010:	0005      	movs	r5, r0
 8004012:	429f      	cmp	r7, r3
 8004014:	d9f3      	bls.n	8003ffe <_printf_i+0xf2>
 8004016:	2f08      	cmp	r7, #8
 8004018:	d109      	bne.n	800402e <_printf_i+0x122>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	07db      	lsls	r3, r3, #31
 800401e:	d506      	bpl.n	800402e <_printf_i+0x122>
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	4293      	cmp	r3, r2
 8004026:	dc02      	bgt.n	800402e <_printf_i+0x122>
 8004028:	2330      	movs	r3, #48	; 0x30
 800402a:	3e01      	subs	r6, #1
 800402c:	7033      	strb	r3, [r6, #0]
 800402e:	9b04      	ldr	r3, [sp, #16]
 8004030:	1b9b      	subs	r3, r3, r6
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	9b07      	ldr	r3, [sp, #28]
 8004036:	0021      	movs	r1, r4
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	9805      	ldr	r0, [sp, #20]
 800403c:	9b06      	ldr	r3, [sp, #24]
 800403e:	aa09      	add	r2, sp, #36	; 0x24
 8004040:	f7ff fef4 	bl	8003e2c <_printf_common>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d14c      	bne.n	80040e2 <_printf_i+0x1d6>
 8004048:	2001      	movs	r0, #1
 800404a:	4240      	negs	r0, r0
 800404c:	b00b      	add	sp, #44	; 0x2c
 800404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004050:	3145      	adds	r1, #69	; 0x45
 8004052:	700a      	strb	r2, [r1, #0]
 8004054:	4a34      	ldr	r2, [pc, #208]	; (8004128 <_printf_i+0x21c>)
 8004056:	9203      	str	r2, [sp, #12]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	6821      	ldr	r1, [r4, #0]
 800405c:	ca20      	ldmia	r2!, {r5}
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	0608      	lsls	r0, r1, #24
 8004062:	d516      	bpl.n	8004092 <_printf_i+0x186>
 8004064:	07cb      	lsls	r3, r1, #31
 8004066:	d502      	bpl.n	800406e <_printf_i+0x162>
 8004068:	2320      	movs	r3, #32
 800406a:	4319      	orrs	r1, r3
 800406c:	6021      	str	r1, [r4, #0]
 800406e:	2710      	movs	r7, #16
 8004070:	2d00      	cmp	r5, #0
 8004072:	d1b2      	bne.n	8003fda <_printf_i+0xce>
 8004074:	2320      	movs	r3, #32
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	439a      	bics	r2, r3
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	e7ad      	b.n	8003fda <_printf_i+0xce>
 800407e:	2220      	movs	r2, #32
 8004080:	6809      	ldr	r1, [r1, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	0022      	movs	r2, r4
 8004088:	2178      	movs	r1, #120	; 0x78
 800408a:	3245      	adds	r2, #69	; 0x45
 800408c:	7011      	strb	r1, [r2, #0]
 800408e:	4a27      	ldr	r2, [pc, #156]	; (800412c <_printf_i+0x220>)
 8004090:	e7e1      	b.n	8004056 <_printf_i+0x14a>
 8004092:	0648      	lsls	r0, r1, #25
 8004094:	d5e6      	bpl.n	8004064 <_printf_i+0x158>
 8004096:	b2ad      	uxth	r5, r5
 8004098:	e7e4      	b.n	8004064 <_printf_i+0x158>
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	680d      	ldr	r5, [r1, #0]
 800409e:	1d10      	adds	r0, r2, #4
 80040a0:	6949      	ldr	r1, [r1, #20]
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	062e      	lsls	r6, r5, #24
 80040a8:	d501      	bpl.n	80040ae <_printf_i+0x1a2>
 80040aa:	6019      	str	r1, [r3, #0]
 80040ac:	e002      	b.n	80040b4 <_printf_i+0x1a8>
 80040ae:	066d      	lsls	r5, r5, #25
 80040b0:	d5fb      	bpl.n	80040aa <_printf_i+0x19e>
 80040b2:	8019      	strh	r1, [r3, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9e04      	ldr	r6, [sp, #16]
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	e7bb      	b.n	8004034 <_printf_i+0x128>
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	1d11      	adds	r1, r2, #4
 80040c0:	6019      	str	r1, [r3, #0]
 80040c2:	6816      	ldr	r6, [r2, #0]
 80040c4:	2100      	movs	r1, #0
 80040c6:	0030      	movs	r0, r6
 80040c8:	6862      	ldr	r2, [r4, #4]
 80040ca:	f000 f831 	bl	8004130 <memchr>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d001      	beq.n	80040d6 <_printf_i+0x1ca>
 80040d2:	1b80      	subs	r0, r0, r6
 80040d4:	6060      	str	r0, [r4, #4]
 80040d6:	6863      	ldr	r3, [r4, #4]
 80040d8:	6123      	str	r3, [r4, #16]
 80040da:	2300      	movs	r3, #0
 80040dc:	9a04      	ldr	r2, [sp, #16]
 80040de:	7013      	strb	r3, [r2, #0]
 80040e0:	e7a8      	b.n	8004034 <_printf_i+0x128>
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	0032      	movs	r2, r6
 80040e6:	9906      	ldr	r1, [sp, #24]
 80040e8:	9805      	ldr	r0, [sp, #20]
 80040ea:	9d07      	ldr	r5, [sp, #28]
 80040ec:	47a8      	blx	r5
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	d0aa      	beq.n	8004048 <_printf_i+0x13c>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	079b      	lsls	r3, r3, #30
 80040f6:	d415      	bmi.n	8004124 <_printf_i+0x218>
 80040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fa:	68e0      	ldr	r0, [r4, #12]
 80040fc:	4298      	cmp	r0, r3
 80040fe:	daa5      	bge.n	800404c <_printf_i+0x140>
 8004100:	0018      	movs	r0, r3
 8004102:	e7a3      	b.n	800404c <_printf_i+0x140>
 8004104:	0022      	movs	r2, r4
 8004106:	2301      	movs	r3, #1
 8004108:	9906      	ldr	r1, [sp, #24]
 800410a:	9805      	ldr	r0, [sp, #20]
 800410c:	9e07      	ldr	r6, [sp, #28]
 800410e:	3219      	adds	r2, #25
 8004110:	47b0      	blx	r6
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d098      	beq.n	8004048 <_printf_i+0x13c>
 8004116:	3501      	adds	r5, #1
 8004118:	68e3      	ldr	r3, [r4, #12]
 800411a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	42ab      	cmp	r3, r5
 8004120:	dcf0      	bgt.n	8004104 <_printf_i+0x1f8>
 8004122:	e7e9      	b.n	80040f8 <_printf_i+0x1ec>
 8004124:	2500      	movs	r5, #0
 8004126:	e7f7      	b.n	8004118 <_printf_i+0x20c>
 8004128:	08004515 	.word	0x08004515
 800412c:	08004526 	.word	0x08004526

08004130 <memchr>:
 8004130:	b2c9      	uxtb	r1, r1
 8004132:	1882      	adds	r2, r0, r2
 8004134:	4290      	cmp	r0, r2
 8004136:	d101      	bne.n	800413c <memchr+0xc>
 8004138:	2000      	movs	r0, #0
 800413a:	4770      	bx	lr
 800413c:	7803      	ldrb	r3, [r0, #0]
 800413e:	428b      	cmp	r3, r1
 8004140:	d0fb      	beq.n	800413a <memchr+0xa>
 8004142:	3001      	adds	r0, #1
 8004144:	e7f6      	b.n	8004134 <memchr+0x4>

08004146 <memcpy>:
 8004146:	2300      	movs	r3, #0
 8004148:	b510      	push	{r4, lr}
 800414a:	429a      	cmp	r2, r3
 800414c:	d100      	bne.n	8004150 <memcpy+0xa>
 800414e:	bd10      	pop	{r4, pc}
 8004150:	5ccc      	ldrb	r4, [r1, r3]
 8004152:	54c4      	strb	r4, [r0, r3]
 8004154:	3301      	adds	r3, #1
 8004156:	e7f8      	b.n	800414a <memcpy+0x4>

08004158 <memmove>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4288      	cmp	r0, r1
 800415c:	d902      	bls.n	8004164 <memmove+0xc>
 800415e:	188b      	adds	r3, r1, r2
 8004160:	4298      	cmp	r0, r3
 8004162:	d303      	bcc.n	800416c <memmove+0x14>
 8004164:	2300      	movs	r3, #0
 8004166:	e007      	b.n	8004178 <memmove+0x20>
 8004168:	5c8b      	ldrb	r3, [r1, r2]
 800416a:	5483      	strb	r3, [r0, r2]
 800416c:	3a01      	subs	r2, #1
 800416e:	d2fb      	bcs.n	8004168 <memmove+0x10>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	5ccc      	ldrb	r4, [r1, r3]
 8004174:	54c4      	strb	r4, [r0, r3]
 8004176:	3301      	adds	r3, #1
 8004178:	429a      	cmp	r2, r3
 800417a:	d1fa      	bne.n	8004172 <memmove+0x1a>
 800417c:	e7f8      	b.n	8004170 <memmove+0x18>
	...

08004180 <_free_r>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	0005      	movs	r5, r0
 8004184:	2900      	cmp	r1, #0
 8004186:	d010      	beq.n	80041aa <_free_r+0x2a>
 8004188:	1f0c      	subs	r4, r1, #4
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	da00      	bge.n	8004192 <_free_r+0x12>
 8004190:	18e4      	adds	r4, r4, r3
 8004192:	0028      	movs	r0, r5
 8004194:	f000 f918 	bl	80043c8 <__malloc_lock>
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <_free_r+0x90>)
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <_free_r+0x2c>
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	6014      	str	r4, [r2, #0]
 80041a4:	0028      	movs	r0, r5
 80041a6:	f000 f917 	bl	80043d8 <__malloc_unlock>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	d908      	bls.n	80041c2 <_free_r+0x42>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	1860      	adds	r0, r4, r1
 80041b4:	4283      	cmp	r3, r0
 80041b6:	d1f3      	bne.n	80041a0 <_free_r+0x20>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	1841      	adds	r1, r0, r1
 80041be:	6021      	str	r1, [r4, #0]
 80041c0:	e7ee      	b.n	80041a0 <_free_r+0x20>
 80041c2:	001a      	movs	r2, r3
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <_free_r+0x4e>
 80041ca:	42a3      	cmp	r3, r4
 80041cc:	d9f9      	bls.n	80041c2 <_free_r+0x42>
 80041ce:	6811      	ldr	r1, [r2, #0]
 80041d0:	1850      	adds	r0, r2, r1
 80041d2:	42a0      	cmp	r0, r4
 80041d4:	d10b      	bne.n	80041ee <_free_r+0x6e>
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	1809      	adds	r1, r1, r0
 80041da:	1850      	adds	r0, r2, r1
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	4283      	cmp	r3, r0
 80041e0:	d1e0      	bne.n	80041a4 <_free_r+0x24>
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	1841      	adds	r1, r0, r1
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	6053      	str	r3, [r2, #4]
 80041ec:	e7da      	b.n	80041a4 <_free_r+0x24>
 80041ee:	42a0      	cmp	r0, r4
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x78>
 80041f2:	230c      	movs	r3, #12
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	e7d5      	b.n	80041a4 <_free_r+0x24>
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	1860      	adds	r0, r4, r1
 80041fc:	4283      	cmp	r3, r0
 80041fe:	d103      	bne.n	8004208 <_free_r+0x88>
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	1841      	adds	r1, r0, r1
 8004206:	6021      	str	r1, [r4, #0]
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	6054      	str	r4, [r2, #4]
 800420c:	e7ca      	b.n	80041a4 <_free_r+0x24>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	200008c4 	.word	0x200008c4

08004214 <sbrk_aligned>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4e0f      	ldr	r6, [pc, #60]	; (8004254 <sbrk_aligned+0x40>)
 8004218:	000d      	movs	r5, r1
 800421a:	6831      	ldr	r1, [r6, #0]
 800421c:	0004      	movs	r4, r0
 800421e:	2900      	cmp	r1, #0
 8004220:	d102      	bne.n	8004228 <sbrk_aligned+0x14>
 8004222:	f000 f8bf 	bl	80043a4 <_sbrk_r>
 8004226:	6030      	str	r0, [r6, #0]
 8004228:	0029      	movs	r1, r5
 800422a:	0020      	movs	r0, r4
 800422c:	f000 f8ba 	bl	80043a4 <_sbrk_r>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d00a      	beq.n	800424a <sbrk_aligned+0x36>
 8004234:	2303      	movs	r3, #3
 8004236:	1cc5      	adds	r5, r0, #3
 8004238:	439d      	bics	r5, r3
 800423a:	42a8      	cmp	r0, r5
 800423c:	d007      	beq.n	800424e <sbrk_aligned+0x3a>
 800423e:	1a29      	subs	r1, r5, r0
 8004240:	0020      	movs	r0, r4
 8004242:	f000 f8af 	bl	80043a4 <_sbrk_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d101      	bne.n	800424e <sbrk_aligned+0x3a>
 800424a:	2501      	movs	r5, #1
 800424c:	426d      	negs	r5, r5
 800424e:	0028      	movs	r0, r5
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	200008c8 	.word	0x200008c8

08004258 <_malloc_r>:
 8004258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800425a:	2203      	movs	r2, #3
 800425c:	1ccb      	adds	r3, r1, #3
 800425e:	4393      	bics	r3, r2
 8004260:	3308      	adds	r3, #8
 8004262:	0006      	movs	r6, r0
 8004264:	001f      	movs	r7, r3
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d232      	bcs.n	80042d0 <_malloc_r+0x78>
 800426a:	270c      	movs	r7, #12
 800426c:	42b9      	cmp	r1, r7
 800426e:	d831      	bhi.n	80042d4 <_malloc_r+0x7c>
 8004270:	0030      	movs	r0, r6
 8004272:	f000 f8a9 	bl	80043c8 <__malloc_lock>
 8004276:	4d32      	ldr	r5, [pc, #200]	; (8004340 <_malloc_r+0xe8>)
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	001c      	movs	r4, r3
 800427c:	2c00      	cmp	r4, #0
 800427e:	d12e      	bne.n	80042de <_malloc_r+0x86>
 8004280:	0039      	movs	r1, r7
 8004282:	0030      	movs	r0, r6
 8004284:	f7ff ffc6 	bl	8004214 <sbrk_aligned>
 8004288:	0004      	movs	r4, r0
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d11e      	bne.n	80042cc <_malloc_r+0x74>
 800428e:	682c      	ldr	r4, [r5, #0]
 8004290:	0025      	movs	r5, r4
 8004292:	2d00      	cmp	r5, #0
 8004294:	d14a      	bne.n	800432c <_malloc_r+0xd4>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	0029      	movs	r1, r5
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	0030      	movs	r0, r6
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	f000 f880 	bl	80043a4 <_sbrk_r>
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	4283      	cmp	r3, r0
 80042a8:	d143      	bne.n	8004332 <_malloc_r+0xda>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	3703      	adds	r7, #3
 80042ae:	1aff      	subs	r7, r7, r3
 80042b0:	2303      	movs	r3, #3
 80042b2:	439f      	bics	r7, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	2f0c      	cmp	r7, #12
 80042b8:	d200      	bcs.n	80042bc <_malloc_r+0x64>
 80042ba:	270c      	movs	r7, #12
 80042bc:	0039      	movs	r1, r7
 80042be:	0030      	movs	r0, r6
 80042c0:	f7ff ffa8 	bl	8004214 <sbrk_aligned>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d034      	beq.n	8004332 <_malloc_r+0xda>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	19df      	adds	r7, r3, r7
 80042cc:	6027      	str	r7, [r4, #0]
 80042ce:	e013      	b.n	80042f8 <_malloc_r+0xa0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dacb      	bge.n	800426c <_malloc_r+0x14>
 80042d4:	230c      	movs	r3, #12
 80042d6:	2500      	movs	r5, #0
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	0028      	movs	r0, r5
 80042dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	1bd1      	subs	r1, r2, r7
 80042e2:	d420      	bmi.n	8004326 <_malloc_r+0xce>
 80042e4:	290b      	cmp	r1, #11
 80042e6:	d917      	bls.n	8004318 <_malloc_r+0xc0>
 80042e8:	19e2      	adds	r2, r4, r7
 80042ea:	6027      	str	r7, [r4, #0]
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d111      	bne.n	8004314 <_malloc_r+0xbc>
 80042f0:	602a      	str	r2, [r5, #0]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	0030      	movs	r0, r6
 80042fa:	0025      	movs	r5, r4
 80042fc:	f000 f86c 	bl	80043d8 <__malloc_unlock>
 8004300:	2207      	movs	r2, #7
 8004302:	350b      	adds	r5, #11
 8004304:	1d23      	adds	r3, r4, #4
 8004306:	4395      	bics	r5, r2
 8004308:	1aea      	subs	r2, r5, r3
 800430a:	429d      	cmp	r5, r3
 800430c:	d0e5      	beq.n	80042da <_malloc_r+0x82>
 800430e:	1b5b      	subs	r3, r3, r5
 8004310:	50a3      	str	r3, [r4, r2]
 8004312:	e7e2      	b.n	80042da <_malloc_r+0x82>
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	e7ec      	b.n	80042f2 <_malloc_r+0x9a>
 8004318:	6862      	ldr	r2, [r4, #4]
 800431a:	42a3      	cmp	r3, r4
 800431c:	d101      	bne.n	8004322 <_malloc_r+0xca>
 800431e:	602a      	str	r2, [r5, #0]
 8004320:	e7ea      	b.n	80042f8 <_malloc_r+0xa0>
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	e7e8      	b.n	80042f8 <_malloc_r+0xa0>
 8004326:	0023      	movs	r3, r4
 8004328:	6864      	ldr	r4, [r4, #4]
 800432a:	e7a7      	b.n	800427c <_malloc_r+0x24>
 800432c:	002c      	movs	r4, r5
 800432e:	686d      	ldr	r5, [r5, #4]
 8004330:	e7af      	b.n	8004292 <_malloc_r+0x3a>
 8004332:	230c      	movs	r3, #12
 8004334:	0030      	movs	r0, r6
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	f000 f84e 	bl	80043d8 <__malloc_unlock>
 800433c:	e7cd      	b.n	80042da <_malloc_r+0x82>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	200008c4 	.word	0x200008c4

08004344 <_realloc_r>:
 8004344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004346:	0007      	movs	r7, r0
 8004348:	000e      	movs	r6, r1
 800434a:	0014      	movs	r4, r2
 800434c:	2900      	cmp	r1, #0
 800434e:	d105      	bne.n	800435c <_realloc_r+0x18>
 8004350:	0011      	movs	r1, r2
 8004352:	f7ff ff81 	bl	8004258 <_malloc_r>
 8004356:	0005      	movs	r5, r0
 8004358:	0028      	movs	r0, r5
 800435a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800435c:	2a00      	cmp	r2, #0
 800435e:	d103      	bne.n	8004368 <_realloc_r+0x24>
 8004360:	f7ff ff0e 	bl	8004180 <_free_r>
 8004364:	0025      	movs	r5, r4
 8004366:	e7f7      	b.n	8004358 <_realloc_r+0x14>
 8004368:	f000 f83e 	bl	80043e8 <_malloc_usable_size_r>
 800436c:	9001      	str	r0, [sp, #4]
 800436e:	4284      	cmp	r4, r0
 8004370:	d803      	bhi.n	800437a <_realloc_r+0x36>
 8004372:	0035      	movs	r5, r6
 8004374:	0843      	lsrs	r3, r0, #1
 8004376:	42a3      	cmp	r3, r4
 8004378:	d3ee      	bcc.n	8004358 <_realloc_r+0x14>
 800437a:	0021      	movs	r1, r4
 800437c:	0038      	movs	r0, r7
 800437e:	f7ff ff6b 	bl	8004258 <_malloc_r>
 8004382:	1e05      	subs	r5, r0, #0
 8004384:	d0e8      	beq.n	8004358 <_realloc_r+0x14>
 8004386:	9b01      	ldr	r3, [sp, #4]
 8004388:	0022      	movs	r2, r4
 800438a:	429c      	cmp	r4, r3
 800438c:	d900      	bls.n	8004390 <_realloc_r+0x4c>
 800438e:	001a      	movs	r2, r3
 8004390:	0031      	movs	r1, r6
 8004392:	0028      	movs	r0, r5
 8004394:	f7ff fed7 	bl	8004146 <memcpy>
 8004398:	0031      	movs	r1, r6
 800439a:	0038      	movs	r0, r7
 800439c:	f7ff fef0 	bl	8004180 <_free_r>
 80043a0:	e7da      	b.n	8004358 <_realloc_r+0x14>
	...

080043a4 <_sbrk_r>:
 80043a4:	2300      	movs	r3, #0
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	4d06      	ldr	r5, [pc, #24]	; (80043c4 <_sbrk_r+0x20>)
 80043aa:	0004      	movs	r4, r0
 80043ac:	0008      	movs	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fd f9e0 	bl	8001774 <_sbrk>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d103      	bne.n	80043c0 <_sbrk_r+0x1c>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d000      	beq.n	80043c0 <_sbrk_r+0x1c>
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	200008cc 	.word	0x200008cc

080043c8 <__malloc_lock>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4802      	ldr	r0, [pc, #8]	; (80043d4 <__malloc_lock+0xc>)
 80043cc:	f000 f814 	bl	80043f8 <__retarget_lock_acquire_recursive>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	200008d0 	.word	0x200008d0

080043d8 <__malloc_unlock>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	4802      	ldr	r0, [pc, #8]	; (80043e4 <__malloc_unlock+0xc>)
 80043dc:	f000 f80d 	bl	80043fa <__retarget_lock_release_recursive>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	200008d0 	.word	0x200008d0

080043e8 <_malloc_usable_size_r>:
 80043e8:	1f0b      	subs	r3, r1, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1f18      	subs	r0, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da01      	bge.n	80043f6 <_malloc_usable_size_r+0xe>
 80043f2:	580b      	ldr	r3, [r1, r0]
 80043f4:	18c0      	adds	r0, r0, r3
 80043f6:	4770      	bx	lr

080043f8 <__retarget_lock_acquire_recursive>:
 80043f8:	4770      	bx	lr

080043fa <__retarget_lock_release_recursive>:
 80043fa:	4770      	bx	lr

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
